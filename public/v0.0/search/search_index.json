{"config":{"lang":["en","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"gcix - Write your GitLab CI pipelines in X languages","text":"<p>The complete documentation is found at https://docs.gcix.dev</p> <p>The GitLab CI X Library (gcix) is a library to create dynamic pipelines for GitLab CI.</p> <p>With the gcix you can write your GitLab CI pipelines in multiple languages.</p>"},{"location":"#supported-languages","title":"Supported languages","text":"<ul> <li>Typescript/JavaScript (native)</li> <li>Python</li> </ul> <p>A simple pipeline could look like...</p> <p>...this in Typescript</p> <pre><code>import { Pipeline, Job } from \"gcix\"\nconst pipeline = new Pipeline()\nconst job = new Job({stage: \"build\", scripts: [\"docker build .\"]})\npipeline.addChildren({jobsOrJobCollections: [job]})\npipeline.writeYaml()\n</code></pre> <p>...this in Python</p> <pre><code>from gcip import Pipeline, Job\npipeline = Pipeline()\njob      = Job(stage=\"build\", scripts=[\"docker build .\"])\npipeline.add_children(jobs_or_job_collections=[job])\npipeline.write_yaml()\n</code></pre>"},{"location":"#intro","title":"Intro","text":"<p>The gcix is a rewrite of the gcip, the reason behind the rewrite is, that I wanted to learn Typescript, and give developers the choice to use the language they are familiar with. This is because I chose Typescript and a tool called jsii made by AWS. jsii translates the different language API's to typescript. The user which uses Python is using Pythons syntax, behind the scenes they are getting translated to Typescript.</p>"},{"location":"#examples","title":"Examples","text":"<p>For a more complex and real world example, just check out our projects .gitlab-ci.ts. The .gitlab-ci.ts is the written example of a working gcix in Typescript. The Typescript code is getting rendered and stored as an artifact in the pipeline see generated yaml file.</p> <p>The gcix is using the GitLab feature of dynamic child pipelines. First the <code>.gitlab-ci.ts</code> generates the common GitLab CI yaml file which is then started as child pipeline. To get the generated pipeline it is necessary to invoke the <code>.gitlab-ci.ts</code> with <code>ts-node</code>. To get an idea of a dynamic child pipelines setup, you can have a look into .gitlab-ci.yml.</p> <p>Creating your pipelines in any supported programming language code allows you all the features of that language, like:</p> <ul> <li>re-use code (DRY - Don't repeat yourself)</li> <li>use variables, control flow (if-then-else, loops, ...), complex data structures, input/output, error handling, ...</li> <li>programming paradigms like object-oriented or functional programming</li> <li>use 3<sup>rd</sup> party libraries in your pipelines</li> <li>test driven development of pipelines with Jest(Typescript), pytest(Python)...</li> <li>package management and distribution of your pipeline code</li> <li>... anything you can imagine to do with Python code</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>Please read the User Documentation to get a quick introduction into most features of the gcix.</p> <p>You can consult the API Reference to get an overview of all classes and methods and a deeper view into their parameters.</p> <p>For more information on how to create your own library based on gcix, please read the Developer Documentation to learn about good practices and conventions.</p>"},{"location":"#why-pipelines-as-code","title":"Why pipelines as code?","text":"<p>There has been a really good discussion on Hacker News about configuration vs code. Comments stating that when struggling around with the limitations of static configuration we start writing pipelines as code, until we hassle around with complex code and start re-writing complex pipelines in static configuration and so forth.</p> <p>It is absolutely right that pipelines as code are not new and have lots of drawbacks. Chances are good that you have the one guru in you company loving this project and is writing weird pipelines that nobody else understands. Also comments state that pipelines are those basic things that build and test your code and shouldn't be in code too, because then you might have a pipeline that build and test your pipeline code.</p> <p>All those statements are quite true. However all those statements could be applied to static configuration. We started this project because of GitLab CI yaml files growing over thousands of lines. We tried to implement some logic with clunky rule sets. We tried to re-use code with yaml templates. We tried to write predefined pipelines by using includes. We started to write bash scripts that do bulk loads of work within a job. All in all those felt like a bad workaround, while having in mind how much cleaner this might be, writing our pipelines in code. That is why we started this project and since using it with great success.</p> <p>However it is absolutely important to understand the gcix as a supplement and not as a substitution to GitLab CI yaml files. As long you are fine with having a couple of jobs you could easily describe in static configuration, just do it. If you feel that you can't manage the complexity of you static yaml configuration and started to build lots of helper scripts, you could consider writing your pipelines in code. This considerations should include, if the pipeline code you write is definitely an advantage over the static scripts you had before - and not just for you but also for your colleagues and the company you are writing the code for.</p> <p>The gcix should be a choice - not a standard.</p>"},{"location":"#thanks","title":"Thanks","text":"<p>First of all, I have to thank Thomas Steinbach he created the GitLab CI Python Library (gcip) and started a great journey with GitLab CI pipelines as code. Another thank you goes to the DB Systel GmbH.</p>"},{"location":"#author","title":"Author","text":"<p>gcix was created by Daniel von E\u00dfen in 2023.</p>"},{"location":"#license","title":"License","text":"<p>The content of this repository is licensed under the Apache 2.0 license.</p> <p>Copyright Daniel von E\u00dfen</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>User Documentation</li> <li>Developer Documentation</li> <li>API Reference</li> <li>Getting Started</li> <li>Typescript<ul> <li>Core</li> <li>Addons</li> <li>AWS</li> <li>Container</li> <li>GIT</li> <li>GitLab</li> <li>Linux</li> <li>Python</li> <li>Security</li> </ul> </li> <li>Python<ul> <li>Core</li> <li>Addons</li> <li>AWS</li> <li>Container</li> <li>GIT</li> <li>GitLab</li> <li>Linux</li> <li>Python</li> <li>Security</li> </ul> </li> </ul>"},{"location":"api/","title":"Welcome to the GCIX Module API Documentation","text":"<p>Explore the <code>gcix</code> module API documentation, available in</p> <ul> <li>TypeScript (native)</li> <li>Python</li> </ul> <p>flavors, for effortless GitLab CI pipeline creation. This resource empowers you to programmatically define, customize, and manage CI/CD workflows seamlessly.</p>"},{"location":"api/aws.python/","title":"<code>aws</code> Submodule","text":""},{"location":"api/aws.python/#structs","title":"Structs","text":""},{"location":"api/aws.python/#cdkbootstrapprops","title":"CdkBootstrapProps","text":"<p>Configuration properties for initializing a Bootstrap instance.</p>"},{"location":"api/aws.python/#initializer","title":"Initializer","text":"<pre><code>from gcix import aws\naws.CdkBootstrapProps(\naws_account_id: str,\naws_region: str,\nqualifier: str,\ntoolkit_stack_name: str,\njob_name: str = None,\njob_stage: str = None,\nresource_tags: typing.Mapping[str] = None\n)\n</code></pre>"},{"location":"api/aws.python/#properties","title":"Properties","text":"Name Type Description <code>aws_account_id</code> <code>str</code> The AWS account ID associated with the Bootstrap configuration. <code>aws_region</code> <code>str</code> The AWS region in which the Bootstrap will be performed. <code>qualifier</code> <code>str</code> The qualifier applied to the Bootstrap. <code>toolkit_stack_name</code> <code>str</code> The name of the toolkit stack used for Bootstrap. <code>job_name</code> <code>str</code> An optional name for the Bootstrap job. <code>job_stage</code> <code>str</code> An optional stage for the Bootstrap job. <code>resource_tags</code> <code>typing.Mapping[str]</code> Optional resource tags that can be applied during Bootstrap."},{"location":"api/aws.python/#aws_account_idrequired","title":"<code>aws_account_id</code><sup>Required</sup>","text":"<pre><code>aws_account_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The AWS account ID associated with the Bootstrap configuration.</p>"},{"location":"api/aws.python/#aws_regionrequired","title":"<code>aws_region</code><sup>Required</sup>","text":"<pre><code>aws_region: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The AWS region in which the Bootstrap will be performed.</p>"},{"location":"api/aws.python/#qualifierrequired","title":"<code>qualifier</code><sup>Required</sup>","text":"<pre><code>qualifier: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The qualifier applied to the Bootstrap.</p>"},{"location":"api/aws.python/#toolkit_stack_namerequired","title":"<code>toolkit_stack_name</code><sup>Required</sup>","text":"<pre><code>toolkit_stack_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the toolkit stack used for Bootstrap.</p>"},{"location":"api/aws.python/#job_nameoptional","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional name for the Bootstrap job.</p>"},{"location":"api/aws.python/#job_stageoptional","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional stage for the Bootstrap job.</p>"},{"location":"api/aws.python/#resource_tagsoptional","title":"<code>resource_tags</code><sup>Optional</sup>","text":"<pre><code>resource_tags: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional resource tags that can be applied during Bootstrap.</p>"},{"location":"api/aws.python/#cdkdeployprops","title":"CdkDeployProps","text":"<p>Configuration properties for initializing a Deploy instance.</p>"},{"location":"api/aws.python/#initializer_1","title":"Initializer","text":"<pre><code>from gcix import aws\naws.CdkDeployProps(\nstacks: typing.List[str],\ncontext: typing.Mapping[str] = None,\ndeploy_options: str = None,\njob_name: str = None,\njob_stage: str = None,\nstrict: bool = None,\ntoolkit_stack_name: str = None,\nwait_for_stack: bool = None,\nwait_for_stack_account_id: str = None,\nwait_for_stack_assume_role: str = None\n)\n</code></pre>"},{"location":"api/aws.python/#properties_1","title":"Properties","text":"Name Type Description <code>stacks</code> <code>typing.List[str]</code> An array of stack names to be deployed. <code>context</code> <code>typing.Mapping[str]</code> Optional context values to provide additional information for deployment. <code>deploy_options</code> <code>str</code> Optional deployment options. <code>job_name</code> <code>str</code> An optional name for the Deploy job. <code>job_stage</code> <code>str</code> An optional stage for the Deploy job. <code>strict</code> <code>bool</code> Enable strict deployment mode. <code>toolkit_stack_name</code> <code>str</code> Optional toolkit stack name used for deployment. <code>wait_for_stack</code> <code>bool</code> Wait for stacks to complete deployment. <code>wait_for_stack_account_id</code> <code>str</code> AWS account ID for stack waiting. <code>wait_for_stack_assume_role</code> <code>str</code> AWS assume role for stack waiting."},{"location":"api/aws.python/#stacksrequired","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>stacks: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>An array of stack names to be deployed.</p>"},{"location":"api/aws.python/#contextoptional","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>context: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional context values to provide additional information for deployment.</p>"},{"location":"api/aws.python/#deploy_optionsoptional","title":"<code>deploy_options</code><sup>Optional</sup>","text":"<pre><code>deploy_options: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Optional deployment options.</p>"},{"location":"api/aws.python/#job_nameoptional_1","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional name for the Deploy job.</p>"},{"location":"api/aws.python/#job_stageoptional_1","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional stage for the Deploy job.</p>"},{"location":"api/aws.python/#strictoptional","title":"<code>strict</code><sup>Optional</sup>","text":"<pre><code>strict: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Enable strict deployment mode.</p>"},{"location":"api/aws.python/#toolkit_stack_nameoptional","title":"<code>toolkit_stack_name</code><sup>Optional</sup>","text":"<pre><code>toolkit_stack_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Optional toolkit stack name used for deployment.</p>"},{"location":"api/aws.python/#wait_for_stackoptional","title":"<code>wait_for_stack</code><sup>Optional</sup>","text":"<pre><code>wait_for_stack: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Wait for stacks to complete deployment.</p>"},{"location":"api/aws.python/#wait_for_stack_account_idoptional","title":"<code>wait_for_stack_account_id</code><sup>Optional</sup>","text":"<pre><code>wait_for_stack_account_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>AWS account ID for stack waiting.</p>"},{"location":"api/aws.python/#wait_for_stack_assume_roleoptional","title":"<code>wait_for_stack_assume_role</code><sup>Optional</sup>","text":"<pre><code>wait_for_stack_assume_role: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>AWS assume role for stack waiting.</p>"},{"location":"api/aws.python/#cdkdiffdeployprops","title":"CdkDiffDeployProps","text":"<p>Configuration properties for initializing a DiffDeploy instance.</p>"},{"location":"api/aws.python/#initializer_2","title":"Initializer","text":"<pre><code>from gcix import aws\naws.CdkDiffDeployProps(\nstacks: typing.List[str],\ncontext: typing.Mapping[str] = None\n)\n</code></pre>"},{"location":"api/aws.python/#properties_2","title":"Properties","text":"Name Type Description <code>stacks</code> <code>typing.List[str]</code> An array of stack names for which to generate a diff and perform deployment. <code>context</code> <code>typing.Mapping[str]</code> Optional context values to provide additional information for the diff and deployment."},{"location":"api/aws.python/#stacksrequired_1","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>stacks: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>An array of stack names for which to generate a diff and perform deployment.</p>"},{"location":"api/aws.python/#contextoptional_1","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>context: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional context values to provide additional information for the diff and deployment.</p>"},{"location":"api/aws.python/#cdkdiffprops","title":"CdkDiffProps","text":"<p>Configuration properties for initializing a Diff instance.</p>"},{"location":"api/aws.python/#initializer_3","title":"Initializer","text":"<pre><code>from gcix import aws\naws.CdkDiffProps(\nstacks: typing.List[str],\ncontext: typing.Mapping[str] = None,\ndiff_options: str = None,\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre>"},{"location":"api/aws.python/#properties_3","title":"Properties","text":"Name Type Description <code>stacks</code> <code>typing.List[str]</code> An array of stack names for which to generate a diff. <code>context</code> <code>typing.Mapping[str]</code> Optional context values to provide additional information for the diff. <code>diff_options</code> <code>str</code> Optional diff options to customize the diff process. <code>job_name</code> <code>str</code> An optional name for the Diff job. <code>job_stage</code> <code>str</code> An optional stage for the Diff job."},{"location":"api/aws.python/#stacksrequired_2","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>stacks: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>An array of stack names for which to generate a diff.</p>"},{"location":"api/aws.python/#contextoptional_2","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>context: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional context values to provide additional information for the diff.</p>"},{"location":"api/aws.python/#diff_optionsoptional","title":"<code>diff_options</code><sup>Optional</sup>","text":"<pre><code>diff_options: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Optional diff options to customize the diff process.</p>"},{"location":"api/aws.python/#job_nameoptional_2","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional name for the Diff job.</p>"},{"location":"api/aws.python/#job_stageoptional_2","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional stage for the Diff job.</p>"},{"location":"api/aws.python/#cdkmirrortocodecommitprops","title":"CdkMirrorToCodecommitProps","text":""},{"location":"api/aws.python/#initializer_4","title":"Initializer","text":"<pre><code>from gcix import aws\naws.CdkMirrorToCodecommitProps(\naws_region: str = None,\ninfrastructure_tags: str = None,\nmirror_opts: GitMirrorProps = None,\nrepository_name: str = None\n)\n</code></pre>"},{"location":"api/aws.python/#properties_4","title":"Properties","text":"Name Type Description <code>aws_region</code> <code>str</code> The AWS region you want to operate in. <code>infrastructure_tags</code> <code>str</code> Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource. <code>mirror_opts</code> <code>gcix.git.GitMirrorProps</code> Options for the upstream Mirror job. <code>repository_name</code> <code>str</code> The name of the target Codecommit repository."},{"location":"api/aws.python/#aws_regionoptional","title":"<code>aws_region</code><sup>Optional</sup>","text":"<pre><code>aws_region: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The AWS region you want to operate in.</p> <p>When not set, it would be curl'ed from the current EC2 instance metadata.</p>"},{"location":"api/aws.python/#infrastructure_tagsoptional","title":"<code>infrastructure_tags</code><sup>Optional</sup>","text":"<pre><code>infrastructure_tags: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource.</p> <p>Changed values won't change the tags on an already existing ECR. This string must have the pattern: <code>Tag1=Value1,Tag2=Value2</code></p>"},{"location":"api/aws.python/#mirror_optsoptional","title":"<code>mirror_opts</code><sup>Optional</sup>","text":"<pre><code>mirror_opts: GitMirrorProps\n</code></pre> <ul> <li>Type: gcix.git.GitMirrorProps</li> </ul> <p>Options for the upstream Mirror job.</p>"},{"location":"api/aws.python/#repository_nameoptional","title":"<code>repository_name</code><sup>Optional</sup>","text":"<pre><code>repository_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: CI_PROJECT_PATH_SLUG.</li> </ul> <p>The name of the target Codecommit repository.</p>"},{"location":"api/aws.python/#classes","title":"Classes","text":""},{"location":"api/aws.python/#awsaccount","title":"AWSAccount","text":""},{"location":"api/aws.python/#initializers","title":"Initializers","text":"<pre><code>from gcix import aws\naws.AWSAccount()\n</code></pre> Name Type Description"},{"location":"api/aws.python/#static-functions","title":"Static Functions","text":"Name Description <code>aws_account_id</code> Retrieves the AWS Account ID associated with the current AWS credentials or environment. <code>aws_region</code> Retrieves the AWS region associated with the current AWS credentials or environment."},{"location":"api/aws.python/#aws_account_id","title":"<code>aws_account_id</code>","text":"<pre><code>from gcix import aws\naws.AWSAccount.aws_account_id()\n</code></pre> <p>Retrieves the AWS Account ID associated with the current AWS credentials or environment.</p> <p>If available, it uses the environment variable <code>AWS_ACCOUNT_ID</code>. Otherwise, it fetches the AWS Account ID from the caller identity response obtained via STS.</p>"},{"location":"api/aws.python/#aws_region","title":"<code>aws_region</code>","text":"<pre><code>from gcix import aws\naws.AWSAccount.aws_region()\n</code></pre> <p>Retrieves the AWS region associated with the current AWS credentials or environment.</p> <p>If available, it uses the environment variable <code>AWS_DEFAULT_REGION</code>. Otherwise, it fetches the AWS region from the caller identity response obtained via STS.</p>"},{"location":"api/aws.python/#cdkbootstrap","title":"CdkBootstrap","text":"<ul> <li>Implements: ICdkBootstrap</li> </ul> <p>Creates an instance of Bootstrap.</p>"},{"location":"api/aws.python/#initializers_1","title":"Initializers","text":"<pre><code>from gcix import aws\naws.CdkBootstrap(\naws_account_id: str,\naws_region: str,\nqualifier: str,\ntoolkit_stack_name: str,\njob_name: str = None,\njob_stage: str = None,\nresource_tags: typing.Mapping[str] = None\n)\n</code></pre> Name Type Description <code>aws_account_id</code> <code>str</code> The AWS account ID associated with the Bootstrap configuration. <code>aws_region</code> <code>str</code> The AWS region in which the Bootstrap will be performed. <code>qualifier</code> <code>str</code> The qualifier applied to the Bootstrap. <code>toolkit_stack_name</code> <code>str</code> The name of the toolkit stack used for Bootstrap. <code>job_name</code> <code>str</code> An optional name for the Bootstrap job. <code>job_stage</code> <code>str</code> An optional stage for the Bootstrap job. <code>resource_tags</code> <code>typing.Mapping[str]</code> Optional resource tags that can be applied during Bootstrap."},{"location":"api/aws.python/#aws_account_idrequired_1","title":"<code>aws_account_id</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The AWS account ID associated with the Bootstrap configuration.</p>"},{"location":"api/aws.python/#aws_regionrequired_1","title":"<code>aws_region</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The AWS region in which the Bootstrap will be performed.</p>"},{"location":"api/aws.python/#qualifierrequired_1","title":"<code>qualifier</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The qualifier applied to the Bootstrap.</p>"},{"location":"api/aws.python/#toolkit_stack_namerequired_1","title":"<code>toolkit_stack_name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the toolkit stack used for Bootstrap.</p>"},{"location":"api/aws.python/#job_nameoptional_3","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>An optional name for the Bootstrap job.</p>"},{"location":"api/aws.python/#job_stageoptional_3","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>An optional stage for the Bootstrap job.</p>"},{"location":"api/aws.python/#resource_tagsoptional_1","title":"<code>resource_tags</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional resource tags that can be applied during Bootstrap.</p>"},{"location":"api/aws.python/#methods","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/aws.python/#add_dependencies","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#dependenciesrequired","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#add_needs","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#needsrequired","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#add_parent","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/aws.python/#parentrequired","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/aws.python/#add_tags","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#tagsrequired","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#add_variables","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#variablesrequired","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#append_rules","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#rulesrequired","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#append_scripts","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#scriptsrequired","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#assign_allow_failure","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#allow_failurerequired","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/aws.python/#assign_artifacts","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#artifactsrequired","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#assign_cache","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#cacherequired","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/aws.python/#assign_dependencies","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#dependenciesrequired_1","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#assign_image","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/aws.python/#imagerequired","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/aws.python/#assign_needs","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#needsrequired_1","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#assign_tags","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#tagsrequired_1","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#copy","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/aws.python/#extend_name","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/aws.python/#namerequired","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#extend_stage","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/aws.python/#stagerequired","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#extend_stage_value","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/aws.python/#stagerequired_1","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#get_all_instance_names","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/aws.python/#childoptional","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/aws.python/#is_equal","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/aws.python/#comparablerequired","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/aws.python/#prepend_rules","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#rulesrequired_1","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#prepend_scripts","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#scriptsrequired_1","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#render","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/aws.python/#properties_5","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>aws_account_id</code> <code>str</code> The AWS account ID associated with the Bootstrap configuration. <code>aws_region</code> <code>str</code> The AWS region in which the Bootstrap will be performed. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>qualifier</code> <code>str</code> The qualifier applied to the Bootstrap. <code>toolkit_stack_name</code> <code>str</code> The name of the toolkit stack used for Bootstrap. <code>resource_tags</code> <code>typing.Mapping[str]</code> Optional resource tags that can be applied during Bootstrap."},{"location":"api/aws.python/#tagsrequired_2","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/aws.python/#allow_failurerequired_1","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/aws.python/#namerequired_1","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#ordered_tagsrequired","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.python/#parentsrequired","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/aws.python/#scriptsrequired_2","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#stagerequired_2","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#artifactsoptional","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#cacheoptional","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/aws.python/#dependenciesoptional","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#imageoptional","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/aws.python/#needsoptional","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#originaloptional","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/aws.python/#rulesoptional","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#variablesoptional","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#aws_account_idrequired_2","title":"<code>aws_account_id</code><sup>Required</sup>","text":"<pre><code>aws_account_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The AWS account ID associated with the Bootstrap configuration.</p>"},{"location":"api/aws.python/#aws_regionrequired_2","title":"<code>aws_region</code><sup>Required</sup>","text":"<pre><code>aws_region: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The AWS region in which the Bootstrap will be performed.</p>"},{"location":"api/aws.python/#job_namerequired","title":"<code>job_name</code><sup>Required</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/aws.python/#job_stagerequired","title":"<code>job_stage</code><sup>Required</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/aws.python/#qualifierrequired_2","title":"<code>qualifier</code><sup>Required</sup>","text":"<pre><code>qualifier: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The qualifier applied to the Bootstrap.</p>"},{"location":"api/aws.python/#toolkit_stack_namerequired_2","title":"<code>toolkit_stack_name</code><sup>Required</sup>","text":"<pre><code>toolkit_stack_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the toolkit stack used for Bootstrap.</p>"},{"location":"api/aws.python/#resource_tagsoptional_2","title":"<code>resource_tags</code><sup>Optional</sup>","text":"<pre><code>resource_tags: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional resource tags that can be applied during Bootstrap.</p>"},{"location":"api/aws.python/#cdkdeploy","title":"CdkDeploy","text":"<ul> <li>Implements: ICdkDeploy</li> </ul> <p>A class that manages the configuration and rendering of a Deploy job.</p> <p>Inherits from the base Job class and implements the IDeploy interface.</p>"},{"location":"api/aws.python/#initializers_2","title":"Initializers","text":"<pre><code>from gcix import aws\naws.CdkDeploy(\nstacks: typing.List[str],\ncontext: typing.Mapping[str] = None,\ndeploy_options: str = None,\njob_name: str = None,\njob_stage: str = None,\nstrict: bool = None,\ntoolkit_stack_name: str = None,\nwait_for_stack: bool = None,\nwait_for_stack_account_id: str = None,\nwait_for_stack_assume_role: str = None\n)\n</code></pre> Name Type Description <code>stacks</code> <code>typing.List[str]</code> An array of stack names to be deployed. <code>context</code> <code>typing.Mapping[str]</code> Optional context values to provide additional information for deployment. <code>deploy_options</code> <code>str</code> Optional deployment options. <code>job_name</code> <code>str</code> An optional name for the Deploy job. <code>job_stage</code> <code>str</code> An optional stage for the Deploy job. <code>strict</code> <code>bool</code> Enable strict deployment mode. <code>toolkit_stack_name</code> <code>str</code> Optional toolkit stack name used for deployment. <code>wait_for_stack</code> <code>bool</code> Wait for stacks to complete deployment. <code>wait_for_stack_account_id</code> <code>str</code> AWS account ID for stack waiting. <code>wait_for_stack_assume_role</code> <code>str</code> AWS assume role for stack waiting."},{"location":"api/aws.python/#stacksrequired_3","title":"<code>stacks</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul> <p>An array of stack names to be deployed.</p>"},{"location":"api/aws.python/#contextoptional_3","title":"<code>context</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional context values to provide additional information for deployment.</p>"},{"location":"api/aws.python/#deploy_optionsoptional_1","title":"<code>deploy_options</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Optional deployment options.</p>"},{"location":"api/aws.python/#job_nameoptional_4","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>An optional name for the Deploy job.</p>"},{"location":"api/aws.python/#job_stageoptional_4","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>An optional stage for the Deploy job.</p>"},{"location":"api/aws.python/#strictoptional_1","title":"<code>strict</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> </ul> <p>Enable strict deployment mode.</p>"},{"location":"api/aws.python/#toolkit_stack_nameoptional_1","title":"<code>toolkit_stack_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Optional toolkit stack name used for deployment.</p>"},{"location":"api/aws.python/#wait_for_stackoptional_1","title":"<code>wait_for_stack</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> </ul> <p>Wait for stacks to complete deployment.</p>"},{"location":"api/aws.python/#wait_for_stack_account_idoptional_1","title":"<code>wait_for_stack_account_id</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>AWS account ID for stack waiting.</p>"},{"location":"api/aws.python/#wait_for_stack_assume_roleoptional_1","title":"<code>wait_for_stack_assume_role</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>AWS assume role for stack waiting.</p>"},{"location":"api/aws.python/#methods_1","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Renders the Deploy job's configuration and scripts."},{"location":"api/aws.python/#add_dependencies_1","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#dependenciesrequired_2","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#add_needs_1","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#needsrequired_2","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#add_parent_1","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/aws.python/#parentrequired_1","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/aws.python/#add_tags_1","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#tagsrequired_3","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#add_variables_1","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#variablesrequired_1","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#append_rules_1","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#rulesrequired_2","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#append_scripts_1","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#scriptsrequired_3","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#assign_allow_failure_1","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#allow_failurerequired_2","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/aws.python/#assign_artifacts_1","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#artifactsrequired_1","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#assign_cache_1","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#cacherequired_1","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/aws.python/#assign_dependencies_1","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#dependenciesrequired_3","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#assign_image_1","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/aws.python/#imagerequired_1","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/aws.python/#assign_needs_1","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#needsrequired_3","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#assign_tags_1","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#tagsrequired_4","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#copy_1","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/aws.python/#extend_name_1","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/aws.python/#namerequired_2","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#extend_stage_1","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/aws.python/#stagerequired_3","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#extend_stage_value_1","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/aws.python/#stagerequired_4","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#get_all_instance_names_1","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/aws.python/#childoptional_1","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/aws.python/#is_equal_1","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/aws.python/#comparablerequired_1","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/aws.python/#prepend_rules_1","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#rulesrequired_3","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#prepend_scripts_1","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#scriptsrequired_4","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#render_1","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Renders the Deploy job's configuration and scripts.</p>"},{"location":"api/aws.python/#properties_6","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>stacks</code> <code>typing.List[str]</code> An array of stack names to be deployed. <code>strict</code> <code>bool</code> Flag indicating if strict deployment mode is enabled. <code>wait_for_stack</code> <code>bool</code> Flag indicating if the deployment should wait for stack completion. <code>context</code> <code>typing.Mapping[str]</code> Optional context values to provide additional information for deployment. <code>deploy_options</code> <code>str</code> Optional deployment options. <code>job_name</code> <code>str</code> An optional name for the Deploy job. <code>job_stage</code> <code>str</code> An optional stage for the Deploy job. <code>toolkit_stack_name</code> <code>str</code> Optional toolkit stack name used for deployment. <code>wait_for_stack_account_id</code> <code>str</code> AWS account ID for stack waiting. <code>wait_for_stack_assume_role</code> <code>str</code> AWS assume role for stack waiting."},{"location":"api/aws.python/#tagsrequired_5","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/aws.python/#allow_failurerequired_3","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/aws.python/#namerequired_3","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#ordered_tagsrequired_1","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.python/#parentsrequired_1","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/aws.python/#scriptsrequired_5","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#stagerequired_5","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#artifactsoptional_1","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#cacheoptional_1","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/aws.python/#dependenciesoptional_1","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#imageoptional_1","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/aws.python/#needsoptional_1","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#originaloptional_1","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/aws.python/#rulesoptional_1","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#variablesoptional_1","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#stacksrequired_4","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>stacks: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>An array of stack names to be deployed.</p>"},{"location":"api/aws.python/#strictrequired","title":"<code>strict</code><sup>Required</sup>","text":"<pre><code>strict: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Flag indicating if strict deployment mode is enabled.</p>"},{"location":"api/aws.python/#wait_for_stackrequired","title":"<code>wait_for_stack</code><sup>Required</sup>","text":"<pre><code>wait_for_stack: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Flag indicating if the deployment should wait for stack completion.</p>"},{"location":"api/aws.python/#contextoptional_4","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>context: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional context values to provide additional information for deployment.</p>"},{"location":"api/aws.python/#deploy_optionsoptional_2","title":"<code>deploy_options</code><sup>Optional</sup>","text":"<pre><code>deploy_options: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Optional deployment options.</p>"},{"location":"api/aws.python/#job_nameoptional_5","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional name for the Deploy job.</p>"},{"location":"api/aws.python/#job_stageoptional_5","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional stage for the Deploy job.</p>"},{"location":"api/aws.python/#toolkit_stack_nameoptional_2","title":"<code>toolkit_stack_name</code><sup>Optional</sup>","text":"<pre><code>toolkit_stack_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Optional toolkit stack name used for deployment.</p>"},{"location":"api/aws.python/#wait_for_stack_account_idoptional_2","title":"<code>wait_for_stack_account_id</code><sup>Optional</sup>","text":"<pre><code>wait_for_stack_account_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>AWS account ID for stack waiting.</p>"},{"location":"api/aws.python/#wait_for_stack_assume_roleoptional_2","title":"<code>wait_for_stack_assume_role</code><sup>Optional</sup>","text":"<pre><code>wait_for_stack_assume_role: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>AWS assume role for stack waiting.</p>"},{"location":"api/aws.python/#cdkdiff","title":"CdkDiff","text":"<ul> <li>Implements: ICdkDiff</li> </ul> <p>A class that manages the configuration and rendering of a Diff job.</p> <p>Inherits from the base Job class and implements the IDiff interface.</p>"},{"location":"api/aws.python/#initializers_3","title":"Initializers","text":"<pre><code>from gcix import aws\naws.CdkDiff(\nstacks: typing.List[str],\ncontext: typing.Mapping[str] = None,\ndiff_options: str = None,\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre> Name Type Description <code>stacks</code> <code>typing.List[str]</code> An array of stack names for which to generate a diff. <code>context</code> <code>typing.Mapping[str]</code> Optional context values to provide additional information for the diff. <code>diff_options</code> <code>str</code> Optional diff options to customize the diff process. <code>job_name</code> <code>str</code> An optional name for the Diff job. <code>job_stage</code> <code>str</code> An optional stage for the Diff job."},{"location":"api/aws.python/#stacksrequired_5","title":"<code>stacks</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul> <p>An array of stack names for which to generate a diff.</p>"},{"location":"api/aws.python/#contextoptional_5","title":"<code>context</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional context values to provide additional information for the diff.</p>"},{"location":"api/aws.python/#diff_optionsoptional_1","title":"<code>diff_options</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Optional diff options to customize the diff process.</p>"},{"location":"api/aws.python/#job_nameoptional_6","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>An optional name for the Diff job.</p>"},{"location":"api/aws.python/#job_stageoptional_6","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>An optional stage for the Diff job.</p>"},{"location":"api/aws.python/#methods_2","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/aws.python/#add_dependencies_2","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#dependenciesrequired_4","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#add_needs_2","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#needsrequired_4","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#add_parent_2","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/aws.python/#parentrequired_2","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/aws.python/#add_tags_2","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#tagsrequired_6","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#add_variables_2","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#variablesrequired_2","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#append_rules_2","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#rulesrequired_4","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#append_scripts_2","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#scriptsrequired_6","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#assign_allow_failure_2","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#allow_failurerequired_4","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/aws.python/#assign_artifacts_2","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#artifactsrequired_2","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#assign_cache_2","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#cacherequired_2","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/aws.python/#assign_dependencies_2","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#dependenciesrequired_5","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#assign_image_2","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/aws.python/#imagerequired_2","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/aws.python/#assign_needs_2","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#needsrequired_5","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#assign_tags_2","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#tagsrequired_7","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#copy_2","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/aws.python/#extend_name_2","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/aws.python/#namerequired_4","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#extend_stage_2","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/aws.python/#stagerequired_6","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#extend_stage_value_2","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/aws.python/#stagerequired_7","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#get_all_instance_names_2","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/aws.python/#childoptional_2","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/aws.python/#is_equal_2","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/aws.python/#comparablerequired_2","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/aws.python/#prepend_rules_2","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#rulesrequired_5","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#prepend_scripts_2","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#scriptsrequired_7","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#render_2","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/aws.python/#properties_7","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>stacks</code> <code>typing.List[str]</code> An array of stack names for which to generate a diff. <code>context</code> <code>typing.Mapping[str]</code> Optional context values to provide additional information for the diff. <code>diff_options</code> <code>str</code> Optional diff options to customize the diff process. <code>job_name</code> <code>str</code> An optional name for the Diff job. <code>job_stage</code> <code>str</code> An optional stage for the Diff job."},{"location":"api/aws.python/#tagsrequired_8","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/aws.python/#allow_failurerequired_5","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/aws.python/#namerequired_5","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#ordered_tagsrequired_2","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.python/#parentsrequired_2","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/aws.python/#scriptsrequired_8","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#stagerequired_8","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#artifactsoptional_2","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#cacheoptional_2","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/aws.python/#dependenciesoptional_2","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#imageoptional_2","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/aws.python/#needsoptional_2","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#originaloptional_2","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/aws.python/#rulesoptional_2","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#variablesoptional_2","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#stacksrequired_6","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>stacks: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>An array of stack names for which to generate a diff.</p>"},{"location":"api/aws.python/#contextoptional_6","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>context: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional context values to provide additional information for the diff.</p>"},{"location":"api/aws.python/#diff_optionsoptional_2","title":"<code>diff_options</code><sup>Optional</sup>","text":"<pre><code>diff_options: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Optional diff options to customize the diff process.</p>"},{"location":"api/aws.python/#job_nameoptional_7","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional name for the Diff job.</p>"},{"location":"api/aws.python/#job_stageoptional_7","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional stage for the Diff job.</p>"},{"location":"api/aws.python/#cdkdiffdeploy","title":"CdkDiffDeploy","text":"<ul> <li>Implements: ICdkDiffDeploy</li> </ul> <p>A class that manages the configuration and execution of combined Diff and Deploy operations.</p> <p>Inherits from the base JobCollection class and implements the IDiffDeploy interface.</p>"},{"location":"api/aws.python/#initializers_4","title":"Initializers","text":"<pre><code>from gcix import aws\naws.CdkDiffDeploy(\nstacks: typing.List[str],\ncontext: typing.Mapping[str] = None\n)\n</code></pre> Name Type Description <code>stacks</code> <code>typing.List[str]</code> An array of stack names for which to generate a diff and perform deployment. <code>context</code> <code>typing.Mapping[str]</code> Optional context values to provide additional information for the diff and deployment."},{"location":"api/aws.python/#stacksrequired_7","title":"<code>stacks</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul> <p>An array of stack names for which to generate a diff and perform deployment.</p>"},{"location":"api/aws.python/#contextoptional_7","title":"<code>context</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional context values to provide additional information for the diff and deployment.</p>"},{"location":"api/aws.python/#methods_3","title":"Methods","text":"Name Description <code>add_children</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> No description. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>get_all_instance_names</code> Return all instance names from the given child. <code>initialize_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initialize_artifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initialize_cache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initialize_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initialize_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initialize_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initialize_rules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initialize_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initialize_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>override_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>override_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>override_rules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>override_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>override_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/aws.python/#add_children","title":"<code>add_children</code>","text":"<pre><code>def add_children(\njobs_or_job_collections: typing.List[typing.Union[Job, JobCollection]],\nname: str = None,\nstage: str = None\n) -&gt; JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/aws.python/#jobs_or_job_collectionsrequired","title":"<code>jobs_or_job_collections</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/aws.python/#nameoptional","title":"<code>name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#stageoptional","title":"<code>stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#add_dependencies_3","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/aws.python/#dependenciesrequired_6","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#add_needs_3","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/aws.python/#needsrequired_6","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#add_parent_3","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: JobCollection\n) -&gt; None\n</code></pre>"},{"location":"api/aws.python/#parentrequired_3","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.JobCollection</li> </ul>"},{"location":"api/aws.python/#add_tags_3","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/aws.python/#tagsrequired_9","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#add_variables_3","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/aws.python/#variablesrequired_3","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#append_rules_3","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/aws.python/#rulesrequired_6","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#append_scripts_3","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/aws.python/#scriptsrequired_9","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#assign_artifacts_3","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/aws.python/#artifactsrequired_3","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#assign_cache_3","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/aws.python/#cacherequired_3","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/aws.python/#get_all_instance_names_3","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/aws.python/#childoptional_3","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/aws.python/#initialize_allow_failure","title":"<code>initialize_allow_failure</code>","text":"<pre><code>def initialize_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/aws.python/#allow_failurerequired_6","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/aws.python/#initialize_artifacts","title":"<code>initialize_artifacts</code>","text":"<pre><code>def initialize_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/aws.python/#artifactsrequired_4","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#initialize_cache","title":"<code>initialize_cache</code>","text":"<pre><code>def initialize_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/aws.python/#cacherequired_4","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/aws.python/#initialize_dependencies","title":"<code>initialize_dependencies</code>","text":"<pre><code>def initialize_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/aws.python/#dependenciesrequired_7","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#initialize_image","title":"<code>initialize_image</code>","text":"<pre><code>def initialize_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/aws.python/#imagerequired_3","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/aws.python/#initialize_needs","title":"<code>initialize_needs</code>","text":"<pre><code>def initialize_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/aws.python/#needsrequired_7","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#initialize_rules","title":"<code>initialize_rules</code>","text":"<pre><code>def initialize_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/aws.python/#rulesrequired_7","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#initialize_tags","title":"<code>initialize_tags</code>","text":"<pre><code>def initialize_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/aws.python/#tagsrequired_10","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#initialize_variables","title":"<code>initialize_variables</code>","text":"<pre><code>def initialize_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/aws.python/#variablesrequired_4","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#is_equal_3","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/aws.python/#comparablerequired_3","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/aws.python/#override_allow_failure","title":"<code>override_allow_failure</code>","text":"<pre><code>def override_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/aws.python/#allow_failurerequired_7","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/aws.python/#override_dependencies","title":"<code>override_dependencies</code>","text":"<pre><code>def override_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/aws.python/#dependenciesrequired_8","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#override_image","title":"<code>override_image</code>","text":"<pre><code>def override_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/aws.python/#imagerequired_4","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/aws.python/#override_needs","title":"<code>override_needs</code>","text":"<pre><code>def override_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/aws.python/#needsrequired_8","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#override_rules","title":"<code>override_rules</code>","text":"<pre><code>def override_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/aws.python/#rulesrequired_8","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#override_tags","title":"<code>override_tags</code>","text":"<pre><code>def override_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/aws.python/#tagsrequired_11","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#override_variables","title":"<code>override_variables</code>","text":"<pre><code>def override_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/aws.python/#variablesrequired_5","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#prepend_rules_3","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/aws.python/#rulesrequired_9","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#prepend_scripts_3","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/aws.python/#scriptsrequired_10","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#render_3","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/aws.python/#properties_8","title":"Properties","text":"Name Type Description <code>last_jobs_executed</code> <code>typing.List[gcix.Job]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nested_jobs</code> <code>typing.List[gcix.Job]</code> No description. <code>populated_jobs</code> <code>typing.List[gcix.Job]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>typing.List[gcix.ChildDict]</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>ordered_tags_for_initialization</code> <code>gcix.OrderedStringSet</code> No description. <code>ordered_tags_for_replacement</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>allow_failure_for_initialization</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>allow_failure_for_replacement</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>artifacts_for_initialization</code> <code>gcix.Artifacts</code> No description. <code>artifacts_for_replacement</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>cache_for_initialization</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>dependencies_for_initialization</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>dependencies_for_replacement</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image_for_initialization</code> <code>typing.Union[str, gcix.Image]</code> No description. <code>image_for_replacement</code> <code>typing.Union[str, gcix.Image]</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>needs_for_initialization</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>needs_for_replacement</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>rules_for_initialization</code> <code>typing.List[gcix.Rule]</code> No description. <code>rules_for_replacement</code> <code>typing.List[gcix.Rule]</code> No description. <code>rules_to_append</code> <code>typing.List[gcix.Rule]</code> No description. <code>rules_to_prepend</code> <code>typing.List[gcix.Rule]</code> No description. <code>scripts_to_append</code> <code>typing.List[str]</code> No description. <code>scripts_to_prepend</code> <code>typing.List[str]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_initialization</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_replacement</code> <code>typing.Mapping[str]</code> No description. <code>deploy_job</code> <code>CdkDeploy</code> The instance of the Deploy job associated with this DiffDeploy instance. <code>diff_job</code> <code>CdkDiff</code> The instance of the Diff job associated with this DiffDeploy instance. <code>stacks</code> <code>typing.List[str]</code> An array of stack names for which to generate a diff and perform deployment. <code>context</code> <code>typing.Mapping[str]</code> Optional context values to provide additional information for the diff and deployment."},{"location":"api/aws.python/#last_jobs_executedrequired","title":"<code>last_jobs_executed</code><sup>Required</sup>","text":"<pre><code>last_jobs_executed: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[gcix.Job]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/aws.python/#nested_jobsrequired","title":"<code>nested_jobs</code><sup>Required</sup>","text":"<pre><code>nested_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[gcix.Job]</li> </ul>"},{"location":"api/aws.python/#populated_jobsrequired","title":"<code>populated_jobs</code><sup>Required</sup>","text":"<pre><code>populated_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[gcix.Job]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/aws.python/#childrenrequired","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>children: typing.List[ChildDict]\n</code></pre> <ul> <li>Type: typing.List[gcix.ChildDict]</li> </ul>"},{"location":"api/aws.python/#ordered_tagsrequired_3","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.python/#ordered_tags_for_initializationrequired","title":"<code>ordered_tags_for_initialization</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_initialization: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.python/#ordered_tags_for_replacementrequired","title":"<code>ordered_tags_for_replacement</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_replacement: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.python/#parentsrequired_3","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/aws.python/#allow_failure_for_initializationoptional","title":"<code>allow_failure_for_initialization</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_initialization: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/aws.python/#allow_failure_for_replacementoptional","title":"<code>allow_failure_for_replacement</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_replacement: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/aws.python/#artifactsoptional_3","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#artifacts_for_initializationoptional","title":"<code>artifacts_for_initialization</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_initialization: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#artifacts_for_replacementoptional","title":"<code>artifacts_for_replacement</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_replacement: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#cacheoptional_3","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/aws.python/#cache_for_initializationoptional","title":"<code>cache_for_initialization</code><sup>Optional</sup>","text":"<pre><code>cache_for_initialization: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/aws.python/#dependenciesoptional_3","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#dependencies_for_initializationoptional","title":"<code>dependencies_for_initialization</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#dependencies_for_replacementoptional","title":"<code>dependencies_for_replacement</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#image_for_initializationoptional","title":"<code>image_for_initialization</code><sup>Optional</sup>","text":"<pre><code>image_for_initialization: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/aws.python/#image_for_replacementoptional","title":"<code>image_for_replacement</code><sup>Optional</sup>","text":"<pre><code>image_for_replacement: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/aws.python/#needsoptional_3","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#needs_for_initializationoptional","title":"<code>needs_for_initialization</code><sup>Optional</sup>","text":"<pre><code>needs_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#needs_for_replacementoptional","title":"<code>needs_for_replacement</code><sup>Optional</sup>","text":"<pre><code>needs_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#rules_for_initializationoptional","title":"<code>rules_for_initialization</code><sup>Optional</sup>","text":"<pre><code>rules_for_initialization: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#rules_for_replacementoptional","title":"<code>rules_for_replacement</code><sup>Optional</sup>","text":"<pre><code>rules_for_replacement: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#rules_to_appendoptional","title":"<code>rules_to_append</code><sup>Optional</sup>","text":"<pre><code>rules_to_append: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#rules_to_prependoptional","title":"<code>rules_to_prepend</code><sup>Optional</sup>","text":"<pre><code>rules_to_prepend: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#scripts_to_appendoptional","title":"<code>scripts_to_append</code><sup>Optional</sup>","text":"<pre><code>scripts_to_append: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#scripts_to_prependoptional","title":"<code>scripts_to_prepend</code><sup>Optional</sup>","text":"<pre><code>scripts_to_prepend: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#variablesoptional_3","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#variables_for_initializationoptional","title":"<code>variables_for_initialization</code><sup>Optional</sup>","text":"<pre><code>variables_for_initialization: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#variables_for_replacementoptional","title":"<code>variables_for_replacement</code><sup>Optional</sup>","text":"<pre><code>variables_for_replacement: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#deploy_jobrequired","title":"<code>deploy_job</code><sup>Required</sup>","text":"<pre><code>deploy_job: CdkDeploy\n</code></pre> <ul> <li>Type: CdkDeploy</li> </ul> <p>The instance of the Deploy job associated with this DiffDeploy instance.</p>"},{"location":"api/aws.python/#diff_jobrequired","title":"<code>diff_job</code><sup>Required</sup>","text":"<pre><code>diff_job: CdkDiff\n</code></pre> <ul> <li>Type: CdkDiff</li> </ul> <p>The instance of the Diff job associated with this DiffDeploy instance.</p>"},{"location":"api/aws.python/#stacksrequired_8","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>stacks: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>An array of stack names for which to generate a diff and perform deployment.</p>"},{"location":"api/aws.python/#contextoptional_8","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>context: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional context values to provide additional information for the diff and deployment.</p>"},{"location":"api/aws.python/#cdkmirrortocodecommit","title":"CdkMirrorToCodecommit","text":"<ul> <li>Implements: ICdkMirrorToCodecommit</li> </ul> <p>This job clones the CI_COMMIT_REF_NAME of the current repository and forcefully pushes this REF to a AWS CodeCommit repository.</p> <p>This job requires following IAM permissions:</p> <ul> <li>codecommit:CreateRepository</li> <li>codecommit:GetRepository</li> <li>codecommit:CreateBranch</li> <li>codecommit:GitPush</li> <li>codecommit:TagResource</li> </ul> <p>You could also limit the resource to <code>!Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:&lt;repository-name&gt;</code>.</p>"},{"location":"api/aws.python/#initializers_5","title":"Initializers","text":"<pre><code>from gcix import aws\naws.CdkMirrorToCodecommit(\naws_region: str = None,\ninfrastructure_tags: str = None,\nmirror_opts: GitMirrorProps = None,\nrepository_name: str = None\n)\n</code></pre> Name Type Description <code>aws_region</code> <code>str</code> The AWS region you want to operate in. <code>infrastructure_tags</code> <code>str</code> Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource. <code>mirror_opts</code> <code>gcix.git.GitMirrorProps</code> Options for the upstream Mirror job. <code>repository_name</code> <code>str</code> The name of the target Codecommit repository."},{"location":"api/aws.python/#aws_regionoptional_1","title":"<code>aws_region</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The AWS region you want to operate in.</p> <p>When not set, it would be curl'ed from the current EC2 instance metadata.</p>"},{"location":"api/aws.python/#infrastructure_tagsoptional_1","title":"<code>infrastructure_tags</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource.</p> <p>Changed values won't change the tags on an already existing ECR. This string must have the pattern: <code>Tag1=Value1,Tag2=Value2</code></p>"},{"location":"api/aws.python/#mirror_optsoptional_1","title":"<code>mirror_opts</code><sup>Optional</sup>","text":"<ul> <li>Type: gcix.git.GitMirrorProps</li> </ul> <p>Options for the upstream Mirror job.</p>"},{"location":"api/aws.python/#repository_nameoptional_1","title":"<code>repository_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: CI_PROJECT_PATH_SLUG.</li> </ul> <p>The name of the target Codecommit repository.</p>"},{"location":"api/aws.python/#methods_4","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/aws.python/#add_dependencies_4","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#dependenciesrequired_9","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#add_needs_4","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#needsrequired_9","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#add_parent_4","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/aws.python/#parentrequired_4","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/aws.python/#add_tags_4","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#tagsrequired_12","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#add_variables_4","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#variablesrequired_6","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#append_rules_4","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#rulesrequired_10","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#append_scripts_4","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#scriptsrequired_11","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#assign_allow_failure_3","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#allow_failurerequired_8","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/aws.python/#assign_artifacts_4","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#artifactsrequired_5","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#assign_cache_4","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#cacherequired_5","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/aws.python/#assign_dependencies_3","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#dependenciesrequired_10","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#assign_image_3","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/aws.python/#imagerequired_5","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/aws.python/#assign_needs_3","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#needsrequired_10","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#assign_tags_3","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#tagsrequired_13","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#copy_3","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/aws.python/#extend_name_3","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/aws.python/#namerequired_6","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#extend_stage_3","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/aws.python/#stagerequired_9","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#extend_stage_value_3","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/aws.python/#stagerequired_10","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#get_all_instance_names_4","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/aws.python/#childoptional_4","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/aws.python/#is_equal_4","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/aws.python/#comparablerequired_4","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/aws.python/#prepend_rules_4","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#rulesrequired_11","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#prepend_scripts_4","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/aws.python/#scriptsrequired_12","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#render_4","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/aws.python/#properties_9","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>git_config_user_email</code> <code>str</code> The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL. <code>git_config_user_name</code> <code>str</code> The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME. <code>remote_repository</code> <code>str</code> The git repository the code of the pipelines repository should be mirrored to. <code>script_hook</code> <code>typing.List[str]</code> This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote. <code>private_key_variable</code> <code>str</code> DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project. <code>run_only_for_repository_url</code> <code>str</code> When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again. <code>repository_name</code> <code>str</code> The name of the target Codecommit repository. <code>aws_region</code> <code>str</code> The AWS region you want to operate in. <code>infrastructure_tags</code> <code>str</code> Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource. <code>mirror_opts</code> <code>gcix.git.GitMirrorProps</code> No description."},{"location":"api/aws.python/#tagsrequired_14","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/aws.python/#allow_failurerequired_9","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/aws.python/#namerequired_7","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#ordered_tagsrequired_4","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.python/#parentsrequired_4","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/aws.python/#scriptsrequired_13","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/aws.python/#stagerequired_11","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/aws.python/#artifactsoptional_4","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/aws.python/#cacheoptional_4","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/aws.python/#dependenciesoptional_4","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#imageoptional_3","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/aws.python/#needsoptional_4","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/aws.python/#originaloptional_3","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/aws.python/#rulesoptional_3","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/aws.python/#variablesoptional_4","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/aws.python/#git_config_user_emailrequired","title":"<code>git_config_user_email</code><sup>Required</sup>","text":"<pre><code>git_config_user_email: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL.</p>"},{"location":"api/aws.python/#git_config_user_namerequired","title":"<code>git_config_user_name</code><sup>Required</sup>","text":"<pre><code>git_config_user_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME.</p>"},{"location":"api/aws.python/#remote_repositoryrequired","title":"<code>remote_repository</code><sup>Required</sup>","text":"<pre><code>remote_repository: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The git repository the code of the pipelines repository should be mirrored to.</p>"},{"location":"api/aws.python/#script_hookrequired","title":"<code>script_hook</code><sup>Required</sup>","text":"<pre><code>script_hook: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote.</p> <p>This hook is mostly meant to be for git configuration commands, required to push to the remote repository.</p>"},{"location":"api/aws.python/#private_key_variableoptional","title":"<code>private_key_variable</code><sup>Optional</sup>","text":"<pre><code>private_key_variable: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project.</p>"},{"location":"api/aws.python/#run_only_for_repository_urloptional","title":"<code>run_only_for_repository_url</code><sup>Optional</sup>","text":"<pre><code>run_only_for_repository_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again.</p> <p>With this variable the job only runs, when its value matches the CI_REPOSITORY_URL of the current repository.</p>"},{"location":"api/aws.python/#repository_namerequired","title":"<code>repository_name</code><sup>Required</sup>","text":"<pre><code>repository_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the target Codecommit repository.</p>"},{"location":"api/aws.python/#aws_regionoptional_2","title":"<code>aws_region</code><sup>Optional</sup>","text":"<pre><code>aws_region: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The AWS region you want to operate in.</p> <p>When not set, it would be curl'ed from the current EC2 instance metadata.</p>"},{"location":"api/aws.python/#infrastructure_tagsoptional_2","title":"<code>infrastructure_tags</code><sup>Optional</sup>","text":"<pre><code>infrastructure_tags: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource.</p> <p>Changed values won't change the tags on an already existing ECR. This string must have the pattern: <code>Tag1=Value1,Tag2=Value2</code></p>"},{"location":"api/aws.python/#mirror_optsoptional_2","title":"<code>mirror_opts</code><sup>Optional</sup>","text":"<pre><code>mirror_opts: GitMirrorProps\n</code></pre> <ul> <li>Type: gcix.git.GitMirrorProps</li> </ul>"},{"location":"api/aws.python/#protocols","title":"Protocols","text":""},{"location":"api/aws.python/#icdkbootstrap","title":"ICdkBootstrap","text":"<ul> <li>Implemented By: CdkBootstrap, ICdkBootstrap</li> </ul> <p>Represents the interface that a Bootstrap instance adheres to.</p>"},{"location":"api/aws.python/#properties_10","title":"Properties","text":"Name Type Description <code>aws_account_id</code> <code>str</code> The AWS account ID associated with the Bootstrap configuration. <code>aws_region</code> <code>str</code> The AWS region in which the Bootstrap will be performed. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>qualifier</code> <code>str</code> The qualifier applied to the Bootstrap. <code>toolkit_stack_name</code> <code>str</code> The name of the toolkit stack used for Bootstrap. <code>resource_tags</code> <code>typing.Mapping[str]</code> Optional resource tags that can be applied during Bootstrap."},{"location":"api/aws.python/#aws_account_idrequired_3","title":"<code>aws_account_id</code><sup>Required</sup>","text":"<pre><code>aws_account_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The AWS account ID associated with the Bootstrap configuration.</p>"},{"location":"api/aws.python/#aws_regionrequired_3","title":"<code>aws_region</code><sup>Required</sup>","text":"<pre><code>aws_region: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The AWS region in which the Bootstrap will be performed.</p>"},{"location":"api/aws.python/#job_namerequired_1","title":"<code>job_name</code><sup>Required</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/aws.python/#job_stagerequired_1","title":"<code>job_stage</code><sup>Required</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/aws.python/#qualifierrequired_3","title":"<code>qualifier</code><sup>Required</sup>","text":"<pre><code>qualifier: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The qualifier applied to the Bootstrap.</p>"},{"location":"api/aws.python/#toolkit_stack_namerequired_3","title":"<code>toolkit_stack_name</code><sup>Required</sup>","text":"<pre><code>toolkit_stack_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the toolkit stack used for Bootstrap.</p>"},{"location":"api/aws.python/#resource_tagsoptional_3","title":"<code>resource_tags</code><sup>Optional</sup>","text":"<pre><code>resource_tags: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional resource tags that can be applied during Bootstrap.</p>"},{"location":"api/aws.python/#icdkdeploy","title":"ICdkDeploy","text":"<ul> <li>Implemented By: CdkDeploy, ICdkDeploy</li> </ul> <p>Represents the interface that a Deploy instance adheres to.</p>"},{"location":"api/aws.python/#properties_11","title":"Properties","text":"Name Type Description <code>stacks</code> <code>typing.List[str]</code> An array of stack names to be deployed. <code>strict</code> <code>bool</code> Flag indicating if strict deployment mode is enabled. <code>wait_for_stack</code> <code>bool</code> Flag indicating if the deployment should wait for stack completion. <code>context</code> <code>typing.Mapping[str]</code> Optional context values to provide additional information for deployment. <code>deploy_options</code> <code>str</code> Optional deployment options. <code>job_name</code> <code>str</code> An optional name for the Deploy job. <code>job_stage</code> <code>str</code> An optional stage for the Deploy job. <code>toolkit_stack_name</code> <code>str</code> Optional toolkit stack name used for deployment. <code>wait_for_stack_account_id</code> <code>str</code> AWS account ID for stack waiting. <code>wait_for_stack_assume_role</code> <code>str</code> AWS assume role for stack waiting."},{"location":"api/aws.python/#stacksrequired_9","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>stacks: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>An array of stack names to be deployed.</p>"},{"location":"api/aws.python/#strictrequired_1","title":"<code>strict</code><sup>Required</sup>","text":"<pre><code>strict: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Flag indicating if strict deployment mode is enabled.</p>"},{"location":"api/aws.python/#wait_for_stackrequired_1","title":"<code>wait_for_stack</code><sup>Required</sup>","text":"<pre><code>wait_for_stack: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Flag indicating if the deployment should wait for stack completion.</p>"},{"location":"api/aws.python/#contextoptional_9","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>context: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional context values to provide additional information for deployment.</p>"},{"location":"api/aws.python/#deploy_optionsoptional_3","title":"<code>deploy_options</code><sup>Optional</sup>","text":"<pre><code>deploy_options: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Optional deployment options.</p>"},{"location":"api/aws.python/#job_nameoptional_8","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional name for the Deploy job.</p>"},{"location":"api/aws.python/#job_stageoptional_8","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional stage for the Deploy job.</p>"},{"location":"api/aws.python/#toolkit_stack_nameoptional_3","title":"<code>toolkit_stack_name</code><sup>Optional</sup>","text":"<pre><code>toolkit_stack_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Optional toolkit stack name used for deployment.</p>"},{"location":"api/aws.python/#wait_for_stack_account_idoptional_3","title":"<code>wait_for_stack_account_id</code><sup>Optional</sup>","text":"<pre><code>wait_for_stack_account_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>AWS account ID for stack waiting.</p>"},{"location":"api/aws.python/#wait_for_stack_assume_roleoptional_3","title":"<code>wait_for_stack_assume_role</code><sup>Optional</sup>","text":"<pre><code>wait_for_stack_assume_role: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>AWS assume role for stack waiting.</p>"},{"location":"api/aws.python/#icdkdiff","title":"ICdkDiff","text":"<ul> <li>Implemented By: CdkDiff, ICdkDiff</li> </ul> <p>Represents the interface that a Diff instance adheres to.</p>"},{"location":"api/aws.python/#properties_12","title":"Properties","text":"Name Type Description <code>stacks</code> <code>typing.List[str]</code> An array of stack names for which to generate a diff. <code>context</code> <code>typing.Mapping[str]</code> Optional context values to provide additional information for the diff. <code>diff_options</code> <code>str</code> Optional diff options to customize the diff process. <code>job_name</code> <code>str</code> An optional name for the Diff job. <code>job_stage</code> <code>str</code> An optional stage for the Diff job."},{"location":"api/aws.python/#stacksrequired_10","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>stacks: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>An array of stack names for which to generate a diff.</p>"},{"location":"api/aws.python/#contextoptional_10","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>context: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional context values to provide additional information for the diff.</p>"},{"location":"api/aws.python/#diff_optionsoptional_3","title":"<code>diff_options</code><sup>Optional</sup>","text":"<pre><code>diff_options: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Optional diff options to customize the diff process.</p>"},{"location":"api/aws.python/#job_nameoptional_9","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional name for the Diff job.</p>"},{"location":"api/aws.python/#job_stageoptional_9","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>An optional stage for the Diff job.</p>"},{"location":"api/aws.python/#icdkdiffdeploy","title":"ICdkDiffDeploy","text":"<ul> <li>Implemented By: CdkDiffDeploy, ICdkDiffDeploy</li> </ul> <p>Represents the interface that a DiffDeploy instance adheres to.</p>"},{"location":"api/aws.python/#properties_13","title":"Properties","text":"Name Type Description <code>deploy_job</code> <code>CdkDeploy</code> The instance of the Deploy job associated with this DiffDeploy instance. <code>diff_job</code> <code>CdkDiff</code> The instance of the Diff job associated with this DiffDeploy instance. <code>stacks</code> <code>typing.List[str]</code> An array of stack names for which to generate a diff and perform deployment. <code>context</code> <code>typing.Mapping[str]</code> Optional context values to provide additional information for the diff and deployment."},{"location":"api/aws.python/#deploy_jobrequired_1","title":"<code>deploy_job</code><sup>Required</sup>","text":"<pre><code>deploy_job: CdkDeploy\n</code></pre> <ul> <li>Type: CdkDeploy</li> </ul> <p>The instance of the Deploy job associated with this DiffDeploy instance.</p>"},{"location":"api/aws.python/#diff_jobrequired_1","title":"<code>diff_job</code><sup>Required</sup>","text":"<pre><code>diff_job: CdkDiff\n</code></pre> <ul> <li>Type: CdkDiff</li> </ul> <p>The instance of the Diff job associated with this DiffDeploy instance.</p>"},{"location":"api/aws.python/#stacksrequired_11","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>stacks: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>An array of stack names for which to generate a diff and perform deployment.</p>"},{"location":"api/aws.python/#contextoptional_11","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>context: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Optional context values to provide additional information for the diff and deployment.</p>"},{"location":"api/aws.python/#icdkmirrortocodecommit","title":"ICdkMirrorToCodecommit","text":"<ul> <li> <p>Extends: gcix.git.IGitMirror</p> </li> <li> <p>Implemented By: CdkMirrorToCodecommit, ICdkMirrorToCodecommit</p> </li> </ul>"},{"location":"api/aws.python/#properties_14","title":"Properties","text":"Name Type Description <code>git_config_user_email</code> <code>str</code> The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL. <code>git_config_user_name</code> <code>str</code> The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME. <code>remote_repository</code> <code>str</code> The git repository the code of the pipelines repository should be mirrored to. <code>script_hook</code> <code>typing.List[str]</code> This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote. <code>private_key_variable</code> <code>str</code> DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project. <code>run_only_for_repository_url</code> <code>str</code> When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again. <code>repository_name</code> <code>str</code> The name of the target Codecommit repository. <code>aws_region</code> <code>str</code> The AWS region you want to operate in. <code>infrastructure_tags</code> <code>str</code> Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource."},{"location":"api/aws.python/#git_config_user_emailrequired_1","title":"<code>git_config_user_email</code><sup>Required</sup>","text":"<pre><code>git_config_user_email: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL.</p>"},{"location":"api/aws.python/#git_config_user_namerequired_1","title":"<code>git_config_user_name</code><sup>Required</sup>","text":"<pre><code>git_config_user_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME.</p>"},{"location":"api/aws.python/#remote_repositoryrequired_1","title":"<code>remote_repository</code><sup>Required</sup>","text":"<pre><code>remote_repository: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The git repository the code of the pipelines repository should be mirrored to.</p>"},{"location":"api/aws.python/#script_hookrequired_1","title":"<code>script_hook</code><sup>Required</sup>","text":"<pre><code>script_hook: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote.</p> <p>This hook is mostly meant to be for git configuration commands, required to push to the remote repository.</p>"},{"location":"api/aws.python/#private_key_variableoptional_1","title":"<code>private_key_variable</code><sup>Optional</sup>","text":"<pre><code>private_key_variable: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project.</p>"},{"location":"api/aws.python/#run_only_for_repository_urloptional_1","title":"<code>run_only_for_repository_url</code><sup>Optional</sup>","text":"<pre><code>run_only_for_repository_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again.</p> <p>With this variable the job only runs, when its value matches the CI_REPOSITORY_URL of the current repository.</p>"},{"location":"api/aws.python/#repository_namerequired_1","title":"<code>repository_name</code><sup>Required</sup>","text":"<pre><code>repository_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: CI_PROJECT_PATH_SLUG.</li> </ul> <p>The name of the target Codecommit repository.</p>"},{"location":"api/aws.python/#aws_regionoptional_3","title":"<code>aws_region</code><sup>Optional</sup>","text":"<pre><code>aws_region: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The AWS region you want to operate in.</p> <p>When not set, it would be curl'ed from the current EC2 instance metadata.</p>"},{"location":"api/aws.python/#infrastructure_tagsoptional_3","title":"<code>infrastructure_tags</code><sup>Optional</sup>","text":"<pre><code>infrastructure_tags: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource.</p> <p>Changed values won't change the tags on an already existing ECR. This string must have the pattern: <code>Tag1=Value1,Tag2=Value2</code></p>"},{"location":"api/aws.typescript/","title":"<code>aws</code> Submodule","text":""},{"location":"api/aws.typescript/#structs","title":"Structs","text":""},{"location":"api/aws.typescript/#cdkbootstrapprops","title":"CdkBootstrapProps","text":"<p>Configuration properties for initializing a Bootstrap instance.</p>"},{"location":"api/aws.typescript/#initializer","title":"Initializer","text":"<pre><code>import { aws } from '@gcix/gcix'\nconst cdkBootstrapProps: aws.CdkBootstrapProps = { ... }\n</code></pre>"},{"location":"api/aws.typescript/#properties","title":"Properties","text":"Name Type Description <code>awsAccountId</code> <code>string</code> The AWS account ID associated with the Bootstrap configuration. <code>awsRegion</code> <code>string</code> The AWS region in which the Bootstrap will be performed. <code>qualifier</code> <code>string</code> The qualifier applied to the Bootstrap. <code>toolkitStackName</code> <code>string</code> The name of the toolkit stack used for Bootstrap. <code>jobName</code> <code>string</code> An optional name for the Bootstrap job. <code>jobStage</code> <code>string</code> An optional stage for the Bootstrap job. <code>resourceTags</code> <code>{[ key: string ]: string}</code> Optional resource tags that can be applied during Bootstrap."},{"location":"api/aws.typescript/#awsaccountidrequired","title":"<code>awsAccountId</code><sup>Required</sup>","text":"<pre><code>public readonly awsAccountId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The AWS account ID associated with the Bootstrap configuration.</p>"},{"location":"api/aws.typescript/#awsregionrequired","title":"<code>awsRegion</code><sup>Required</sup>","text":"<pre><code>public readonly awsRegion: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The AWS region in which the Bootstrap will be performed.</p>"},{"location":"api/aws.typescript/#qualifierrequired","title":"<code>qualifier</code><sup>Required</sup>","text":"<pre><code>public readonly qualifier: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The qualifier applied to the Bootstrap.</p>"},{"location":"api/aws.typescript/#toolkitstacknamerequired","title":"<code>toolkitStackName</code><sup>Required</sup>","text":"<pre><code>public readonly toolkitStackName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the toolkit stack used for Bootstrap.</p>"},{"location":"api/aws.typescript/#jobnameoptional","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional name for the Bootstrap job.</p>"},{"location":"api/aws.typescript/#jobstageoptional","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional stage for the Bootstrap job.</p>"},{"location":"api/aws.typescript/#resourcetagsoptional","title":"<code>resourceTags</code><sup>Optional</sup>","text":"<pre><code>public readonly resourceTags: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Optional resource tags that can be applied during Bootstrap.</p>"},{"location":"api/aws.typescript/#cdkdeployprops","title":"CdkDeployProps","text":"<p>Configuration properties for initializing a Deploy instance.</p>"},{"location":"api/aws.typescript/#initializer_1","title":"Initializer","text":"<pre><code>import { aws } from '@gcix/gcix'\nconst cdkDeployProps: aws.CdkDeployProps = { ... }\n</code></pre>"},{"location":"api/aws.typescript/#properties_1","title":"Properties","text":"Name Type Description <code>stacks</code> <code>string[]</code> An array of stack names to be deployed. <code>context</code> <code>{[ key: string ]: string}</code> Optional context values to provide additional information for deployment. <code>deployOptions</code> <code>string</code> Optional deployment options. <code>jobName</code> <code>string</code> An optional name for the Deploy job. <code>jobStage</code> <code>string</code> An optional stage for the Deploy job. <code>strict</code> <code>boolean</code> Enable strict deployment mode. <code>toolkitStackName</code> <code>string</code> Optional toolkit stack name used for deployment. <code>waitForStack</code> <code>boolean</code> Wait for stacks to complete deployment. <code>waitForStackAccountId</code> <code>string</code> AWS account ID for stack waiting. <code>waitForStackAssumeRole</code> <code>string</code> AWS assume role for stack waiting."},{"location":"api/aws.typescript/#stacksrequired","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>public readonly stacks: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>An array of stack names to be deployed.</p>"},{"location":"api/aws.typescript/#contextoptional","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>public readonly context: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Optional context values to provide additional information for deployment.</p>"},{"location":"api/aws.typescript/#deployoptionsoptional","title":"<code>deployOptions</code><sup>Optional</sup>","text":"<pre><code>public readonly deployOptions: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Optional deployment options.</p>"},{"location":"api/aws.typescript/#jobnameoptional_1","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional name for the Deploy job.</p>"},{"location":"api/aws.typescript/#jobstageoptional_1","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional stage for the Deploy job.</p>"},{"location":"api/aws.typescript/#strictoptional","title":"<code>strict</code><sup>Optional</sup>","text":"<pre><code>public readonly strict: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Enable strict deployment mode.</p>"},{"location":"api/aws.typescript/#toolkitstacknameoptional","title":"<code>toolkitStackName</code><sup>Optional</sup>","text":"<pre><code>public readonly toolkitStackName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Optional toolkit stack name used for deployment.</p>"},{"location":"api/aws.typescript/#waitforstackoptional","title":"<code>waitForStack</code><sup>Optional</sup>","text":"<pre><code>public readonly waitForStack: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Wait for stacks to complete deployment.</p>"},{"location":"api/aws.typescript/#waitforstackaccountidoptional","title":"<code>waitForStackAccountId</code><sup>Optional</sup>","text":"<pre><code>public readonly waitForStackAccountId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>AWS account ID for stack waiting.</p>"},{"location":"api/aws.typescript/#waitforstackassumeroleoptional","title":"<code>waitForStackAssumeRole</code><sup>Optional</sup>","text":"<pre><code>public readonly waitForStackAssumeRole: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>AWS assume role for stack waiting.</p>"},{"location":"api/aws.typescript/#cdkdiffdeployprops","title":"CdkDiffDeployProps","text":"<p>Configuration properties for initializing a DiffDeploy instance.</p>"},{"location":"api/aws.typescript/#initializer_2","title":"Initializer","text":"<pre><code>import { aws } from '@gcix/gcix'\nconst cdkDiffDeployProps: aws.CdkDiffDeployProps = { ... }\n</code></pre>"},{"location":"api/aws.typescript/#properties_2","title":"Properties","text":"Name Type Description <code>stacks</code> <code>string[]</code> An array of stack names for which to generate a diff and perform deployment. <code>context</code> <code>{[ key: string ]: string}</code> Optional context values to provide additional information for the diff and deployment."},{"location":"api/aws.typescript/#stacksrequired_1","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>public readonly stacks: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>An array of stack names for which to generate a diff and perform deployment.</p>"},{"location":"api/aws.typescript/#contextoptional_1","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>public readonly context: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Optional context values to provide additional information for the diff and deployment.</p>"},{"location":"api/aws.typescript/#cdkdiffprops","title":"CdkDiffProps","text":"<p>Configuration properties for initializing a Diff instance.</p>"},{"location":"api/aws.typescript/#initializer_3","title":"Initializer","text":"<pre><code>import { aws } from '@gcix/gcix'\nconst cdkDiffProps: aws.CdkDiffProps = { ... }\n</code></pre>"},{"location":"api/aws.typescript/#properties_3","title":"Properties","text":"Name Type Description <code>stacks</code> <code>string[]</code> An array of stack names for which to generate a diff. <code>context</code> <code>{[ key: string ]: string}</code> Optional context values to provide additional information for the diff. <code>diffOptions</code> <code>string</code> Optional diff options to customize the diff process. <code>jobName</code> <code>string</code> An optional name for the Diff job. <code>jobStage</code> <code>string</code> An optional stage for the Diff job."},{"location":"api/aws.typescript/#stacksrequired_2","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>public readonly stacks: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>An array of stack names for which to generate a diff.</p>"},{"location":"api/aws.typescript/#contextoptional_2","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>public readonly context: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Optional context values to provide additional information for the diff.</p>"},{"location":"api/aws.typescript/#diffoptionsoptional","title":"<code>diffOptions</code><sup>Optional</sup>","text":"<pre><code>public readonly diffOptions: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Optional diff options to customize the diff process.</p>"},{"location":"api/aws.typescript/#jobnameoptional_2","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional name for the Diff job.</p>"},{"location":"api/aws.typescript/#jobstageoptional_2","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional stage for the Diff job.</p>"},{"location":"api/aws.typescript/#cdkmirrortocodecommitprops","title":"CdkMirrorToCodecommitProps","text":""},{"location":"api/aws.typescript/#initializer_4","title":"Initializer","text":"<pre><code>import { aws } from '@gcix/gcix'\nconst cdkMirrorToCodecommitProps: aws.CdkMirrorToCodecommitProps = { ... }\n</code></pre>"},{"location":"api/aws.typescript/#properties_4","title":"Properties","text":"Name Type Description <code>awsRegion</code> <code>string</code> The AWS region you want to operate in. <code>infrastructureTags</code> <code>string</code> Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource. <code>mirrorOpts</code> <code>@gcix/gcix.git.GitMirrorProps</code> Options for the upstream Mirror job. <code>repositoryName</code> <code>string</code> The name of the target Codecommit repository."},{"location":"api/aws.typescript/#awsregionoptional","title":"<code>awsRegion</code><sup>Optional</sup>","text":"<pre><code>public readonly awsRegion: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The AWS region you want to operate in.</p> <p>When not set, it would be curl'ed from the current EC2 instance metadata.</p>"},{"location":"api/aws.typescript/#infrastructuretagsoptional","title":"<code>infrastructureTags</code><sup>Optional</sup>","text":"<pre><code>public readonly infrastructureTags: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource.</p> <p>Changed values won't change the tags on an already existing ECR. This string must have the pattern: <code>Tag1=Value1,Tag2=Value2</code></p>"},{"location":"api/aws.typescript/#mirroroptsoptional","title":"<code>mirrorOpts</code><sup>Optional</sup>","text":"<pre><code>public readonly mirrorOpts: GitMirrorProps;\n</code></pre> <ul> <li>Type: @gcix/gcix.git.GitMirrorProps</li> </ul> <p>Options for the upstream Mirror job.</p>"},{"location":"api/aws.typescript/#repositorynameoptional","title":"<code>repositoryName</code><sup>Optional</sup>","text":"<pre><code>public readonly repositoryName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: CI_PROJECT_PATH_SLUG.</li> </ul> <p>The name of the target Codecommit repository.</p>"},{"location":"api/aws.typescript/#classes","title":"Classes","text":""},{"location":"api/aws.typescript/#awsaccount","title":"AWSAccount","text":""},{"location":"api/aws.typescript/#initializers","title":"Initializers","text":"<pre><code>import { aws } from '@gcix/gcix'\nnew aws.AWSAccount()\n</code></pre> Name Type Description"},{"location":"api/aws.typescript/#static-functions","title":"Static Functions","text":"Name Description <code>awsAccountId</code> Retrieves the AWS Account ID associated with the current AWS credentials or environment. <code>awsRegion</code> Retrieves the AWS region associated with the current AWS credentials or environment."},{"location":"api/aws.typescript/#awsaccountid","title":"<code>awsAccountId</code>","text":"<pre><code>import { aws } from '@gcix/gcix'\naws.AWSAccount.awsAccountId()\n</code></pre> <p>Retrieves the AWS Account ID associated with the current AWS credentials or environment.</p> <p>If available, it uses the environment variable <code>AWS_ACCOUNT_ID</code>. Otherwise, it fetches the AWS Account ID from the caller identity response obtained via STS.</p>"},{"location":"api/aws.typescript/#awsregion","title":"<code>awsRegion</code>","text":"<pre><code>import { aws } from '@gcix/gcix'\naws.AWSAccount.awsRegion()\n</code></pre> <p>Retrieves the AWS region associated with the current AWS credentials or environment.</p> <p>If available, it uses the environment variable <code>AWS_DEFAULT_REGION</code>. Otherwise, it fetches the AWS region from the caller identity response obtained via STS.</p>"},{"location":"api/aws.typescript/#cdkbootstrap","title":"CdkBootstrap","text":"<ul> <li>Implements: ICdkBootstrap</li> </ul> <p>Creates an instance of Bootstrap.</p>"},{"location":"api/aws.typescript/#initializers_1","title":"Initializers","text":"<pre><code>import { aws } from '@gcix/gcix'\nnew aws.CdkBootstrap(props: CdkBootstrapProps)\n</code></pre> Name Type Description <code>props</code> <code>CdkBootstrapProps</code> No description."},{"location":"api/aws.typescript/#propsrequired","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: CdkBootstrapProps</li> </ul>"},{"location":"api/aws.typescript/#methods","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/aws.typescript/#adddependencies","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#dependenciesrequired","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#addneeds","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#needsrequired","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#addparent","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/aws.typescript/#parentrequired","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/aws.typescript/#addtags","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#tagsrequired","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#addvariables","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/aws.typescript/#variablesrequired","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#appendrules","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#rulesrequired","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#appendscripts","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#scriptsrequired","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#assignallowfailure","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#allowfailurerequired","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/aws.typescript/#assignartifacts","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/aws.typescript/#artifactsrequired","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#assigncache","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/aws.typescript/#cacherequired","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/aws.typescript/#assigndependencies","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#dependenciesrequired_1","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#assignimage","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/aws.typescript/#imagerequired","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/aws.typescript/#assignneeds","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#needsrequired_1","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#assigntags","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#tagsrequired_1","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#copy","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/aws.typescript/#extendname","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/aws.typescript/#namerequired","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#extendstage","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/aws.typescript/#stagerequired","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#extendstagevalue","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/aws.typescript/#stagerequired_1","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#getallinstancenames","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/aws.typescript/#childoptional","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/aws.typescript/#isequal","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/aws.typescript/#comparablerequired","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/aws.typescript/#prependrules","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#rulesrequired_1","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#prependscripts","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#scriptsrequired_1","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#render","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/aws.typescript/#properties_5","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>awsAccountId</code> <code>string</code> The AWS account ID associated with the Bootstrap configuration. <code>awsRegion</code> <code>string</code> The AWS region in which the Bootstrap will be performed. <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>qualifier</code> <code>string</code> The qualifier applied to the Bootstrap. <code>toolkitStackName</code> <code>string</code> The name of the toolkit stack used for Bootstrap. <code>resourceTags</code> <code>{[ key: string ]: string}</code> Optional resource tags that can be applied during Bootstrap."},{"location":"api/aws.typescript/#tagsrequired_2","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/aws.typescript/#allowfailurerequired_1","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/aws.typescript/#namerequired_1","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#orderedtagsrequired","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.typescript/#parentsrequired","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/aws.typescript/#scriptsrequired_2","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#stagerequired_2","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#artifactsoptional","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#cacheoptional","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/aws.typescript/#dependenciesoptional","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#imageoptional","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/aws.typescript/#needsoptional","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#originaloptional","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/aws.typescript/#rulesoptional","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#variablesoptional","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#awsaccountidrequired_1","title":"<code>awsAccountId</code><sup>Required</sup>","text":"<pre><code>public readonly awsAccountId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The AWS account ID associated with the Bootstrap configuration.</p>"},{"location":"api/aws.typescript/#awsregionrequired_1","title":"<code>awsRegion</code><sup>Required</sup>","text":"<pre><code>public readonly awsRegion: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The AWS region in which the Bootstrap will be performed.</p>"},{"location":"api/aws.typescript/#jobnamerequired","title":"<code>jobName</code><sup>Required</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/aws.typescript/#jobstagerequired","title":"<code>jobStage</code><sup>Required</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/aws.typescript/#qualifierrequired_1","title":"<code>qualifier</code><sup>Required</sup>","text":"<pre><code>public readonly qualifier: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The qualifier applied to the Bootstrap.</p>"},{"location":"api/aws.typescript/#toolkitstacknamerequired_1","title":"<code>toolkitStackName</code><sup>Required</sup>","text":"<pre><code>public readonly toolkitStackName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the toolkit stack used for Bootstrap.</p>"},{"location":"api/aws.typescript/#resourcetagsoptional_1","title":"<code>resourceTags</code><sup>Optional</sup>","text":"<pre><code>public readonly resourceTags: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Optional resource tags that can be applied during Bootstrap.</p>"},{"location":"api/aws.typescript/#cdkdeploy","title":"CdkDeploy","text":"<ul> <li>Implements: ICdkDeploy</li> </ul> <p>A class that manages the configuration and rendering of a Deploy job.</p> <p>Inherits from the base Job class and implements the IDeploy interface.</p>"},{"location":"api/aws.typescript/#initializers_2","title":"Initializers","text":"<pre><code>import { aws } from '@gcix/gcix'\nnew aws.CdkDeploy(props: CdkDeployProps)\n</code></pre> Name Type Description <code>props</code> <code>CdkDeployProps</code> - Configuration properties for the Deploy job."},{"location":"api/aws.typescript/#propsrequired_1","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: CdkDeployProps</li> </ul> <p>Configuration properties for the Deploy job.</p>"},{"location":"api/aws.typescript/#methods_1","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Renders the Deploy job's configuration and scripts."},{"location":"api/aws.typescript/#adddependencies_1","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#dependenciesrequired_2","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#addneeds_1","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#needsrequired_2","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#addparent_1","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/aws.typescript/#parentrequired_1","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/aws.typescript/#addtags_1","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#tagsrequired_3","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#addvariables_1","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/aws.typescript/#variablesrequired_1","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#appendrules_1","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#rulesrequired_2","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#appendscripts_1","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#scriptsrequired_3","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#assignallowfailure_1","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#allowfailurerequired_2","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/aws.typescript/#assignartifacts_1","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/aws.typescript/#artifactsrequired_1","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#assigncache_1","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/aws.typescript/#cacherequired_1","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/aws.typescript/#assigndependencies_1","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#dependenciesrequired_3","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#assignimage_1","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/aws.typescript/#imagerequired_1","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/aws.typescript/#assignneeds_1","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#needsrequired_3","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#assigntags_1","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#tagsrequired_4","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#copy_1","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/aws.typescript/#extendname_1","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/aws.typescript/#namerequired_2","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#extendstage_1","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/aws.typescript/#stagerequired_3","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#extendstagevalue_1","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/aws.typescript/#stagerequired_4","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#getallinstancenames_1","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/aws.typescript/#childoptional_1","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/aws.typescript/#isequal_1","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/aws.typescript/#comparablerequired_1","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/aws.typescript/#prependrules_1","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#rulesrequired_3","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#prependscripts_1","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#scriptsrequired_4","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#render_1","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Renders the Deploy job's configuration and scripts.</p>"},{"location":"api/aws.typescript/#properties_6","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>stacks</code> <code>string[]</code> An array of stack names to be deployed. <code>strict</code> <code>boolean</code> Flag indicating if strict deployment mode is enabled. <code>waitForStack</code> <code>boolean</code> Flag indicating if the deployment should wait for stack completion. <code>context</code> <code>{[ key: string ]: string}</code> Optional context values to provide additional information for deployment. <code>deployOptions</code> <code>string</code> Optional deployment options. <code>jobName</code> <code>string</code> An optional name for the Deploy job. <code>jobStage</code> <code>string</code> An optional stage for the Deploy job. <code>toolkitStackName</code> <code>string</code> Optional toolkit stack name used for deployment. <code>waitForStackAccountId</code> <code>string</code> AWS account ID for stack waiting. <code>waitForStackAssumeRole</code> <code>string</code> AWS assume role for stack waiting."},{"location":"api/aws.typescript/#tagsrequired_5","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/aws.typescript/#allowfailurerequired_3","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/aws.typescript/#namerequired_3","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#orderedtagsrequired_1","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.typescript/#parentsrequired_1","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/aws.typescript/#scriptsrequired_5","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#stagerequired_5","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#artifactsoptional_1","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#cacheoptional_1","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/aws.typescript/#dependenciesoptional_1","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#imageoptional_1","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/aws.typescript/#needsoptional_1","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#originaloptional_1","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/aws.typescript/#rulesoptional_1","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#variablesoptional_1","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#stacksrequired_3","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>public readonly stacks: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>An array of stack names to be deployed.</p>"},{"location":"api/aws.typescript/#strictrequired","title":"<code>strict</code><sup>Required</sup>","text":"<pre><code>public readonly strict: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Flag indicating if strict deployment mode is enabled.</p>"},{"location":"api/aws.typescript/#waitforstackrequired","title":"<code>waitForStack</code><sup>Required</sup>","text":"<pre><code>public readonly waitForStack: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Flag indicating if the deployment should wait for stack completion.</p>"},{"location":"api/aws.typescript/#contextoptional_3","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>public readonly context: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Optional context values to provide additional information for deployment.</p>"},{"location":"api/aws.typescript/#deployoptionsoptional_1","title":"<code>deployOptions</code><sup>Optional</sup>","text":"<pre><code>public readonly deployOptions: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Optional deployment options.</p>"},{"location":"api/aws.typescript/#jobnameoptional_3","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional name for the Deploy job.</p>"},{"location":"api/aws.typescript/#jobstageoptional_3","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional stage for the Deploy job.</p>"},{"location":"api/aws.typescript/#toolkitstacknameoptional_1","title":"<code>toolkitStackName</code><sup>Optional</sup>","text":"<pre><code>public readonly toolkitStackName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Optional toolkit stack name used for deployment.</p>"},{"location":"api/aws.typescript/#waitforstackaccountidoptional_1","title":"<code>waitForStackAccountId</code><sup>Optional</sup>","text":"<pre><code>public readonly waitForStackAccountId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>AWS account ID for stack waiting.</p>"},{"location":"api/aws.typescript/#waitforstackassumeroleoptional_1","title":"<code>waitForStackAssumeRole</code><sup>Optional</sup>","text":"<pre><code>public readonly waitForStackAssumeRole: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>AWS assume role for stack waiting.</p>"},{"location":"api/aws.typescript/#cdkdiff","title":"CdkDiff","text":"<ul> <li>Implements: ICdkDiff</li> </ul> <p>A class that manages the configuration and rendering of a Diff job.</p> <p>Inherits from the base Job class and implements the IDiff interface.</p>"},{"location":"api/aws.typescript/#initializers_3","title":"Initializers","text":"<pre><code>import { aws } from '@gcix/gcix'\nnew aws.CdkDiff(props: CdkDiffProps)\n</code></pre> Name Type Description <code>props</code> <code>CdkDiffProps</code> - Configuration properties for the Diff job."},{"location":"api/aws.typescript/#propsrequired_2","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: CdkDiffProps</li> </ul> <p>Configuration properties for the Diff job.</p>"},{"location":"api/aws.typescript/#methods_2","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/aws.typescript/#adddependencies_2","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#dependenciesrequired_4","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#addneeds_2","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#needsrequired_4","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#addparent_2","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/aws.typescript/#parentrequired_2","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/aws.typescript/#addtags_2","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#tagsrequired_6","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#addvariables_2","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/aws.typescript/#variablesrequired_2","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#appendrules_2","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#rulesrequired_4","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#appendscripts_2","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#scriptsrequired_6","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#assignallowfailure_2","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#allowfailurerequired_4","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/aws.typescript/#assignartifacts_2","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/aws.typescript/#artifactsrequired_2","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#assigncache_2","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/aws.typescript/#cacherequired_2","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/aws.typescript/#assigndependencies_2","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#dependenciesrequired_5","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#assignimage_2","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/aws.typescript/#imagerequired_2","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/aws.typescript/#assignneeds_2","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#needsrequired_5","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#assigntags_2","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#tagsrequired_7","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#copy_2","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/aws.typescript/#extendname_2","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/aws.typescript/#namerequired_4","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#extendstage_2","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/aws.typescript/#stagerequired_6","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#extendstagevalue_2","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/aws.typescript/#stagerequired_7","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#getallinstancenames_2","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/aws.typescript/#childoptional_2","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/aws.typescript/#isequal_2","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/aws.typescript/#comparablerequired_2","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/aws.typescript/#prependrules_2","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#rulesrequired_5","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#prependscripts_2","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#scriptsrequired_7","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#render_2","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/aws.typescript/#properties_7","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>stacks</code> <code>string[]</code> An array of stack names for which to generate a diff. <code>context</code> <code>{[ key: string ]: string}</code> Optional context values to provide additional information for the diff. <code>diffOptions</code> <code>string</code> Optional diff options to customize the diff process. <code>jobName</code> <code>string</code> An optional name for the Diff job. <code>jobStage</code> <code>string</code> An optional stage for the Diff job."},{"location":"api/aws.typescript/#tagsrequired_8","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/aws.typescript/#allowfailurerequired_5","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/aws.typescript/#namerequired_5","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#orderedtagsrequired_2","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.typescript/#parentsrequired_2","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/aws.typescript/#scriptsrequired_8","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#stagerequired_8","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#artifactsoptional_2","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#cacheoptional_2","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/aws.typescript/#dependenciesoptional_2","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#imageoptional_2","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/aws.typescript/#needsoptional_2","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#originaloptional_2","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/aws.typescript/#rulesoptional_2","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#variablesoptional_2","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#stacksrequired_4","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>public readonly stacks: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>An array of stack names for which to generate a diff.</p>"},{"location":"api/aws.typescript/#contextoptional_4","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>public readonly context: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Optional context values to provide additional information for the diff.</p>"},{"location":"api/aws.typescript/#diffoptionsoptional_1","title":"<code>diffOptions</code><sup>Optional</sup>","text":"<pre><code>public readonly diffOptions: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Optional diff options to customize the diff process.</p>"},{"location":"api/aws.typescript/#jobnameoptional_4","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional name for the Diff job.</p>"},{"location":"api/aws.typescript/#jobstageoptional_4","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional stage for the Diff job.</p>"},{"location":"api/aws.typescript/#cdkdiffdeploy","title":"CdkDiffDeploy","text":"<ul> <li>Implements: ICdkDiffDeploy</li> </ul> <p>A class that manages the configuration and execution of combined Diff and Deploy operations.</p> <p>Inherits from the base JobCollection class and implements the IDiffDeploy interface.</p>"},{"location":"api/aws.typescript/#initializers_4","title":"Initializers","text":"<pre><code>import { aws } from '@gcix/gcix'\nnew aws.CdkDiffDeploy(props: CdkDiffDeployProps)\n</code></pre> Name Type Description <code>props</code> <code>CdkDiffDeployProps</code> - Configuration properties for the DiffDeploy job collection."},{"location":"api/aws.typescript/#propsrequired_3","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: CdkDiffDeployProps</li> </ul> <p>Configuration properties for the DiffDeploy job collection.</p>"},{"location":"api/aws.typescript/#methods_3","title":"Methods","text":"Name Description <code>addChildren</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> No description. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>initializeAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initializeArtifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initializeCache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initializeDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initializeImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initializeNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initializeRules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initializeTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initializeVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>overrideAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>overrideImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>overrideRules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>overrideTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>overrideVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/aws.typescript/#addchildren","title":"<code>addChildren</code>","text":"<pre><code>public addChildren(props: AddChildrenProps): JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/aws.typescript/#propsrequired_4","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.AddChildrenProps</li> </ul>"},{"location":"api/aws.typescript/#adddependencies_3","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/aws.typescript/#dependenciesrequired_6","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#addneeds_3","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/aws.typescript/#needsrequired_6","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#addparent_3","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: JobCollection): void\n</code></pre>"},{"location":"api/aws.typescript/#parentrequired_3","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/aws.typescript/#addtags_3","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): JobCollection\n</code></pre>"},{"location":"api/aws.typescript/#tagsrequired_9","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#addvariables_3","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre>"},{"location":"api/aws.typescript/#variablesrequired_3","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#appendrules_3","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/aws.typescript/#rulesrequired_6","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#appendscripts_3","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/aws.typescript/#scriptsrequired_9","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#assignartifacts_3","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): JobCollection\n</code></pre>"},{"location":"api/aws.typescript/#artifactsrequired_3","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#assigncache_3","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): JobCollection\n</code></pre>"},{"location":"api/aws.typescript/#cacherequired_3","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/aws.typescript/#getallinstancenames_3","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/aws.typescript/#childoptional_3","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/aws.typescript/#initializeallowfailure","title":"<code>initializeAllowFailure</code>","text":"<pre><code>public initializeAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/aws.typescript/#allowfailurerequired_6","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/aws.typescript/#initializeartifacts","title":"<code>initializeArtifacts</code>","text":"<pre><code>public initializeArtifacts(artifacts: Artifacts): JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/aws.typescript/#artifactsrequired_4","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#initializecache","title":"<code>initializeCache</code>","text":"<pre><code>public initializeCache(cache: Cache): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/aws.typescript/#cacherequired_4","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/aws.typescript/#initializedependencies","title":"<code>initializeDependencies</code>","text":"<pre><code>public initializeDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/aws.typescript/#dependenciesrequired_7","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#initializeimage","title":"<code>initializeImage</code>","text":"<pre><code>public initializeImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/aws.typescript/#imagerequired_3","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/aws.typescript/#initializeneeds","title":"<code>initializeNeeds</code>","text":"<pre><code>public initializeNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/aws.typescript/#needsrequired_7","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#initializerules","title":"<code>initializeRules</code>","text":"<pre><code>public initializeRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/aws.typescript/#rulesrequired_7","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#initializetags","title":"<code>initializeTags</code>","text":"<pre><code>public initializeTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/aws.typescript/#tagsrequired_10","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#initializevariables","title":"<code>initializeVariables</code>","text":"<pre><code>public initializeVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/aws.typescript/#variablesrequired_4","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#isequal_3","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/aws.typescript/#comparablerequired_3","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/aws.typescript/#overrideallowfailure","title":"<code>overrideAllowFailure</code>","text":"<pre><code>public overrideAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/aws.typescript/#allowfailurerequired_7","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/aws.typescript/#overridedependencies","title":"<code>overrideDependencies</code>","text":"<pre><code>public overrideDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/aws.typescript/#dependenciesrequired_8","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#overrideimage","title":"<code>overrideImage</code>","text":"<pre><code>public overrideImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/aws.typescript/#imagerequired_4","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/aws.typescript/#overrideneeds","title":"<code>overrideNeeds</code>","text":"<pre><code>public overrideNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/aws.typescript/#needsrequired_8","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#overriderules","title":"<code>overrideRules</code>","text":"<pre><code>public overrideRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/aws.typescript/#rulesrequired_8","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#overridetags","title":"<code>overrideTags</code>","text":"<pre><code>public overrideTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/aws.typescript/#tagsrequired_11","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#overridevariables","title":"<code>overrideVariables</code>","text":"<pre><code>public overrideVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/aws.typescript/#variablesrequired_5","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#prependrules_3","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/aws.typescript/#rulesrequired_9","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#prependscripts_3","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/aws.typescript/#scriptsrequired_10","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#render_3","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/aws.typescript/#properties_8","title":"Properties","text":"Name Type Description <code>lastJobsExecuted</code> <code>@gcix/gcix.Job[]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nestedJobs</code> <code>@gcix/gcix.Job[]</code> No description. <code>populatedJobs</code> <code>@gcix/gcix.Job[]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>@gcix/gcix.ChildDict[]</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>orderedTagsForInitialization</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>orderedTagsForReplacement</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>allowFailureForInitialization</code> <code>string | boolean | number[]</code> No description. <code>allowFailureForReplacement</code> <code>string | boolean | number[]</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>artifactsForInitialization</code> <code>@gcix/gcix.Artifacts</code> No description. <code>artifactsForReplacement</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>cacheForInitialization</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>dependenciesForInitialization</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>dependenciesForReplacement</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>imageForInitialization</code> <code>string | @gcix/gcix.Image</code> No description. <code>imageForReplacement</code> <code>string | @gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>needsForInitialization</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>needsForReplacement</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>rulesForInitialization</code> <code>@gcix/gcix.Rule[]</code> No description. <code>rulesForReplacement</code> <code>@gcix/gcix.Rule[]</code> No description. <code>rulesToAppend</code> <code>@gcix/gcix.Rule[]</code> No description. <code>rulesToPrepend</code> <code>@gcix/gcix.Rule[]</code> No description. <code>scriptsToAppend</code> <code>string[]</code> No description. <code>scriptsToPrepend</code> <code>string[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForInitialization</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForReplacement</code> <code>{[ key: string ]: string}</code> No description. <code>deployJob</code> <code>CdkDeploy</code> The instance of the Deploy job associated with this DiffDeploy instance. <code>diffJob</code> <code>CdkDiff</code> The instance of the Diff job associated with this DiffDeploy instance. <code>stacks</code> <code>string[]</code> An array of stack names for which to generate a diff and perform deployment. <code>context</code> <code>{[ key: string ]: string}</code> Optional context values to provide additional information for the diff and deployment."},{"location":"api/aws.typescript/#lastjobsexecutedrequired","title":"<code>lastJobsExecuted</code><sup>Required</sup>","text":"<pre><code>public readonly lastJobsExecuted: Job[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job[]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/aws.typescript/#nestedjobsrequired","title":"<code>nestedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly nestedJobs: Job[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job[]</li> </ul>"},{"location":"api/aws.typescript/#populatedjobsrequired","title":"<code>populatedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly populatedJobs: Job[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job[]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/aws.typescript/#childrenrequired","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>public readonly children: ChildDict[];\n</code></pre> <ul> <li>Type: @gcix/gcix.ChildDict[]</li> </ul>"},{"location":"api/aws.typescript/#orderedtagsrequired_3","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.typescript/#orderedtagsforinitializationrequired","title":"<code>orderedTagsForInitialization</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForInitialization: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.typescript/#orderedtagsforreplacementrequired","title":"<code>orderedTagsForReplacement</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForReplacement: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.typescript/#parentsrequired_3","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/aws.typescript/#allowfailureforinitializationoptional","title":"<code>allowFailureForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForInitialization: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/aws.typescript/#allowfailureforreplacementoptional","title":"<code>allowFailureForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForReplacement: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/aws.typescript/#artifactsoptional_3","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#artifactsforinitializationoptional","title":"<code>artifactsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForInitialization: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#artifactsforreplacementoptional","title":"<code>artifactsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForReplacement: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#cacheoptional_3","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/aws.typescript/#cacheforinitializationoptional","title":"<code>cacheForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly cacheForInitialization: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/aws.typescript/#dependenciesoptional_3","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#dependenciesforinitializationoptional","title":"<code>dependenciesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#dependenciesforreplacementoptional","title":"<code>dependenciesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#imageforinitializationoptional","title":"<code>imageForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForInitialization: string | Image;\n</code></pre> <ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/aws.typescript/#imageforreplacementoptional","title":"<code>imageForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForReplacement: string | Image;\n</code></pre> <ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/aws.typescript/#needsoptional_3","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#needsforinitializationoptional","title":"<code>needsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#needsforreplacementoptional","title":"<code>needsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#rulesforinitializationoptional","title":"<code>rulesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForInitialization: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#rulesforreplacementoptional","title":"<code>rulesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForReplacement: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#rulestoappendoptional","title":"<code>rulesToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToAppend: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#rulestoprependoptional","title":"<code>rulesToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToPrepend: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#scriptstoappendoptional","title":"<code>scriptsToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToAppend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#scriptstoprependoptional","title":"<code>scriptsToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToPrepend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#variablesoptional_3","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#variablesforinitializationoptional","title":"<code>variablesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForInitialization: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#variablesforreplacementoptional","title":"<code>variablesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForReplacement: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#deployjobrequired","title":"<code>deployJob</code><sup>Required</sup>","text":"<pre><code>public readonly deployJob: CdkDeploy;\n</code></pre> <ul> <li>Type: CdkDeploy</li> </ul> <p>The instance of the Deploy job associated with this DiffDeploy instance.</p>"},{"location":"api/aws.typescript/#diffjobrequired","title":"<code>diffJob</code><sup>Required</sup>","text":"<pre><code>public readonly diffJob: CdkDiff;\n</code></pre> <ul> <li>Type: CdkDiff</li> </ul> <p>The instance of the Diff job associated with this DiffDeploy instance.</p>"},{"location":"api/aws.typescript/#stacksrequired_5","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>public readonly stacks: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>An array of stack names for which to generate a diff and perform deployment.</p>"},{"location":"api/aws.typescript/#contextoptional_5","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>public readonly context: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Optional context values to provide additional information for the diff and deployment.</p>"},{"location":"api/aws.typescript/#cdkmirrortocodecommit","title":"CdkMirrorToCodecommit","text":"<ul> <li>Implements: ICdkMirrorToCodecommit</li> </ul> <p>This job clones the CI_COMMIT_REF_NAME of the current repository and forcefully pushes this REF to a AWS CodeCommit repository.</p> <p>This job requires following IAM permissions:</p> <ul> <li>codecommit:CreateRepository</li> <li>codecommit:GetRepository</li> <li>codecommit:CreateBranch</li> <li>codecommit:GitPush</li> <li>codecommit:TagResource</li> </ul> <p>You could also limit the resource to <code>!Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:&lt;repository-name&gt;</code>.</p>"},{"location":"api/aws.typescript/#initializers_5","title":"Initializers","text":"<pre><code>import { aws } from '@gcix/gcix'\nnew aws.CdkMirrorToCodecommit(props: CdkMirrorToCodecommitProps)\n</code></pre> Name Type Description <code>props</code> <code>CdkMirrorToCodecommitProps</code> No description."},{"location":"api/aws.typescript/#propsrequired_5","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: CdkMirrorToCodecommitProps</li> </ul>"},{"location":"api/aws.typescript/#methods_4","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/aws.typescript/#adddependencies_4","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#dependenciesrequired_9","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#addneeds_4","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#needsrequired_9","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#addparent_4","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/aws.typescript/#parentrequired_4","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/aws.typescript/#addtags_4","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#tagsrequired_12","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#addvariables_4","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/aws.typescript/#variablesrequired_6","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#appendrules_4","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#rulesrequired_10","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#appendscripts_4","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#scriptsrequired_11","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#assignallowfailure_3","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#allowfailurerequired_8","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/aws.typescript/#assignartifacts_4","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/aws.typescript/#artifactsrequired_5","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#assigncache_4","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/aws.typescript/#cacherequired_5","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/aws.typescript/#assigndependencies_3","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#dependenciesrequired_10","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#assignimage_3","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/aws.typescript/#imagerequired_5","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/aws.typescript/#assignneeds_3","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#needsrequired_10","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#assigntags_3","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#tagsrequired_13","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#copy_3","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/aws.typescript/#extendname_3","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/aws.typescript/#namerequired_6","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#extendstage_3","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/aws.typescript/#stagerequired_9","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#extendstagevalue_3","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/aws.typescript/#stagerequired_10","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#getallinstancenames_4","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/aws.typescript/#childoptional_4","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/aws.typescript/#isequal_4","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/aws.typescript/#comparablerequired_4","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/aws.typescript/#prependrules_4","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#rulesrequired_11","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#prependscripts_4","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/aws.typescript/#scriptsrequired_12","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#render_4","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/aws.typescript/#properties_9","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>gitConfigUserEmail</code> <code>string</code> The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL. <code>gitConfigUserName</code> <code>string</code> The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME. <code>remoteRepository</code> <code>string</code> The git repository the code of the pipelines repository should be mirrored to. <code>scriptHook</code> <code>string[]</code> This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote. <code>privateKeyVariable</code> <code>string</code> DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project. <code>runOnlyForRepositoryUrl</code> <code>string</code> When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again. <code>repositoryName</code> <code>string</code> The name of the target Codecommit repository. <code>awsRegion</code> <code>string</code> The AWS region you want to operate in. <code>infrastructureTags</code> <code>string</code> Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource. <code>mirrorOpts</code> <code>@gcix/gcix.git.GitMirrorProps</code> No description."},{"location":"api/aws.typescript/#tagsrequired_14","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/aws.typescript/#allowfailurerequired_9","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/aws.typescript/#namerequired_7","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#orderedtagsrequired_4","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/aws.typescript/#parentsrequired_4","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/aws.typescript/#scriptsrequired_13","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/aws.typescript/#stagerequired_11","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/aws.typescript/#artifactsoptional_4","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/aws.typescript/#cacheoptional_4","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/aws.typescript/#dependenciesoptional_4","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#imageoptional_3","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/aws.typescript/#needsoptional_4","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/aws.typescript/#originaloptional_3","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/aws.typescript/#rulesoptional_3","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/aws.typescript/#variablesoptional_4","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/aws.typescript/#gitconfiguseremailrequired","title":"<code>gitConfigUserEmail</code><sup>Required</sup>","text":"<pre><code>public readonly gitConfigUserEmail: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL.</p>"},{"location":"api/aws.typescript/#gitconfigusernamerequired","title":"<code>gitConfigUserName</code><sup>Required</sup>","text":"<pre><code>public readonly gitConfigUserName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME.</p>"},{"location":"api/aws.typescript/#remoterepositoryrequired","title":"<code>remoteRepository</code><sup>Required</sup>","text":"<pre><code>public readonly remoteRepository: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The git repository the code of the pipelines repository should be mirrored to.</p>"},{"location":"api/aws.typescript/#scripthookrequired","title":"<code>scriptHook</code><sup>Required</sup>","text":"<pre><code>public readonly scriptHook: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote.</p> <p>This hook is mostly meant to be for git configuration commands, required to push to the remote repository.</p>"},{"location":"api/aws.typescript/#privatekeyvariableoptional","title":"<code>privateKeyVariable</code><sup>Optional</sup>","text":"<pre><code>public readonly privateKeyVariable: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project.</p>"},{"location":"api/aws.typescript/#runonlyforrepositoryurloptional","title":"<code>runOnlyForRepositoryUrl</code><sup>Optional</sup>","text":"<pre><code>public readonly runOnlyForRepositoryUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again.</p> <p>With this variable the job only runs, when its value matches the CI_REPOSITORY_URL of the current repository.</p>"},{"location":"api/aws.typescript/#repositorynamerequired","title":"<code>repositoryName</code><sup>Required</sup>","text":"<pre><code>public readonly repositoryName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the target Codecommit repository.</p>"},{"location":"api/aws.typescript/#awsregionoptional_1","title":"<code>awsRegion</code><sup>Optional</sup>","text":"<pre><code>public readonly awsRegion: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The AWS region you want to operate in.</p> <p>When not set, it would be curl'ed from the current EC2 instance metadata.</p>"},{"location":"api/aws.typescript/#infrastructuretagsoptional_1","title":"<code>infrastructureTags</code><sup>Optional</sup>","text":"<pre><code>public readonly infrastructureTags: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource.</p> <p>Changed values won't change the tags on an already existing ECR. This string must have the pattern: <code>Tag1=Value1,Tag2=Value2</code></p>"},{"location":"api/aws.typescript/#mirroroptsoptional_1","title":"<code>mirrorOpts</code><sup>Optional</sup>","text":"<pre><code>public readonly mirrorOpts: GitMirrorProps;\n</code></pre> <ul> <li>Type: @gcix/gcix.git.GitMirrorProps</li> </ul>"},{"location":"api/aws.typescript/#protocols","title":"Protocols","text":""},{"location":"api/aws.typescript/#icdkbootstrap","title":"ICdkBootstrap","text":"<ul> <li>Implemented By: CdkBootstrap, ICdkBootstrap</li> </ul> <p>Represents the interface that a Bootstrap instance adheres to.</p>"},{"location":"api/aws.typescript/#properties_10","title":"Properties","text":"Name Type Description <code>awsAccountId</code> <code>string</code> The AWS account ID associated with the Bootstrap configuration. <code>awsRegion</code> <code>string</code> The AWS region in which the Bootstrap will be performed. <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>qualifier</code> <code>string</code> The qualifier applied to the Bootstrap. <code>toolkitStackName</code> <code>string</code> The name of the toolkit stack used for Bootstrap. <code>resourceTags</code> <code>{[ key: string ]: string}</code> Optional resource tags that can be applied during Bootstrap."},{"location":"api/aws.typescript/#awsaccountidrequired_2","title":"<code>awsAccountId</code><sup>Required</sup>","text":"<pre><code>public readonly awsAccountId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The AWS account ID associated with the Bootstrap configuration.</p>"},{"location":"api/aws.typescript/#awsregionrequired_2","title":"<code>awsRegion</code><sup>Required</sup>","text":"<pre><code>public readonly awsRegion: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The AWS region in which the Bootstrap will be performed.</p>"},{"location":"api/aws.typescript/#jobnamerequired_1","title":"<code>jobName</code><sup>Required</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/aws.typescript/#jobstagerequired_1","title":"<code>jobStage</code><sup>Required</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/aws.typescript/#qualifierrequired_2","title":"<code>qualifier</code><sup>Required</sup>","text":"<pre><code>public readonly qualifier: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The qualifier applied to the Bootstrap.</p>"},{"location":"api/aws.typescript/#toolkitstacknamerequired_2","title":"<code>toolkitStackName</code><sup>Required</sup>","text":"<pre><code>public readonly toolkitStackName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the toolkit stack used for Bootstrap.</p>"},{"location":"api/aws.typescript/#resourcetagsoptional_2","title":"<code>resourceTags</code><sup>Optional</sup>","text":"<pre><code>public readonly resourceTags: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Optional resource tags that can be applied during Bootstrap.</p>"},{"location":"api/aws.typescript/#icdkdeploy","title":"ICdkDeploy","text":"<ul> <li>Implemented By: CdkDeploy, ICdkDeploy</li> </ul> <p>Represents the interface that a Deploy instance adheres to.</p>"},{"location":"api/aws.typescript/#properties_11","title":"Properties","text":"Name Type Description <code>stacks</code> <code>string[]</code> An array of stack names to be deployed. <code>strict</code> <code>boolean</code> Flag indicating if strict deployment mode is enabled. <code>waitForStack</code> <code>boolean</code> Flag indicating if the deployment should wait for stack completion. <code>context</code> <code>{[ key: string ]: string}</code> Optional context values to provide additional information for deployment. <code>deployOptions</code> <code>string</code> Optional deployment options. <code>jobName</code> <code>string</code> An optional name for the Deploy job. <code>jobStage</code> <code>string</code> An optional stage for the Deploy job. <code>toolkitStackName</code> <code>string</code> Optional toolkit stack name used for deployment. <code>waitForStackAccountId</code> <code>string</code> AWS account ID for stack waiting. <code>waitForStackAssumeRole</code> <code>string</code> AWS assume role for stack waiting."},{"location":"api/aws.typescript/#stacksrequired_6","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>public readonly stacks: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>An array of stack names to be deployed.</p>"},{"location":"api/aws.typescript/#strictrequired_1","title":"<code>strict</code><sup>Required</sup>","text":"<pre><code>public readonly strict: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Flag indicating if strict deployment mode is enabled.</p>"},{"location":"api/aws.typescript/#waitforstackrequired_1","title":"<code>waitForStack</code><sup>Required</sup>","text":"<pre><code>public readonly waitForStack: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Flag indicating if the deployment should wait for stack completion.</p>"},{"location":"api/aws.typescript/#contextoptional_6","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>public readonly context: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Optional context values to provide additional information for deployment.</p>"},{"location":"api/aws.typescript/#deployoptionsoptional_2","title":"<code>deployOptions</code><sup>Optional</sup>","text":"<pre><code>public readonly deployOptions: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Optional deployment options.</p>"},{"location":"api/aws.typescript/#jobnameoptional_5","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional name for the Deploy job.</p>"},{"location":"api/aws.typescript/#jobstageoptional_5","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional stage for the Deploy job.</p>"},{"location":"api/aws.typescript/#toolkitstacknameoptional_2","title":"<code>toolkitStackName</code><sup>Optional</sup>","text":"<pre><code>public readonly toolkitStackName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Optional toolkit stack name used for deployment.</p>"},{"location":"api/aws.typescript/#waitforstackaccountidoptional_2","title":"<code>waitForStackAccountId</code><sup>Optional</sup>","text":"<pre><code>public readonly waitForStackAccountId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>AWS account ID for stack waiting.</p>"},{"location":"api/aws.typescript/#waitforstackassumeroleoptional_2","title":"<code>waitForStackAssumeRole</code><sup>Optional</sup>","text":"<pre><code>public readonly waitForStackAssumeRole: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>AWS assume role for stack waiting.</p>"},{"location":"api/aws.typescript/#icdkdiff","title":"ICdkDiff","text":"<ul> <li>Implemented By: CdkDiff, ICdkDiff</li> </ul> <p>Represents the interface that a Diff instance adheres to.</p>"},{"location":"api/aws.typescript/#properties_12","title":"Properties","text":"Name Type Description <code>stacks</code> <code>string[]</code> An array of stack names for which to generate a diff. <code>context</code> <code>{[ key: string ]: string}</code> Optional context values to provide additional information for the diff. <code>diffOptions</code> <code>string</code> Optional diff options to customize the diff process. <code>jobName</code> <code>string</code> An optional name for the Diff job. <code>jobStage</code> <code>string</code> An optional stage for the Diff job."},{"location":"api/aws.typescript/#stacksrequired_7","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>public readonly stacks: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>An array of stack names for which to generate a diff.</p>"},{"location":"api/aws.typescript/#contextoptional_7","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>public readonly context: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Optional context values to provide additional information for the diff.</p>"},{"location":"api/aws.typescript/#diffoptionsoptional_2","title":"<code>diffOptions</code><sup>Optional</sup>","text":"<pre><code>public readonly diffOptions: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Optional diff options to customize the diff process.</p>"},{"location":"api/aws.typescript/#jobnameoptional_6","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional name for the Diff job.</p>"},{"location":"api/aws.typescript/#jobstageoptional_6","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>An optional stage for the Diff job.</p>"},{"location":"api/aws.typescript/#icdkdiffdeploy","title":"ICdkDiffDeploy","text":"<ul> <li>Implemented By: CdkDiffDeploy, ICdkDiffDeploy</li> </ul> <p>Represents the interface that a DiffDeploy instance adheres to.</p>"},{"location":"api/aws.typescript/#properties_13","title":"Properties","text":"Name Type Description <code>deployJob</code> <code>CdkDeploy</code> The instance of the Deploy job associated with this DiffDeploy instance. <code>diffJob</code> <code>CdkDiff</code> The instance of the Diff job associated with this DiffDeploy instance. <code>stacks</code> <code>string[]</code> An array of stack names for which to generate a diff and perform deployment. <code>context</code> <code>{[ key: string ]: string}</code> Optional context values to provide additional information for the diff and deployment."},{"location":"api/aws.typescript/#deployjobrequired_1","title":"<code>deployJob</code><sup>Required</sup>","text":"<pre><code>public readonly deployJob: CdkDeploy;\n</code></pre> <ul> <li>Type: CdkDeploy</li> </ul> <p>The instance of the Deploy job associated with this DiffDeploy instance.</p>"},{"location":"api/aws.typescript/#diffjobrequired_1","title":"<code>diffJob</code><sup>Required</sup>","text":"<pre><code>public readonly diffJob: CdkDiff;\n</code></pre> <ul> <li>Type: CdkDiff</li> </ul> <p>The instance of the Diff job associated with this DiffDeploy instance.</p>"},{"location":"api/aws.typescript/#stacksrequired_8","title":"<code>stacks</code><sup>Required</sup>","text":"<pre><code>public readonly stacks: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>An array of stack names for which to generate a diff and perform deployment.</p>"},{"location":"api/aws.typescript/#contextoptional_8","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>public readonly context: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Optional context values to provide additional information for the diff and deployment.</p>"},{"location":"api/aws.typescript/#icdkmirrortocodecommit","title":"ICdkMirrorToCodecommit","text":"<ul> <li> <p>Extends: @gcix/gcix.git.IGitMirror</p> </li> <li> <p>Implemented By: CdkMirrorToCodecommit, ICdkMirrorToCodecommit</p> </li> </ul>"},{"location":"api/aws.typescript/#properties_14","title":"Properties","text":"Name Type Description <code>gitConfigUserEmail</code> <code>string</code> The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL. <code>gitConfigUserName</code> <code>string</code> The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME. <code>remoteRepository</code> <code>string</code> The git repository the code of the pipelines repository should be mirrored to. <code>scriptHook</code> <code>string[]</code> This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote. <code>privateKeyVariable</code> <code>string</code> DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project. <code>runOnlyForRepositoryUrl</code> <code>string</code> When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again. <code>repositoryName</code> <code>string</code> The name of the target Codecommit repository. <code>awsRegion</code> <code>string</code> The AWS region you want to operate in. <code>infrastructureTags</code> <code>string</code> Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource."},{"location":"api/aws.typescript/#gitconfiguseremailrequired_1","title":"<code>gitConfigUserEmail</code><sup>Required</sup>","text":"<pre><code>public readonly gitConfigUserEmail: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL.</p>"},{"location":"api/aws.typescript/#gitconfigusernamerequired_1","title":"<code>gitConfigUserName</code><sup>Required</sup>","text":"<pre><code>public readonly gitConfigUserName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME.</p>"},{"location":"api/aws.typescript/#remoterepositoryrequired_1","title":"<code>remoteRepository</code><sup>Required</sup>","text":"<pre><code>public readonly remoteRepository: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The git repository the code of the pipelines repository should be mirrored to.</p>"},{"location":"api/aws.typescript/#scripthookrequired_1","title":"<code>scriptHook</code><sup>Required</sup>","text":"<pre><code>public readonly scriptHook: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote.</p> <p>This hook is mostly meant to be for git configuration commands, required to push to the remote repository.</p>"},{"location":"api/aws.typescript/#privatekeyvariableoptional_1","title":"<code>privateKeyVariable</code><sup>Optional</sup>","text":"<pre><code>public readonly privateKeyVariable: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project.</p>"},{"location":"api/aws.typescript/#runonlyforrepositoryurloptional_1","title":"<code>runOnlyForRepositoryUrl</code><sup>Optional</sup>","text":"<pre><code>public readonly runOnlyForRepositoryUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again.</p> <p>With this variable the job only runs, when its value matches the CI_REPOSITORY_URL of the current repository.</p>"},{"location":"api/aws.typescript/#repositorynamerequired_1","title":"<code>repositoryName</code><sup>Required</sup>","text":"<pre><code>public readonly repositoryName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: CI_PROJECT_PATH_SLUG.</li> </ul> <p>The name of the target Codecommit repository.</p>"},{"location":"api/aws.typescript/#awsregionoptional_2","title":"<code>awsRegion</code><sup>Optional</sup>","text":"<pre><code>public readonly awsRegion: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The AWS region you want to operate in.</p> <p>When not set, it would be curl'ed from the current EC2 instance metadata.</p>"},{"location":"api/aws.typescript/#infrastructuretagsoptional_2","title":"<code>infrastructureTags</code><sup>Optional</sup>","text":"<pre><code>public readonly infrastructureTags: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Only if the ECR would be created on the first call, these AWS Tags becomes applied to the AWS Codecommit resource.</p> <p>Changed values won't change the tags on an already existing ECR. This string must have the pattern: <code>Tag1=Value1,Tag2=Value2</code></p>"},{"location":"api/container.python/","title":"<code>container</code> Submodule","text":""},{"location":"api/container.python/#structs","title":"Structs","text":""},{"location":"api/container.python/#awsregistryprops","title":"AWSRegistryProps","text":""},{"location":"api/container.python/#initializer","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.AWSRegistryProps(\naccount_id: str = None,\nregion: str = None\n)\n</code></pre>"},{"location":"api/container.python/#properties","title":"Properties","text":"Name Type Description <code>account_id</code> <code>str</code> AWS account id. <code>region</code> <code>str</code> AWS region where the ECR repository lives in."},{"location":"api/container.python/#account_idoptional","title":"<code>account_id</code><sup>Optional</sup>","text":"<pre><code>account_id: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: AWSAccount.awsAccountId()</li> </ul> <p>AWS account id.</p>"},{"location":"api/container.python/#regionoptional","title":"<code>region</code><sup>Optional</sup>","text":"<pre><code>region: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: AWSAccount.awsRegion()</li> </ul> <p>AWS region where the ECR repository lives in.</p>"},{"location":"api/container.python/#buildcontainercollectionprops","title":"BuildContainerCollectionProps","text":""},{"location":"api/container.python/#initializer_1","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.BuildContainerCollectionProps(\nregistry: typing.Union[str, Registry],\ndocker_client_config: DockerClientConfig = None,\ndo_crane_push: bool = None,\ndo_dive_scan: bool = None,\ndo_trivyignore_check: bool = None,\ndo_trivy_scan: bool = None,\nimage_name: str = None,\nimage_tag: str = None,\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre>"},{"location":"api/container.python/#properties_1","title":"Properties","text":"Name Type Description <code>registry</code> <code>typing.Union[str, Registry]</code> Container registry to push the image to. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>do_crane_push</code> <code>bool</code> Set to <code>false</code> to skip the Crane push job. <code>do_dive_scan</code> <code>bool</code> Set to <code>false</code> to skip the Dive scan job. <code>do_trivyignore_check</code> <code>bool</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>do_trivy_scan</code> <code>bool</code> Set to <code>false</code> to skip the Trivy scan job. <code>image_name</code> <code>str</code> Image name with stage in the registry. <code>image_tag</code> <code>str</code> Image tag. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job."},{"location":"api/container.python/#registryrequired","title":"<code>registry</code><sup>Required</sup>","text":"<pre><code>registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.python/#docker_client_configoptional","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.python/#do_crane_pushoptional","title":"<code>do_crane_push</code><sup>Optional</sup>","text":"<pre><code>do_crane_push: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Crane push job.</p>"},{"location":"api/container.python/#do_dive_scanoptional","title":"<code>do_dive_scan</code><sup>Optional</sup>","text":"<pre><code>do_dive_scan: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.python/#do_trivyignore_checkoptional","title":"<code>do_trivyignore_check</code><sup>Optional</sup>","text":"<pre><code>do_trivyignore_check: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.python/#do_trivy_scanoptional","title":"<code>do_trivy_scan</code><sup>Optional</sup>","text":"<pre><code>do_trivy_scan: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.python/#image_nameoptional","title":"<code>image_name</code><sup>Optional</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/imageName.</p>"},{"location":"api/container.python/#image_tagoptional","title":"<code>image_tag</code><sup>Optional</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciCommitRefName</li> </ul> <p>Image tag.</p> <p>Depending of the build it defaults either to the git tag or to the actual branch name.</p>"},{"location":"api/container.python/#job_nameoptional","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#copycontainercollectionprops","title":"CopyContainerCollectionProps","text":""},{"location":"api/container.python/#initializer_2","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.CopyContainerCollectionProps(\nimage_name: str,\nimage_tag: str,\ndocker_client_config: DockerClientConfig = None,\ndo_dive_scan: bool = None,\ndo_trivyignore_check: bool = None,\ndo_trivy_scan: bool = None,\ndst_registry: typing.Union[str, Registry] = None,\njob_name: str = None,\njob_stage: str = None,\nsrc_registry: typing.Union[str, Registry] = None\n)\n</code></pre>"},{"location":"api/container.python/#properties_2","title":"Properties","text":"Name Type Description <code>image_name</code> <code>str</code> Image name with stage in the registry. <code>image_tag</code> <code>str</code> Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>do_dive_scan</code> <code>bool</code> Set to <code>false</code> to skip the Dive scan job. <code>do_trivyignore_check</code> <code>bool</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>do_trivy_scan</code> <code>bool</code> Set to <code>false</code> to skip the Trivy scan job. <code>dst_registry</code> <code>typing.Union[str, Registry]</code> Container registry to push the image to. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>src_registry</code> <code>typing.Union[str, Registry]</code> Container registry to pull the image from."},{"location":"api/container.python/#image_namerequired","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/image_name.</p>"},{"location":"api/container.python/#image_tagrequired","title":"<code>image_tag</code><sup>Required</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>.</p>"},{"location":"api/container.python/#docker_client_configoptional_1","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.python/#do_dive_scanoptional_1","title":"<code>do_dive_scan</code><sup>Optional</sup>","text":"<pre><code>do_dive_scan: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.python/#do_trivyignore_checkoptional_1","title":"<code>do_trivyignore_check</code><sup>Optional</sup>","text":"<pre><code>do_trivyignore_check: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.python/#do_trivy_scanoptional_1","title":"<code>do_trivy_scan</code><sup>Optional</sup>","text":"<pre><code>do_trivy_scan: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.python/#dst_registryoptional","title":"<code>dst_registry</code><sup>Optional</sup>","text":"<pre><code>dst_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.python/#job_nameoptional_1","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_1","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#src_registryoptional","title":"<code>src_registry</code><sup>Optional</sup>","text":"<pre><code>src_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to pull the image from.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.python/#cranecopyprops","title":"CraneCopyProps","text":""},{"location":"api/container.python/#initializer_3","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.CraneCopyProps(\ndst_registry: typing.Union[str, Registry],\nsrc_registry: typing.Union[str, Registry],\ndocker_client_config: DockerClientConfig = None,\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre>"},{"location":"api/container.python/#properties_3","title":"Properties","text":"Name Type Description <code>dst_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to copy container image to. <code>src_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to copy container image from. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job."},{"location":"api/container.python/#dst_registryrequired","title":"<code>dst_registry</code><sup>Required</sup>","text":"<pre><code>dst_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.python/#src_registryrequired","title":"<code>src_registry</code><sup>Required</sup>","text":"<pre><code>src_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to copy container image from.</p>"},{"location":"api/container.python/#docker_client_configoptional_2","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries.</p>"},{"location":"api/container.python/#job_nameoptional_2","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_2","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#cranepullprops","title":"CranePullProps","text":""},{"location":"api/container.python/#initializer_4","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.CranePullProps(\nsrc_registry: typing.Union[str, Registry],\ndocker_client_config: DockerClientConfig = None,\nimage_name: str = None,\nimage_tag: str = None,\njob_name: str = None,\njob_stage: str = None,\ntar_path: str = None\n)\n</code></pre>"},{"location":"api/container.python/#properties_4","title":"Properties","text":"Name Type Description <code>src_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to pull container image from. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>image_name</code> <code>str</code> Container image with namespace to pull from <code>srcRegistry</code>. <code>image_tag</code> <code>str</code> Tag of the image which will be pulled. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>tar_path</code> <code>str</code> Path where to save the container image tarball."},{"location":"api/container.python/#src_registryrequired_1","title":"<code>src_registry</code><sup>Required</sup>","text":"<pre><code>src_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to pull container image from.</p>"},{"location":"api/container.python/#docker_client_configoptional_3","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.python/#image_nameoptional_1","title":"<code>image_name</code><sup>Optional</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Container image with namespace to pull from <code>srcRegistry</code>.</p>"},{"location":"api/container.python/#image_tagoptional_1","title":"<code>image_tag</code><sup>Optional</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: latest</li> </ul> <p>Tag of the image which will be pulled.</p>"},{"location":"api/container.python/#job_nameoptional_3","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_3","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#tar_pathoptional","title":"<code>tar_path</code><sup>Optional</sup>","text":"<pre><code>tar_path: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Path where to save the container image tarball.</p>"},{"location":"api/container.python/#cranepushprops","title":"CranePushProps","text":""},{"location":"api/container.python/#initializer_5","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.CranePushProps(\ndst_registry: typing.Union[str, Registry],\ndocker_client_config: DockerClientConfig = None,\nimage_name: str = None,\nimage_tag: str = None,\njob_name: str = None,\njob_stage: str = None,\ntar_path: str = None\n)\n</code></pre>"},{"location":"api/container.python/#properties_5","title":"Properties","text":"Name Type Description <code>dst_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to copy container image to. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>image_name</code> <code>str</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>image_tag</code> <code>str</code> The tag the image will be tagged with. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>tar_path</code> <code>str</code> Path where to find the container image tarball."},{"location":"api/container.python/#dst_registryrequired_1","title":"<code>dst_registry</code><sup>Required</sup>","text":"<pre><code>dst_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.python/#docker_client_configoptional_4","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.python/#image_nameoptional_2","title":"<code>image_name</code><sup>Optional</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.python/#image_tagoptional_2","title":"<code>image_tag</code><sup>Optional</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciCommitTag</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.python/#job_nameoptional_4","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_4","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#tar_pathoptional_1","title":"<code>tar_path</code><sup>Optional</sup>","text":"<pre><code>tar_path: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Path where to find the container image tarball.</p>"},{"location":"api/container.python/#divescanprops","title":"DiveScanProps","text":""},{"location":"api/container.python/#initializer_6","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.DiveScanProps(\nhighest_user_wasted_percent: typing.Union[int, float] = None,\nhighest_wasted_bytes: typing.Union[int, float] = None,\nignore_errors: bool = None,\nimage_name: str = None,\nimage_path: str = None,\njob_name: str = None,\njob_stage: str = None,\nlowest_efficiency: typing.Union[int, float] = None,\nsource: str = None\n)\n</code></pre>"},{"location":"api/container.python/#properties_6","title":"Properties","text":"Name Type Description <code>highest_user_wasted_percent</code> <code>typing.Union[int, float]</code> Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail. <code>highest_wasted_bytes</code> <code>typing.Union[int, float]</code> Highest allowable bytes wasted, otherwise CI validation will fail. <code>ignore_errors</code> <code>bool</code> Ignore image parsing errors and run the analysis anyway. <code>image_name</code> <code>str</code> Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>. <code>image_path</code> <code>str</code> Path to the image can be either a remote container registry, as well as a local path to an image. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>lowest_efficiency</code> <code>typing.Union[int, float]</code> Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail. <code>source</code> <code>str</code> The container engine to fetch the image from."},{"location":"api/container.python/#highest_user_wasted_percentoptional","title":"<code>highest_user_wasted_percent</code><sup>Optional</sup>","text":"<pre><code>highest_user_wasted_percent: typing.Union[int, float]\n</code></pre> <ul> <li>Type: typing.Union[int, float]</li> <li>Default: 0.1</li> </ul> <p>Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.python/#highest_wasted_bytesoptional","title":"<code>highest_wasted_bytes</code><sup>Optional</sup>","text":"<pre><code>highest_wasted_bytes: typing.Union[int, float]\n</code></pre> <ul> <li>Type: typing.Union[int, float]</li> </ul> <p>Highest allowable bytes wasted, otherwise CI validation will fail.</p>"},{"location":"api/container.python/#ignore_errorsoptional","title":"<code>ignore_errors</code><sup>Optional</sup>","text":"<pre><code>ignore_errors: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: false</li> </ul> <p>Ignore image parsing errors and run the analysis anyway.</p>"},{"location":"api/container.python/#image_nameoptional_3","title":"<code>image_name</code><sup>Optional</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>.</p>"},{"location":"api/container.python/#image_pathoptional","title":"<code>image_path</code><sup>Optional</sup>","text":"<pre><code>image_path: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectPath</li> </ul> <p>Path to the image can be either a remote container registry, as well as a local path to an image.</p>"},{"location":"api/container.python/#job_nameoptional_5","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_5","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#lowest_efficiencyoptional","title":"<code>lowest_efficiency</code><sup>Optional</sup>","text":"<pre><code>lowest_efficiency: typing.Union[int, float]\n</code></pre> <ul> <li>Type: typing.Union[int, float]</li> <li>Default: 0.9</li> </ul> <p>Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.python/#sourceoptional","title":"<code>source</code><sup>Optional</sup>","text":"<pre><code>source: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"docker-archive</li> </ul> <p>The container engine to fetch the image from.</p> <p>Allowed values: docker, podman, docker-archive</p>"},{"location":"api/container.python/#dockerbuildprops","title":"DockerBuildProps","text":""},{"location":"api/container.python/#initializer_7","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.DockerBuildProps(\nrepository: str,\ncontext: str = None,\njob_name: str = None,\njob_stage: str = None,\ntag: str = None\n)\n</code></pre>"},{"location":"api/container.python/#properties_7","title":"Properties","text":"Name Type Description <code>repository</code> <code>str</code> The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>. <code>context</code> <code>str</code> The Docker build context (the directory containing the Dockerfile). <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>tag</code> <code>str</code> A Docker image tag applied to the image."},{"location":"api/container.python/#repositoryrequired","title":"<code>repository</code><sup>Required</sup>","text":"<pre><code>repository: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>.</p>"},{"location":"api/container.python/#contextoptional","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>context: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: <code>.</code></li> </ul> <p>The Docker build context (the directory containing the Dockerfile).</p>"},{"location":"api/container.python/#job_nameoptional_6","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_6","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#tagoptional","title":"<code>tag</code><sup>Optional</sup>","text":"<pre><code>tag: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>A Docker image tag applied to the image.</p> <p>If not set docker uses <code>latest</code></p>"},{"location":"api/container.python/#dockerclientconfigprops","title":"DockerClientConfigProps","text":""},{"location":"api/container.python/#initializer_8","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.DockerClientConfigProps(\nconfig_file_path: str = None\n)\n</code></pre>"},{"location":"api/container.python/#properties_8","title":"Properties","text":"Name Type Description <code>config_file_path</code> <code>str</code> Docker client config path."},{"location":"api/container.python/#config_file_pathoptional","title":"<code>config_file_path</code><sup>Optional</sup>","text":"<pre><code>config_file_path: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: $HOME/.docker/config.json</li> </ul> <p>Docker client config path.</p>"},{"location":"api/container.python/#dockerpushprops","title":"DockerPushProps","text":""},{"location":"api/container.python/#initializer_9","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.DockerPushProps(\ncontainer_image: str,\njob_name: str = None,\njob_stage: str = None,\nlogin_env_var: str = None,\nregistry: str = None,\ntag: str = None,\nuser_env_var: str = None\n)\n</code></pre>"},{"location":"api/container.python/#properties_9","title":"Properties","text":"Name Type Description <code>container_image</code> <code>str</code> The name of the Docker image to push to the <code>registry</code>. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>login_env_var</code> <code>str</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here. <code>registry</code> <code>str</code> The Docker registry the image should be pushed to. <code>tag</code> <code>str</code> The Docker image tag that should be pushed to the <code>registry</code>. <code>user_env_var</code> <code>str</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here."},{"location":"api/container.python/#container_imagerequired","title":"<code>container_image</code><sup>Required</sup>","text":"<pre><code>container_image: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Docker image to push to the <code>registry</code>.</p>"},{"location":"api/container.python/#job_nameoptional_7","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_7","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#login_env_varoptional","title":"<code>login_env_var</code><sup>Optional</sup>","text":"<pre><code>login_env_var: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.python/#registryoptional","title":"<code>registry</code><sup>Optional</sup>","text":"<pre><code>registry: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: index.docker.io/v1</li> </ul> <p>The Docker registry the image should be pushed to.</p>"},{"location":"api/container.python/#tagoptional_1","title":"<code>tag</code><sup>Optional</sup>","text":"<pre><code>tag: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: <code>latest</code></li> </ul> <p>The Docker image tag that should be pushed to the <code>registry</code>.</p>"},{"location":"api/container.python/#user_env_varoptional","title":"<code>user_env_var</code><sup>Optional</sup>","text":"<pre><code>user_env_var: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.python/#kanikoexecuteprops","title":"KanikoExecuteProps","text":""},{"location":"api/container.python/#initializer_10","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.KanikoExecuteProps(\nbuild_args: typing.Mapping[typing.Any] = None,\nbuild_target: str = None,\ncontext: str = None,\ndocker_client_config: DockerClientConfig = None,\ndockerfile: str = None,\nenable_push: bool = None,\nimage_name: str = None,\nimage_tag: str = None,\njob_name: str = None,\njob_stage: str = None,\nregistries: typing.Union[typing.List[str], typing.List[Registry]] = None,\ntar_path: str = None,\nverbosity: str = None\n)\n</code></pre>"},{"location":"api/container.python/#properties_10","title":"Properties","text":"Name Type Description <code>build_args</code> <code>typing.Mapping[typing.Any]</code> Container build arguments, used to instrument the container image build. <code>build_target</code> <code>str</code> For container multistage builds name of the build stage you want to create. <code>context</code> <code>str</code> Context which will be send to kaniko. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>dockerfile</code> <code>str</code> Name of the dockerfile to use. <code>enable_push</code> <code>bool</code> Enable push to container registry, disabled to allow subsequent jobs to. <code>image_name</code> <code>str</code> Image name which will be created. <code>image_tag</code> <code>str</code> The tag the image will be tagged with. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>registries</code> <code>typing.Union[typing.List[str], typing.List[Registry]]</code> List of container registries to push created image to. <code>tar_path</code> <code>str</code> Container images created by kaniko are tarball files. <code>verbosity</code> <code>str</code> Verbosity of kaniko logging."},{"location":"api/container.python/#build_argsoptional","title":"<code>build_args</code><sup>Optional</sup>","text":"<pre><code>build_args: typing.Mapping[typing.Any]\n</code></pre> <ul> <li>Type: typing.Mapping[typing.Any]</li> </ul> <p>Container build arguments, used to instrument the container image build.</p>"},{"location":"api/container.python/#build_targetoptional","title":"<code>build_target</code><sup>Optional</sup>","text":"<pre><code>build_target: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>For container multistage builds name of the build stage you want to create.</p> <p>Image tag will be appended with the build_target. e.g. latest-buildtarget.</p>"},{"location":"api/container.python/#contextoptional_1","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>context: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Context which will be send to kaniko.</p> <p>Defaults to <code>None</code> which implies the local directory is the context.</p>"},{"location":"api/container.python/#docker_client_configoptional_5","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.python/#dockerfileoptional","title":"<code>dockerfile</code><sup>Optional</sup>","text":"<pre><code>dockerfile: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"Dockerfile\"</li> </ul> <p>Name of the dockerfile to use.</p> <p>File is relative to context.</p>"},{"location":"api/container.python/#enable_pushoptional","title":"<code>enable_push</code><sup>Optional</sup>","text":"<pre><code>enable_push: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: false act on container tarball.</li> </ul> <p>Enable push to container registry, disabled to allow subsequent jobs to.</p>"},{"location":"api/container.python/#image_nameoptional_4","title":"<code>image_name</code><sup>Optional</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_PROJECT_NAME.</li> </ul> <p>Image name which will be created.</p>"},{"location":"api/container.python/#image_tagoptional_3","title":"<code>image_tag</code><sup>Optional</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_COMMIT_TAG</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.python/#job_nameoptional_8","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_8","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#registriesoptional","title":"<code>registries</code><sup>Optional</sup>","text":"<pre><code>registries: typing.Union[typing.List[str], typing.List[Registry]]\n</code></pre> <ul> <li>Type: typing.Union[typing.List[str], typing.List[Registry]]</li> </ul> <p>List of container registries to push created image to.</p>"},{"location":"api/container.python/#tar_pathoptional_2","title":"<code>tar_path</code><sup>Optional</sup>","text":"<pre><code>tar_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Container images created by kaniko are tarball files.</p> <p>This is the path where to store the image, will be named with suffix <code>.tar</code>. This path will be created if not present.</p>"},{"location":"api/container.python/#verbosityoptional","title":"<code>verbosity</code><sup>Optional</sup>","text":"<pre><code>verbosity: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"info\"</li> </ul> <p>Verbosity of kaniko logging.</p>"},{"location":"api/container.python/#trivyignorefilecheckprops","title":"TrivyIgnoreFileCheckProps","text":""},{"location":"api/container.python/#initializer_11","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.TrivyIgnoreFileCheckProps(\njob_name: str = None,\njob_stage: str = None,\ntrivyignore_path: str = None\n)\n</code></pre>"},{"location":"api/container.python/#properties_11","title":"Properties","text":"Name Type Description <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>trivyignore_path</code> <code>str</code> Path to the <code>.trivyignore</code> file."},{"location":"api/container.python/#job_nameoptional_9","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_9","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#trivyignore_pathoptional","title":"<code>trivyignore_path</code><sup>Optional</sup>","text":"<pre><code>trivyignore_path: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectDir/.trivyignore</li> </ul> <p>Path to the <code>.trivyignore</code> file.</p>"},{"location":"api/container.python/#trivyscanlocalimageprops","title":"TrivyScanLocalImageProps","text":""},{"location":"api/container.python/#initializer_12","title":"Initializer","text":"<pre><code>from gcix import container\ncontainer.TrivyScanLocalImageProps(\ndebug: bool = None,\nexit_if_vulnerable: bool = None,\nimage_name: str = None,\nimage_path: str = None,\njob_name: str = None,\njob_stage: str = None,\noutput_format: str = None,\nseverity: str = None,\ntrivy_config: str = None,\nvulnerability_types: str = None\n)\n</code></pre>"},{"location":"api/container.python/#properties_12","title":"Properties","text":"Name Type Description <code>debug</code> <code>bool</code> If trivy should run in debug mode. <code>exit_if_vulnerable</code> <code>bool</code> Exit code when vulnerabilities were found. <code>image_name</code> <code>str</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>image_path</code> <code>str</code> Path where to find the container image. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>output_format</code> <code>str</code> Scan output format, possible values (table, json). <code>severity</code> <code>str</code> Severities of vulnerabilities to be displayed (comma separated). <code>trivy_config</code> <code>str</code> Additional options to pass to <code>trivy</code> binary. <code>vulnerability_types</code> <code>str</code> List of vulnerability types (comma separated)."},{"location":"api/container.python/#debugoptional","title":"<code>debug</code><sup>Optional</sup>","text":"<pre><code>debug: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: false</li> </ul> <p>If trivy should run in debug mode.</p>"},{"location":"api/container.python/#exit_if_vulnerableoptional","title":"<code>exit_if_vulnerable</code><sup>Optional</sup>","text":"<pre><code>exit_if_vulnerable: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Exit code when vulnerabilities were found.</p> <p>If true exit code is 1 else 0.</p>"},{"location":"api/container.python/#image_nameoptional_5","title":"<code>image_name</code><sup>Optional</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_PROJECT_NAME</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.python/#image_pathoptional_1","title":"<code>image_path</code><sup>Optional</sup>","text":"<pre><code>image_path: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_PROJECT_DIR</li> </ul> <p>Path where to find the container image.</p>"},{"location":"api/container.python/#job_nameoptional_10","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_10","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#output_formatoptional","title":"<code>output_format</code><sup>Optional</sup>","text":"<pre><code>output_format: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"table\"</li> </ul> <p>Scan output format, possible values (table, json).</p>"},{"location":"api/container.python/#severityoptional","title":"<code>severity</code><sup>Optional</sup>","text":"<pre><code>severity: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\"</li> </ul> <p>Severities of vulnerabilities to be displayed (comma separated).</p>"},{"location":"api/container.python/#trivy_configoptional","title":"<code>trivy_config</code><sup>Optional</sup>","text":"<pre><code>trivy_config: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Additional options to pass to <code>trivy</code> binary.</p>"},{"location":"api/container.python/#vulnerability_typesoptional","title":"<code>vulnerability_types</code><sup>Optional</sup>","text":"<pre><code>vulnerability_types: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"os,library\"</li> </ul> <p>List of vulnerability types (comma separated).</p>"},{"location":"api/container.python/#classes","title":"Classes","text":""},{"location":"api/container.python/#buildcontainercollection","title":"BuildContainerCollection","text":"<ul> <li>Implements: IBuildContainerCollection</li> </ul> <p>Creates a <code>gcip.Sequence</code> to build, scan and push a container image.</p> <p>The build step is executed by <code>KanikoExecute</code>,  it will build the container image an outputs it to a tarball. There are two scan's, optimization scan with <code>DiveScan</code> to scan storage wasting in container image and a vulnerability scan with <code>TrivyScanLocalImage</code>. Both outputs are uploaded as an artifact to the GitLab instance. The container image is uploaded with <code>CranePush</code>.</p>"},{"location":"api/container.python/#initializers","title":"Initializers","text":"<pre><code>from gcix import container\ncontainer.BuildContainerCollection(\nregistry: typing.Union[str, Registry],\ndocker_client_config: DockerClientConfig = None,\ndo_crane_push: bool = None,\ndo_dive_scan: bool = None,\ndo_trivyignore_check: bool = None,\ndo_trivy_scan: bool = None,\nimage_name: str = None,\nimage_tag: str = None,\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre> Name Type Description <code>registry</code> <code>typing.Union[str, Registry]</code> Container registry to push the image to. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>do_crane_push</code> <code>bool</code> Set to <code>false</code> to skip the Crane push job. <code>do_dive_scan</code> <code>bool</code> Set to <code>false</code> to skip the Dive scan job. <code>do_trivyignore_check</code> <code>bool</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>do_trivy_scan</code> <code>bool</code> Set to <code>false</code> to skip the Trivy scan job. <code>image_name</code> <code>str</code> Image name with stage in the registry. <code>image_tag</code> <code>str</code> Image tag. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job."},{"location":"api/container.python/#registryrequired_1","title":"<code>registry</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Registry]</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.python/#docker_client_configoptional_6","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.python/#do_crane_pushoptional_1","title":"<code>do_crane_push</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Crane push job.</p>"},{"location":"api/container.python/#do_dive_scanoptional_2","title":"<code>do_dive_scan</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.python/#do_trivyignore_checkoptional_2","title":"<code>do_trivyignore_check</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.python/#do_trivy_scanoptional_2","title":"<code>do_trivy_scan</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.python/#image_nameoptional_6","title":"<code>image_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/imageName.</p>"},{"location":"api/container.python/#image_tagoptional_4","title":"<code>image_tag</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciCommitRefName</li> </ul> <p>Image tag.</p> <p>Depending of the build it defaults either to the git tag or to the actual branch name.</p>"},{"location":"api/container.python/#job_nameoptional_11","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_11","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#methods","title":"Methods","text":"Name Description <code>add_children</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> No description. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>get_all_instance_names</code> Return all instance names from the given child. <code>initialize_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initialize_artifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initialize_cache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initialize_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initialize_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initialize_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initialize_rules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initialize_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initialize_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>override_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>override_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>override_rules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>override_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>override_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.python/#add_children","title":"<code>add_children</code>","text":"<pre><code>def add_children(\njobs_or_job_collections: typing.List[typing.Union[Job, JobCollection]],\nname: str = None,\nstage: str = None\n) -&gt; JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/container.python/#jobs_or_job_collectionsrequired","title":"<code>jobs_or_job_collections</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#nameoptional","title":"<code>name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#stageoptional","title":"<code>stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#add_dependencies","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_needs","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#needsrequired","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_parent","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: JobCollection\n) -&gt; None\n</code></pre>"},{"location":"api/container.python/#parentrequired","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.JobCollection</li> </ul>"},{"location":"api/container.python/#add_tags","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#tagsrequired","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#add_variables","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#variablesrequired","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#append_rules","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#rulesrequired","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#append_scripts","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#scriptsrequired","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#assign_artifacts","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#artifactsrequired","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#assign_cache","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#cacherequired","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#get_all_instance_names","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/container.python/#childoptional","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#initialize_allow_failure","title":"<code>initialize_allow_failure</code>","text":"<pre><code>def initialize_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/container.python/#allow_failurerequired","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#initialize_artifacts","title":"<code>initialize_artifacts</code>","text":"<pre><code>def initialize_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/container.python/#artifactsrequired_1","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#initialize_cache","title":"<code>initialize_cache</code>","text":"<pre><code>def initialize_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/container.python/#cacherequired_1","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#initialize_dependencies","title":"<code>initialize_dependencies</code>","text":"<pre><code>def initialize_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/container.python/#dependenciesrequired_1","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#initialize_image","title":"<code>initialize_image</code>","text":"<pre><code>def initialize_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/container.python/#imagerequired","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#initialize_needs","title":"<code>initialize_needs</code>","text":"<pre><code>def initialize_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/container.python/#needsrequired_1","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#initialize_rules","title":"<code>initialize_rules</code>","text":"<pre><code>def initialize_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/container.python/#rulesrequired_1","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#initialize_tags","title":"<code>initialize_tags</code>","text":"<pre><code>def initialize_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/container.python/#tagsrequired_1","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#initialize_variables","title":"<code>initialize_variables</code>","text":"<pre><code>def initialize_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/container.python/#variablesrequired_1","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#is_equal","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.python/#comparablerequired","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/container.python/#override_allow_failure","title":"<code>override_allow_failure</code>","text":"<pre><code>def override_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/container.python/#allow_failurerequired_1","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#override_dependencies","title":"<code>override_dependencies</code>","text":"<pre><code>def override_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/container.python/#dependenciesrequired_2","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#override_image","title":"<code>override_image</code>","text":"<pre><code>def override_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/container.python/#imagerequired_1","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#override_needs","title":"<code>override_needs</code>","text":"<pre><code>def override_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/container.python/#needsrequired_2","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#override_rules","title":"<code>override_rules</code>","text":"<pre><code>def override_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/container.python/#rulesrequired_2","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#override_tags","title":"<code>override_tags</code>","text":"<pre><code>def override_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/container.python/#tagsrequired_2","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#override_variables","title":"<code>override_variables</code>","text":"<pre><code>def override_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/container.python/#variablesrequired_2","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#prepend_rules","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#rulesrequired_3","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#prepend_scripts","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_1","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#render","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.python/#properties_13","title":"Properties","text":"Name Type Description <code>last_jobs_executed</code> <code>typing.List[gcix.Job]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nested_jobs</code> <code>typing.List[gcix.Job]</code> No description. <code>populated_jobs</code> <code>typing.List[gcix.Job]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>typing.List[gcix.ChildDict]</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>ordered_tags_for_initialization</code> <code>gcix.OrderedStringSet</code> No description. <code>ordered_tags_for_replacement</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>allow_failure_for_initialization</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>allow_failure_for_replacement</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>artifacts_for_initialization</code> <code>gcix.Artifacts</code> No description. <code>artifacts_for_replacement</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>cache_for_initialization</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>dependencies_for_initialization</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>dependencies_for_replacement</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image_for_initialization</code> <code>typing.Union[str, gcix.Image]</code> No description. <code>image_for_replacement</code> <code>typing.Union[str, gcix.Image]</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>needs_for_initialization</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>needs_for_replacement</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>rules_for_initialization</code> <code>typing.List[gcix.Rule]</code> No description. <code>rules_for_replacement</code> <code>typing.List[gcix.Rule]</code> No description. <code>rules_to_append</code> <code>typing.List[gcix.Rule]</code> No description. <code>rules_to_prepend</code> <code>typing.List[gcix.Rule]</code> No description. <code>scripts_to_append</code> <code>typing.List[str]</code> No description. <code>scripts_to_prepend</code> <code>typing.List[str]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_initialization</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_replacement</code> <code>typing.Mapping[str]</code> No description. <code>crane_push_job</code> <code>CranePush</code> Crane push job. <code>dive_scan_job</code> <code>DiveScan</code> Dive scan job. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>do_crane_push</code> <code>bool</code> Set to <code>false</code> to skip the Crane push job. <code>do_dive_scan</code> <code>bool</code> Set to <code>false</code> to skip the Dive scan job. <code>do_trivyignore_check</code> <code>bool</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>do_trivy_scan</code> <code>bool</code> Set to <code>false</code> to skip the Trivy scan job. <code>image_name</code> <code>str</code> Image name with stage in the registry. <code>image_tag</code> <code>str</code> Image tag. <code>kaniko_execute_job</code> <code>KanikoExecute</code> Kaniko execute job. <code>registry</code> <code>typing.Union[str, Registry]</code> Container registry to push the image to. <code>trivy_ignore_file_check_job</code> <code>TrivyIgnoreFileCheck</code> Trivy ignore file check job. <code>trivy_scan_local_image_job</code> <code>TrivyScanLocalImage</code> Trivy scan local image job."},{"location":"api/container.python/#last_jobs_executedrequired","title":"<code>last_jobs_executed</code><sup>Required</sup>","text":"<pre><code>last_jobs_executed: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[gcix.Job]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/container.python/#nested_jobsrequired","title":"<code>nested_jobs</code><sup>Required</sup>","text":"<pre><code>nested_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[gcix.Job]</li> </ul>"},{"location":"api/container.python/#populated_jobsrequired","title":"<code>populated_jobs</code><sup>Required</sup>","text":"<pre><code>populated_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[gcix.Job]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/container.python/#childrenrequired","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>children: typing.List[ChildDict]\n</code></pre> <ul> <li>Type: typing.List[gcix.ChildDict]</li> </ul>"},{"location":"api/container.python/#ordered_tagsrequired","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#ordered_tags_for_initializationrequired","title":"<code>ordered_tags_for_initialization</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_initialization: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#ordered_tags_for_replacementrequired","title":"<code>ordered_tags_for_replacement</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_replacement: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#parentsrequired","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#allow_failure_for_initializationoptional","title":"<code>allow_failure_for_initialization</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_initialization: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#allow_failure_for_replacementoptional","title":"<code>allow_failure_for_replacement</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_replacement: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#artifactsoptional","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#artifacts_for_initializationoptional","title":"<code>artifacts_for_initialization</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_initialization: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#artifacts_for_replacementoptional","title":"<code>artifacts_for_replacement</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_replacement: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#cacheoptional","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#cache_for_initializationoptional","title":"<code>cache_for_initialization</code><sup>Optional</sup>","text":"<pre><code>cache_for_initialization: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#dependenciesoptional","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#dependencies_for_initializationoptional","title":"<code>dependencies_for_initialization</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#dependencies_for_replacementoptional","title":"<code>dependencies_for_replacement</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#image_for_initializationoptional","title":"<code>image_for_initialization</code><sup>Optional</sup>","text":"<pre><code>image_for_initialization: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#image_for_replacementoptional","title":"<code>image_for_replacement</code><sup>Optional</sup>","text":"<pre><code>image_for_replacement: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#needsoptional","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#needs_for_initializationoptional","title":"<code>needs_for_initialization</code><sup>Optional</sup>","text":"<pre><code>needs_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#needs_for_replacementoptional","title":"<code>needs_for_replacement</code><sup>Optional</sup>","text":"<pre><code>needs_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#rules_for_initializationoptional","title":"<code>rules_for_initialization</code><sup>Optional</sup>","text":"<pre><code>rules_for_initialization: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#rules_for_replacementoptional","title":"<code>rules_for_replacement</code><sup>Optional</sup>","text":"<pre><code>rules_for_replacement: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#rules_to_appendoptional","title":"<code>rules_to_append</code><sup>Optional</sup>","text":"<pre><code>rules_to_append: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#rules_to_prependoptional","title":"<code>rules_to_prepend</code><sup>Optional</sup>","text":"<pre><code>rules_to_prepend: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#scripts_to_appendoptional","title":"<code>scripts_to_append</code><sup>Optional</sup>","text":"<pre><code>scripts_to_append: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#scripts_to_prependoptional","title":"<code>scripts_to_prepend</code><sup>Optional</sup>","text":"<pre><code>scripts_to_prepend: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#variablesoptional","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#variables_for_initializationoptional","title":"<code>variables_for_initialization</code><sup>Optional</sup>","text":"<pre><code>variables_for_initialization: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#variables_for_replacementoptional","title":"<code>variables_for_replacement</code><sup>Optional</sup>","text":"<pre><code>variables_for_replacement: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#crane_push_jobrequired","title":"<code>crane_push_job</code><sup>Required</sup>","text":"<pre><code>crane_push_job: CranePush\n</code></pre> <ul> <li>Type: CranePush</li> </ul> <p>Crane push job.</p>"},{"location":"api/container.python/#dive_scan_jobrequired","title":"<code>dive_scan_job</code><sup>Required</sup>","text":"<pre><code>dive_scan_job: DiveScan\n</code></pre> <ul> <li>Type: DiveScan</li> </ul> <p>Dive scan job.</p>"},{"location":"api/container.python/#docker_client_configrequired","title":"<code>docker_client_config</code><sup>Required</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.python/#do_crane_pushrequired","title":"<code>do_crane_push</code><sup>Required</sup>","text":"<pre><code>do_crane_push: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Set to <code>false</code> to skip the Crane push job.</p>"},{"location":"api/container.python/#do_dive_scanrequired","title":"<code>do_dive_scan</code><sup>Required</sup>","text":"<pre><code>do_dive_scan: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.python/#do_trivyignore_checkrequired","title":"<code>do_trivyignore_check</code><sup>Required</sup>","text":"<pre><code>do_trivyignore_check: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.python/#do_trivy_scanrequired","title":"<code>do_trivy_scan</code><sup>Required</sup>","text":"<pre><code>do_trivy_scan: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.python/#image_namerequired_1","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/imageName.</p>"},{"location":"api/container.python/#image_tagrequired_1","title":"<code>image_tag</code><sup>Required</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Image tag.</p> <p>Depending of the build it defaults either to the git tag or to the actual branch name.</p>"},{"location":"api/container.python/#kaniko_execute_jobrequired","title":"<code>kaniko_execute_job</code><sup>Required</sup>","text":"<pre><code>kaniko_execute_job: KanikoExecute\n</code></pre> <ul> <li>Type: KanikoExecute</li> </ul> <p>Kaniko execute job.</p>"},{"location":"api/container.python/#registryrequired_2","title":"<code>registry</code><sup>Required</sup>","text":"<pre><code>registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.python/#trivy_ignore_file_check_jobrequired","title":"<code>trivy_ignore_file_check_job</code><sup>Required</sup>","text":"<pre><code>trivy_ignore_file_check_job: TrivyIgnoreFileCheck\n</code></pre> <ul> <li>Type: TrivyIgnoreFileCheck</li> </ul> <p>Trivy ignore file check job.</p>"},{"location":"api/container.python/#trivy_scan_local_image_jobrequired","title":"<code>trivy_scan_local_image_job</code><sup>Required</sup>","text":"<pre><code>trivy_scan_local_image_job: TrivyScanLocalImage\n</code></pre> <ul> <li>Type: TrivyScanLocalImage</li> </ul> <p>Trivy scan local image job.</p>"},{"location":"api/container.python/#copycontainercollection","title":"CopyContainerCollection","text":"<ul> <li>Implements: ICopyContainerCollection</li> </ul> <p>Creates a <code>gcip.Sequence</code> to pull, scan and push a container image.</p> <p>The pull step is executed by <code>CranePull</code>, it will pull the container image and outputs it to a tarball. There are two scan's, optimization scan with <code>DiveScan</code> to scan storage wasting in container image and a vulnerability scan with <code>TrivyScanLocalImage</code>.  Both outputs are uploaded as an artifact to the GitLab instance. Built container image is uploaded with <code>CranePush</code>.</p> <p>NOTE: We decided to use caches instead of artifacts to pass the Docker image tar archive from one job to another. This is because those tar archives could become very large - especially larger then the maximum artifact size limit. This limit can just be adjusted by the admin of the gitlab instance, so your pipeline would never work, your Gitlab provider would not adjust this limit for you. For caches on the other hand you can define storage backends at the base of your Gitlab runners.</p> <p>Furthermore we set the cache key to the pipeline ID. This is because the name and tag of the image does not ensure that the downloaded tar is unique, as the image behind the image tag could be overridden.  So we ensure uniqueness by downloading the image once per pipeline.</p>"},{"location":"api/container.python/#initializers_1","title":"Initializers","text":"<pre><code>from gcix import container\ncontainer.CopyContainerCollection(\nimage_name: str,\nimage_tag: str,\ndocker_client_config: DockerClientConfig = None,\ndo_dive_scan: bool = None,\ndo_trivyignore_check: bool = None,\ndo_trivy_scan: bool = None,\ndst_registry: typing.Union[str, Registry] = None,\njob_name: str = None,\njob_stage: str = None,\nsrc_registry: typing.Union[str, Registry] = None\n)\n</code></pre> Name Type Description <code>image_name</code> <code>str</code> Image name with stage in the registry. <code>image_tag</code> <code>str</code> Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>do_dive_scan</code> <code>bool</code> Set to <code>false</code> to skip the Dive scan job. <code>do_trivyignore_check</code> <code>bool</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>do_trivy_scan</code> <code>bool</code> Set to <code>false</code> to skip the Trivy scan job. <code>dst_registry</code> <code>typing.Union[str, Registry]</code> Container registry to push the image to. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>src_registry</code> <code>typing.Union[str, Registry]</code> Container registry to pull the image from."},{"location":"api/container.python/#image_namerequired_2","title":"<code>image_name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/image_name.</p>"},{"location":"api/container.python/#image_tagrequired_2","title":"<code>image_tag</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>.</p>"},{"location":"api/container.python/#docker_client_configoptional_7","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.python/#do_dive_scanoptional_3","title":"<code>do_dive_scan</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.python/#do_trivyignore_checkoptional_3","title":"<code>do_trivyignore_check</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.python/#do_trivy_scanoptional_3","title":"<code>do_trivy_scan</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.python/#dst_registryoptional_1","title":"<code>dst_registry</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[str, Registry]</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.python/#job_nameoptional_12","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_12","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#src_registryoptional_1","title":"<code>src_registry</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[str, Registry]</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to pull the image from.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.python/#methods_1","title":"Methods","text":"Name Description <code>add_children</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> No description. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>get_all_instance_names</code> Return all instance names from the given child. <code>initialize_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initialize_artifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initialize_cache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initialize_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initialize_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initialize_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initialize_rules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initialize_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initialize_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>override_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>override_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>override_rules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>override_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>override_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.python/#add_children_1","title":"<code>add_children</code>","text":"<pre><code>def add_children(\njobs_or_job_collections: typing.List[typing.Union[Job, JobCollection]],\nname: str = None,\nstage: str = None\n) -&gt; JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/container.python/#jobs_or_job_collectionsrequired_1","title":"<code>jobs_or_job_collections</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#nameoptional_1","title":"<code>name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#stageoptional_1","title":"<code>stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#add_dependencies_1","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_3","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_needs_1","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#needsrequired_3","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_parent_1","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: JobCollection\n) -&gt; None\n</code></pre>"},{"location":"api/container.python/#parentrequired_1","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.JobCollection</li> </ul>"},{"location":"api/container.python/#add_tags_1","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#tagsrequired_3","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#add_variables_1","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#variablesrequired_3","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#append_rules_1","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#rulesrequired_4","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#append_scripts_1","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_2","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#assign_artifacts_1","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#artifactsrequired_2","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#assign_cache_1","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#cacherequired_2","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#get_all_instance_names_1","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/container.python/#childoptional_1","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#initialize_allow_failure_1","title":"<code>initialize_allow_failure</code>","text":"<pre><code>def initialize_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/container.python/#allow_failurerequired_2","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#initialize_artifacts_1","title":"<code>initialize_artifacts</code>","text":"<pre><code>def initialize_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/container.python/#artifactsrequired_3","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#initialize_cache_1","title":"<code>initialize_cache</code>","text":"<pre><code>def initialize_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/container.python/#cacherequired_3","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#initialize_dependencies_1","title":"<code>initialize_dependencies</code>","text":"<pre><code>def initialize_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/container.python/#dependenciesrequired_4","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#initialize_image_1","title":"<code>initialize_image</code>","text":"<pre><code>def initialize_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/container.python/#imagerequired_2","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#initialize_needs_1","title":"<code>initialize_needs</code>","text":"<pre><code>def initialize_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/container.python/#needsrequired_4","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#initialize_rules_1","title":"<code>initialize_rules</code>","text":"<pre><code>def initialize_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/container.python/#rulesrequired_5","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#initialize_tags_1","title":"<code>initialize_tags</code>","text":"<pre><code>def initialize_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/container.python/#tagsrequired_4","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#initialize_variables_1","title":"<code>initialize_variables</code>","text":"<pre><code>def initialize_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/container.python/#variablesrequired_4","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#is_equal_1","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.python/#comparablerequired_1","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/container.python/#override_allow_failure_1","title":"<code>override_allow_failure</code>","text":"<pre><code>def override_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/container.python/#allow_failurerequired_3","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#override_dependencies_1","title":"<code>override_dependencies</code>","text":"<pre><code>def override_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/container.python/#dependenciesrequired_5","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#override_image_1","title":"<code>override_image</code>","text":"<pre><code>def override_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/container.python/#imagerequired_3","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#override_needs_1","title":"<code>override_needs</code>","text":"<pre><code>def override_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/container.python/#needsrequired_5","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#override_rules_1","title":"<code>override_rules</code>","text":"<pre><code>def override_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/container.python/#rulesrequired_6","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#override_tags_1","title":"<code>override_tags</code>","text":"<pre><code>def override_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/container.python/#tagsrequired_5","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#override_variables_1","title":"<code>override_variables</code>","text":"<pre><code>def override_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/container.python/#variablesrequired_5","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#prepend_rules_1","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#rulesrequired_7","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#prepend_scripts_1","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_3","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#render_1","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.python/#properties_14","title":"Properties","text":"Name Type Description <code>last_jobs_executed</code> <code>typing.List[gcix.Job]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nested_jobs</code> <code>typing.List[gcix.Job]</code> No description. <code>populated_jobs</code> <code>typing.List[gcix.Job]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>typing.List[gcix.ChildDict]</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>ordered_tags_for_initialization</code> <code>gcix.OrderedStringSet</code> No description. <code>ordered_tags_for_replacement</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>allow_failure_for_initialization</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>allow_failure_for_replacement</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>artifacts_for_initialization</code> <code>gcix.Artifacts</code> No description. <code>artifacts_for_replacement</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>cache_for_initialization</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>dependencies_for_initialization</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>dependencies_for_replacement</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image_for_initialization</code> <code>typing.Union[str, gcix.Image]</code> No description. <code>image_for_replacement</code> <code>typing.Union[str, gcix.Image]</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>needs_for_initialization</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>needs_for_replacement</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>rules_for_initialization</code> <code>typing.List[gcix.Rule]</code> No description. <code>rules_for_replacement</code> <code>typing.List[gcix.Rule]</code> No description. <code>rules_to_append</code> <code>typing.List[gcix.Rule]</code> No description. <code>rules_to_prepend</code> <code>typing.List[gcix.Rule]</code> No description. <code>scripts_to_append</code> <code>typing.List[str]</code> No description. <code>scripts_to_prepend</code> <code>typing.List[str]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_initialization</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_replacement</code> <code>typing.Mapping[str]</code> No description. <code>crane_pull_job</code> <code>CranePull</code> CranPull job. <code>crane_push_job</code> <code>CranePush</code> No description. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>do_dive_scan</code> <code>bool</code> Set to <code>false</code> to skip the Dive scan job. <code>do_trivyignore_check</code> <code>bool</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>do_trivy_scan</code> <code>bool</code> Set to <code>false</code> to skip the Trivy scan job. <code>dst_registry</code> <code>typing.Union[str, Registry]</code> Container registry to push the image to. <code>image_name</code> <code>str</code> Image name with stage in the registry. <code>image_tag</code> <code>str</code> Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>. <code>src_registry</code> <code>typing.Union[str, Registry]</code> Container registry to pull the image from. <code>dive_scan_job</code> <code>DiveScan</code> Dive scan job. <code>trivy_ignore_file_check_job</code> <code>TrivyIgnoreFileCheck</code> Trivy ignore file check job. <code>trivy_scan_local_image_job</code> <code>TrivyScanLocalImage</code> Trivy scan local image job."},{"location":"api/container.python/#last_jobs_executedrequired_1","title":"<code>last_jobs_executed</code><sup>Required</sup>","text":"<pre><code>last_jobs_executed: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[gcix.Job]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/container.python/#nested_jobsrequired_1","title":"<code>nested_jobs</code><sup>Required</sup>","text":"<pre><code>nested_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[gcix.Job]</li> </ul>"},{"location":"api/container.python/#populated_jobsrequired_1","title":"<code>populated_jobs</code><sup>Required</sup>","text":"<pre><code>populated_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[gcix.Job]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/container.python/#childrenrequired_1","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>children: typing.List[ChildDict]\n</code></pre> <ul> <li>Type: typing.List[gcix.ChildDict]</li> </ul>"},{"location":"api/container.python/#ordered_tagsrequired_1","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#ordered_tags_for_initializationrequired_1","title":"<code>ordered_tags_for_initialization</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_initialization: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#ordered_tags_for_replacementrequired_1","title":"<code>ordered_tags_for_replacement</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_replacement: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#parentsrequired_1","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#allow_failure_for_initializationoptional_1","title":"<code>allow_failure_for_initialization</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_initialization: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#allow_failure_for_replacementoptional_1","title":"<code>allow_failure_for_replacement</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_replacement: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#artifactsoptional_1","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#artifacts_for_initializationoptional_1","title":"<code>artifacts_for_initialization</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_initialization: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#artifacts_for_replacementoptional_1","title":"<code>artifacts_for_replacement</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_replacement: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#cacheoptional_1","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#cache_for_initializationoptional_1","title":"<code>cache_for_initialization</code><sup>Optional</sup>","text":"<pre><code>cache_for_initialization: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#dependenciesoptional_1","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#dependencies_for_initializationoptional_1","title":"<code>dependencies_for_initialization</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#dependencies_for_replacementoptional_1","title":"<code>dependencies_for_replacement</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#image_for_initializationoptional_1","title":"<code>image_for_initialization</code><sup>Optional</sup>","text":"<pre><code>image_for_initialization: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#image_for_replacementoptional_1","title":"<code>image_for_replacement</code><sup>Optional</sup>","text":"<pre><code>image_for_replacement: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#needsoptional_1","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#needs_for_initializationoptional_1","title":"<code>needs_for_initialization</code><sup>Optional</sup>","text":"<pre><code>needs_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#needs_for_replacementoptional_1","title":"<code>needs_for_replacement</code><sup>Optional</sup>","text":"<pre><code>needs_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#rules_for_initializationoptional_1","title":"<code>rules_for_initialization</code><sup>Optional</sup>","text":"<pre><code>rules_for_initialization: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#rules_for_replacementoptional_1","title":"<code>rules_for_replacement</code><sup>Optional</sup>","text":"<pre><code>rules_for_replacement: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#rules_to_appendoptional_1","title":"<code>rules_to_append</code><sup>Optional</sup>","text":"<pre><code>rules_to_append: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#rules_to_prependoptional_1","title":"<code>rules_to_prepend</code><sup>Optional</sup>","text":"<pre><code>rules_to_prepend: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#scripts_to_appendoptional_1","title":"<code>scripts_to_append</code><sup>Optional</sup>","text":"<pre><code>scripts_to_append: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#scripts_to_prependoptional_1","title":"<code>scripts_to_prepend</code><sup>Optional</sup>","text":"<pre><code>scripts_to_prepend: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#variablesoptional_1","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#variables_for_initializationoptional_1","title":"<code>variables_for_initialization</code><sup>Optional</sup>","text":"<pre><code>variables_for_initialization: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#variables_for_replacementoptional_1","title":"<code>variables_for_replacement</code><sup>Optional</sup>","text":"<pre><code>variables_for_replacement: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#crane_pull_jobrequired","title":"<code>crane_pull_job</code><sup>Required</sup>","text":"<pre><code>crane_pull_job: CranePull\n</code></pre> <ul> <li>Type: CranePull</li> </ul> <p>CranPull job.</p>"},{"location":"api/container.python/#crane_push_jobrequired_1","title":"<code>crane_push_job</code><sup>Required</sup>","text":"<pre><code>crane_push_job: CranePush\n</code></pre> <ul> <li>Type: CranePush</li> </ul>"},{"location":"api/container.python/#docker_client_configrequired_1","title":"<code>docker_client_config</code><sup>Required</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.python/#do_dive_scanrequired_1","title":"<code>do_dive_scan</code><sup>Required</sup>","text":"<pre><code>do_dive_scan: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.python/#do_trivyignore_checkrequired_1","title":"<code>do_trivyignore_check</code><sup>Required</sup>","text":"<pre><code>do_trivyignore_check: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.python/#do_trivy_scanrequired_1","title":"<code>do_trivy_scan</code><sup>Required</sup>","text":"<pre><code>do_trivy_scan: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.python/#dst_registryrequired_2","title":"<code>dst_registry</code><sup>Required</sup>","text":"<pre><code>dst_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.python/#image_namerequired_3","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/image_name.</p>"},{"location":"api/container.python/#image_tagrequired_3","title":"<code>image_tag</code><sup>Required</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>.</p>"},{"location":"api/container.python/#src_registryrequired_2","title":"<code>src_registry</code><sup>Required</sup>","text":"<pre><code>src_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Container registry to pull the image from.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.python/#dive_scan_joboptional","title":"<code>dive_scan_job</code><sup>Optional</sup>","text":"<pre><code>dive_scan_job: DiveScan\n</code></pre> <ul> <li>Type: DiveScan</li> </ul> <p>Dive scan job.</p>"},{"location":"api/container.python/#trivy_ignore_file_check_joboptional","title":"<code>trivy_ignore_file_check_job</code><sup>Optional</sup>","text":"<pre><code>trivy_ignore_file_check_job: TrivyIgnoreFileCheck\n</code></pre> <ul> <li>Type: TrivyIgnoreFileCheck</li> </ul> <p>Trivy ignore file check job.</p>"},{"location":"api/container.python/#trivy_scan_local_image_joboptional","title":"<code>trivy_scan_local_image_job</code><sup>Optional</sup>","text":"<pre><code>trivy_scan_local_image_job: TrivyScanLocalImage\n</code></pre> <ul> <li>Type: TrivyScanLocalImage</li> </ul> <p>Trivy scan local image job.</p>"},{"location":"api/container.python/#cranecopy","title":"CraneCopy","text":"<ul> <li>Implements: ICraneCopy</li> </ul> <p>Creates a job to copy container images with <code>crane</code>. See <code>crane</code>.</p> <p>Copying an image is useful, if you want to have container images as close as possible to your cluster or servers.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: crane-copy</li> <li>stage: deploy</li> <li>image: PredefinedImages.CRANE</li> </ul>"},{"location":"api/container.python/#initializers_2","title":"Initializers","text":"<pre><code>from gcix import container\ncontainer.CraneCopy(\ndst_registry: typing.Union[str, Registry],\nsrc_registry: typing.Union[str, Registry],\ndocker_client_config: DockerClientConfig = None,\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre> Name Type Description <code>dst_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to copy container image to. <code>src_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to copy container image from. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job."},{"location":"api/container.python/#dst_registryrequired_3","title":"<code>dst_registry</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.python/#src_registryrequired_3","title":"<code>src_registry</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to copy container image from.</p>"},{"location":"api/container.python/#docker_client_configoptional_8","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries.</p>"},{"location":"api/container.python/#job_nameoptional_13","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_13","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#methods_2","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.python/#add_dependencies_2","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_6","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_needs_2","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_6","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_parent_2","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.python/#parentrequired_2","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#add_tags_2","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_6","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#add_variables_2","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#variablesrequired_6","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#append_rules_2","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_8","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#append_scripts_2","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_4","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#assign_allow_failure","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#allow_failurerequired_4","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#assign_artifacts_2","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#artifactsrequired_4","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#assign_cache_2","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#cacherequired_4","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#assign_dependencies","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_7","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_image","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.python/#imagerequired_4","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#assign_needs","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_7","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_tags","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_7","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#copy","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.python/#extend_name","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.python/#namerequired","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.python/#stagerequired","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_value","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.python/#stagerequired_1","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#get_all_instance_names_2","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.python/#childoptional_2","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#is_equal_2","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.python/#comparablerequired_2","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/container.python/#prepend_rules_2","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_9","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#prepend_scripts_2","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_5","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#render_2","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.python/#properties_15","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>dst_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to copy container image to. <code>src_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to copy container image from. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries."},{"location":"api/container.python/#tagsrequired_8","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.python/#allow_failurerequired_5","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#namerequired_1","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#ordered_tagsrequired_2","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#parentsrequired_2","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#scriptsrequired_6","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#stagerequired_2","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#artifactsoptional_2","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#cacheoptional_2","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#dependenciesoptional_2","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#imageoptional","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/container.python/#needsoptional_2","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#originaloptional","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/container.python/#rulesoptional","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#variablesoptional_2","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#dst_registryrequired_4","title":"<code>dst_registry</code><sup>Required</sup>","text":"<pre><code>dst_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.python/#src_registryrequired_4","title":"<code>src_registry</code><sup>Required</sup>","text":"<pre><code>src_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to copy container image from.</p>"},{"location":"api/container.python/#docker_client_configoptional_9","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries.</p>"},{"location":"api/container.python/#cranepull","title":"CranePull","text":"<ul> <li>Implements: ICranePull</li> </ul> <p>Creates a job to pull container image from remote container registry with <code>crane</code>.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: crane</li> <li>stage: pull</li> <li>image: PredefinedImages.CRANE</li> </ul>"},{"location":"api/container.python/#initializers_3","title":"Initializers","text":"<pre><code>from gcix import container\ncontainer.CranePull(\nsrc_registry: typing.Union[str, Registry],\ndocker_client_config: DockerClientConfig = None,\nimage_name: str = None,\nimage_tag: str = None,\njob_name: str = None,\njob_stage: str = None,\ntar_path: str = None\n)\n</code></pre> Name Type Description <code>src_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to pull container image from. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>image_name</code> <code>str</code> Container image with namespace to pull from <code>srcRegistry</code>. <code>image_tag</code> <code>str</code> Tag of the image which will be pulled. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>tar_path</code> <code>str</code> Path where to save the container image tarball."},{"location":"api/container.python/#src_registryrequired_5","title":"<code>src_registry</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to pull container image from.</p>"},{"location":"api/container.python/#docker_client_configoptional_10","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.python/#image_nameoptional_7","title":"<code>image_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Container image with namespace to pull from <code>srcRegistry</code>.</p>"},{"location":"api/container.python/#image_tagoptional_5","title":"<code>image_tag</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: latest</li> </ul> <p>Tag of the image which will be pulled.</p>"},{"location":"api/container.python/#job_nameoptional_14","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_14","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#tar_pathoptional_3","title":"<code>tar_path</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Path where to save the container image tarball.</p>"},{"location":"api/container.python/#methods_3","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.python/#add_dependencies_3","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_8","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_needs_3","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_8","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_parent_3","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.python/#parentrequired_3","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#add_tags_3","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_9","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#add_variables_3","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#variablesrequired_7","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#append_rules_3","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_10","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#append_scripts_3","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_7","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#assign_allow_failure_1","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#allow_failurerequired_6","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#assign_artifacts_3","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#artifactsrequired_5","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#assign_cache_3","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#cacherequired_5","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#assign_dependencies_1","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_9","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_image_1","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.python/#imagerequired_5","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#assign_needs_1","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_9","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_tags_1","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_10","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#copy_1","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.python/#extend_name_1","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.python/#namerequired_2","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_1","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.python/#stagerequired_3","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_value_1","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.python/#stagerequired_4","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#get_all_instance_names_3","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.python/#childoptional_3","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#is_equal_3","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.python/#comparablerequired_3","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/container.python/#prepend_rules_3","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_11","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#prepend_scripts_3","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_8","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#render_3","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.python/#properties_16","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>image_name</code> <code>str</code> Container image with namespace to pull from <code>srcRegistry</code>. <code>image_tag</code> <code>str</code> Tag of the image which will be pulled. <code>src_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to pull container image from. <code>tar_path</code> <code>str</code> Path where to save the container image tarball."},{"location":"api/container.python/#tagsrequired_11","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.python/#allow_failurerequired_7","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#namerequired_3","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#ordered_tagsrequired_3","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#parentsrequired_3","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#scriptsrequired_9","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#stagerequired_5","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#artifactsoptional_3","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#cacheoptional_3","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#dependenciesoptional_3","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#imageoptional_1","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/container.python/#needsoptional_3","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#originaloptional_1","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/container.python/#rulesoptional_1","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#variablesoptional_3","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#docker_client_configrequired_2","title":"<code>docker_client_config</code><sup>Required</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.python/#image_namerequired_4","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Container image with namespace to pull from <code>srcRegistry</code>.</p>"},{"location":"api/container.python/#image_tagrequired_4","title":"<code>image_tag</code><sup>Required</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Tag of the image which will be pulled.</p>"},{"location":"api/container.python/#src_registryrequired_6","title":"<code>src_registry</code><sup>Required</sup>","text":"<pre><code>src_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to pull container image from.</p>"},{"location":"api/container.python/#tar_pathrequired","title":"<code>tar_path</code><sup>Required</sup>","text":"<pre><code>tar_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Path where to save the container image tarball.</p>"},{"location":"api/container.python/#cranepush","title":"CranePush","text":"<ul> <li>Implements: ICranePush</li> </ul> <p>Creates a job to push container image to remote container registry with <code>crane</code>.</p> <p>The image to copy must be in a <code>tarball</code> format. It gets validated with crane and is pushed to <code>dst_registry</code> destination registry.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: crane-push</li> <li>stage: deploy</li> <li>image: PredefinedImages.CRANE</li> </ul>"},{"location":"api/container.python/#initializers_4","title":"Initializers","text":"<pre><code>from gcix import container\ncontainer.CranePush(\ndst_registry: typing.Union[str, Registry],\ndocker_client_config: DockerClientConfig = None,\nimage_name: str = None,\nimage_tag: str = None,\njob_name: str = None,\njob_stage: str = None,\ntar_path: str = None\n)\n</code></pre> Name Type Description <code>dst_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to copy container image to. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>image_name</code> <code>str</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>image_tag</code> <code>str</code> The tag the image will be tagged with. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>tar_path</code> <code>str</code> Path where to find the container image tarball."},{"location":"api/container.python/#dst_registryrequired_5","title":"<code>dst_registry</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.python/#docker_client_configoptional_11","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.python/#image_nameoptional_8","title":"<code>image_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.python/#image_tagoptional_6","title":"<code>image_tag</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciCommitTag</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.python/#job_nameoptional_15","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_15","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#tar_pathoptional_4","title":"<code>tar_path</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Path where to find the container image tarball.</p>"},{"location":"api/container.python/#methods_4","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.python/#add_dependencies_4","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_10","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_needs_4","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_10","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_parent_4","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.python/#parentrequired_4","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#add_tags_4","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_12","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#add_variables_4","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#variablesrequired_8","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#append_rules_4","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_12","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#append_scripts_4","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_10","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#assign_allow_failure_2","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#allow_failurerequired_8","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#assign_artifacts_4","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#artifactsrequired_6","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#assign_cache_4","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#cacherequired_6","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#assign_dependencies_2","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_11","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_image_2","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.python/#imagerequired_6","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#assign_needs_2","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_11","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_tags_2","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_13","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#copy_2","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.python/#extend_name_2","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.python/#namerequired_4","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_2","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.python/#stagerequired_6","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_value_2","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.python/#stagerequired_7","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#get_all_instance_names_4","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.python/#childoptional_4","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#is_equal_4","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.python/#comparablerequired_4","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/container.python/#prepend_rules_4","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_13","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#prepend_scripts_4","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_11","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#render_4","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.python/#properties_17","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>dst_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to copy container image to. <code>image_name</code> <code>str</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>image_tag</code> <code>str</code> The tag the image will be tagged with. <code>tar_path</code> <code>str</code> Path where to find the container image tarball."},{"location":"api/container.python/#tagsrequired_14","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.python/#allow_failurerequired_9","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#namerequired_5","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#ordered_tagsrequired_4","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#parentsrequired_4","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#scriptsrequired_12","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#stagerequired_8","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#artifactsoptional_4","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#cacheoptional_4","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#dependenciesoptional_4","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#imageoptional_2","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/container.python/#needsoptional_4","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#originaloptional_2","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/container.python/#rulesoptional_2","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#variablesoptional_4","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#docker_client_configrequired_3","title":"<code>docker_client_config</code><sup>Required</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.python/#dst_registryrequired_6","title":"<code>dst_registry</code><sup>Required</sup>","text":"<pre><code>dst_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.python/#image_namerequired_5","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.python/#image_tagrequired_5","title":"<code>image_tag</code><sup>Required</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.python/#tar_pathrequired_1","title":"<code>tar_path</code><sup>Required</sup>","text":"<pre><code>tar_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Path where to find the container image tarball.</p>"},{"location":"api/container.python/#divescan","title":"DiveScan","text":"<ul> <li>Implements: IDiveScan</li> </ul> <p>Scan your images with wagoodman/dive.</p> <p><code>dive</code> will scan your container image layers and will output the efficency of each layer. You can see which layer and which file is consuming the most storage and optimize the layers if possible. It prevents container images and its layers beeing polluted with files like apt or yum cache's. The output produced by <code>dive</code> is uploaded as an artifact to the GitLab instance.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: dive</li> <li>stage: check</li> <li>image: PredefinedImages.DIVE</li> <li>artifacts: Path 'dive.txt'</li> </ul>"},{"location":"api/container.python/#initializers_5","title":"Initializers","text":"<pre><code>from gcix import container\ncontainer.DiveScan(\nhighest_user_wasted_percent: typing.Union[int, float] = None,\nhighest_wasted_bytes: typing.Union[int, float] = None,\nignore_errors: bool = None,\nimage_name: str = None,\nimage_path: str = None,\njob_name: str = None,\njob_stage: str = None,\nlowest_efficiency: typing.Union[int, float] = None,\nsource: str = None\n)\n</code></pre> Name Type Description <code>highest_user_wasted_percent</code> <code>typing.Union[int, float]</code> Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail. <code>highest_wasted_bytes</code> <code>typing.Union[int, float]</code> Highest allowable bytes wasted, otherwise CI validation will fail. <code>ignore_errors</code> <code>bool</code> Ignore image parsing errors and run the analysis anyway. <code>image_name</code> <code>str</code> Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>. <code>image_path</code> <code>str</code> Path to the image can be either a remote container registry, as well as a local path to an image. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>lowest_efficiency</code> <code>typing.Union[int, float]</code> Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail. <code>source</code> <code>str</code> The container engine to fetch the image from."},{"location":"api/container.python/#highest_user_wasted_percentoptional_1","title":"<code>highest_user_wasted_percent</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[int, float]</li> <li>Default: 0.1</li> </ul> <p>Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.python/#highest_wasted_bytesoptional_1","title":"<code>highest_wasted_bytes</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[int, float]</li> </ul> <p>Highest allowable bytes wasted, otherwise CI validation will fail.</p>"},{"location":"api/container.python/#ignore_errorsoptional_1","title":"<code>ignore_errors</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: false</li> </ul> <p>Ignore image parsing errors and run the analysis anyway.</p>"},{"location":"api/container.python/#image_nameoptional_9","title":"<code>image_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>.</p>"},{"location":"api/container.python/#image_pathoptional_2","title":"<code>image_path</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectPath</li> </ul> <p>Path to the image can be either a remote container registry, as well as a local path to an image.</p>"},{"location":"api/container.python/#job_nameoptional_16","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_16","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#lowest_efficiencyoptional_1","title":"<code>lowest_efficiency</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[int, float]</li> <li>Default: 0.9</li> </ul> <p>Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.python/#sourceoptional_1","title":"<code>source</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: \"docker-archive</li> </ul> <p>The container engine to fetch the image from.</p> <p>Allowed values: docker, podman, docker-archive</p>"},{"location":"api/container.python/#methods_5","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.python/#add_dependencies_5","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_12","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_needs_5","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_12","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_parent_5","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.python/#parentrequired_5","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#add_tags_5","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_15","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#add_variables_5","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#variablesrequired_9","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#append_rules_5","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_14","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#append_scripts_5","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_13","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#assign_allow_failure_3","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#allow_failurerequired_10","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#assign_artifacts_5","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#artifactsrequired_7","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#assign_cache_5","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#cacherequired_7","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#assign_dependencies_3","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_13","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_image_3","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.python/#imagerequired_7","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#assign_needs_3","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_13","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_tags_3","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_16","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#copy_3","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.python/#extend_name_3","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.python/#namerequired_6","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_3","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.python/#stagerequired_9","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_value_3","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.python/#stagerequired_10","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#get_all_instance_names_5","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.python/#childoptional_5","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#is_equal_5","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.python/#comparablerequired_5","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/container.python/#prepend_rules_5","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_15","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#prepend_scripts_5","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_14","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#render_5","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.python/#properties_18","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>highest_user_wasted_percent</code> <code>typing.Union[int, float]</code> Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail. <code>ignore_errors</code> <code>bool</code> Ignore image parsing errors and run the analysis anyway. <code>image_name</code> <code>str</code> Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>. <code>image_path</code> <code>str</code> Path to the image can be either a remote container registry, as well as a local path to an image. <code>lowest_efficiency</code> <code>typing.Union[int, float]</code> Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail. <code>source</code> <code>str</code> The container engine to fetch the image from. <code>highest_wasted_bytes</code> <code>typing.Union[int, float]</code> Highest allowable bytes wasted, otherwise CI validation will fail."},{"location":"api/container.python/#tagsrequired_17","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.python/#allow_failurerequired_11","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#namerequired_7","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#ordered_tagsrequired_5","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#parentsrequired_5","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#scriptsrequired_15","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#stagerequired_11","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#artifactsoptional_5","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#cacheoptional_5","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#dependenciesoptional_5","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#imageoptional_3","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/container.python/#needsoptional_5","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#originaloptional_3","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/container.python/#rulesoptional_3","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#variablesoptional_5","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#highest_user_wasted_percentrequired","title":"<code>highest_user_wasted_percent</code><sup>Required</sup>","text":"<pre><code>highest_user_wasted_percent: typing.Union[int, float]\n</code></pre> <ul> <li>Type: typing.Union[int, float]</li> </ul> <p>Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.python/#ignore_errorsrequired","title":"<code>ignore_errors</code><sup>Required</sup>","text":"<pre><code>ignore_errors: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Ignore image parsing errors and run the analysis anyway.</p>"},{"location":"api/container.python/#image_namerequired_6","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>.</p>"},{"location":"api/container.python/#image_pathrequired","title":"<code>image_path</code><sup>Required</sup>","text":"<pre><code>image_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Path to the image can be either a remote container registry, as well as a local path to an image.</p>"},{"location":"api/container.python/#lowest_efficiencyrequired","title":"<code>lowest_efficiency</code><sup>Required</sup>","text":"<pre><code>lowest_efficiency: typing.Union[int, float]\n</code></pre> <ul> <li>Type: typing.Union[int, float]</li> </ul> <p>Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.python/#sourcerequired","title":"<code>source</code><sup>Required</sup>","text":"<pre><code>source: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The container engine to fetch the image from.</p> <p>Allowed values: docker, podman, docker-archive</p>"},{"location":"api/container.python/#highest_wasted_bytesoptional_2","title":"<code>highest_wasted_bytes</code><sup>Optional</sup>","text":"<pre><code>highest_wasted_bytes: typing.Union[int, float]\n</code></pre> <ul> <li>Type: typing.Union[int, float]</li> </ul> <p>Highest allowable bytes wasted, otherwise CI validation will fail.</p>"},{"location":"api/container.python/#dockerbuild","title":"DockerBuild","text":"<ul> <li>Implements: IDockerBuild</li> </ul> <p>Runs <code>docker build</code>.</p> <p>Example:</p> <pre><code>import { Build } from \"@gcix/gcix\"\nconst buildJob = Build({repository: \"myrepo/myimage\", tag: \"v0.1.0\"})\n</code></pre> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: docker</li> <li>stage: build</li> </ul>"},{"location":"api/container.python/#initializers_6","title":"Initializers","text":"<pre><code>from gcix import container\ncontainer.DockerBuild(\nrepository: str,\ncontext: str = None,\njob_name: str = None,\njob_stage: str = None,\ntag: str = None\n)\n</code></pre> Name Type Description <code>repository</code> <code>str</code> The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>. <code>context</code> <code>str</code> The Docker build context (the directory containing the Dockerfile). <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>tag</code> <code>str</code> A Docker image tag applied to the image."},{"location":"api/container.python/#repositoryrequired_1","title":"<code>repository</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>.</p>"},{"location":"api/container.python/#contextoptional_2","title":"<code>context</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: <code>.</code></li> </ul> <p>The Docker build context (the directory containing the Dockerfile).</p>"},{"location":"api/container.python/#job_nameoptional_17","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_17","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#tagoptional_2","title":"<code>tag</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>A Docker image tag applied to the image.</p> <p>If not set docker uses <code>latest</code></p>"},{"location":"api/container.python/#methods_6","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.python/#add_dependencies_6","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_14","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_needs_6","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_14","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_parent_6","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.python/#parentrequired_6","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#add_tags_6","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_18","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#add_variables_6","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#variablesrequired_10","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#append_rules_6","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_16","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#append_scripts_6","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_16","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#assign_allow_failure_4","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#allow_failurerequired_12","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#assign_artifacts_6","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#artifactsrequired_8","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#assign_cache_6","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#cacherequired_8","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#assign_dependencies_4","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_15","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_image_4","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.python/#imagerequired_8","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#assign_needs_4","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_15","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_tags_4","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_19","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#copy_4","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.python/#extend_name_4","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.python/#namerequired_8","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_4","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.python/#stagerequired_12","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_value_4","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.python/#stagerequired_13","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#get_all_instance_names_6","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.python/#childoptional_6","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#is_equal_6","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.python/#comparablerequired_6","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/container.python/#prepend_rules_6","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_17","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#prepend_scripts_6","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_17","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#render_6","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.python/#properties_19","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>context</code> <code>str</code> The Docker build context (the directory containing the Dockerfile). <code>repository</code> <code>str</code> The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>. <code>tag</code> <code>str</code> A Docker image tag applied to the image."},{"location":"api/container.python/#tagsrequired_20","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.python/#allow_failurerequired_13","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#namerequired_9","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#ordered_tagsrequired_6","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#parentsrequired_6","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#scriptsrequired_18","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#stagerequired_14","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#artifactsoptional_6","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#cacheoptional_6","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#dependenciesoptional_6","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#imageoptional_4","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/container.python/#needsoptional_6","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#originaloptional_4","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/container.python/#rulesoptional_4","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#variablesoptional_6","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#contextrequired","title":"<code>context</code><sup>Required</sup>","text":"<pre><code>context: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The Docker build context (the directory containing the Dockerfile).</p>"},{"location":"api/container.python/#repositoryrequired_2","title":"<code>repository</code><sup>Required</sup>","text":"<pre><code>repository: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>.</p>"},{"location":"api/container.python/#tagrequired","title":"<code>tag</code><sup>Required</sup>","text":"<pre><code>tag: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>A Docker image tag applied to the image.</p>"},{"location":"api/container.python/#dockerclientconfig","title":"DockerClientConfig","text":"<ul> <li>Implements: IDockerClientConfig</li> </ul> <p>Class which represents a docker client configuration.</p> <p>After creating an instance of this class you can add new credential helper, basic authentication settings or default credential store.</p>"},{"location":"api/container.python/#initializers_7","title":"Initializers","text":"<pre><code>from gcix import container\ncontainer.DockerClientConfig(\nconfig_file_path: str = None\n)\n</code></pre> Name Type Description <code>config_file_path</code> <code>str</code> Docker client config path."},{"location":"api/container.python/#config_file_pathoptional_1","title":"<code>config_file_path</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: $HOME/.docker/config.json</li> </ul> <p>Docker client config path.</p>"},{"location":"api/container.python/#methods_7","title":"Methods","text":"Name Description <code>add_auth</code> Adds basic authentication <code>auths</code> setting to the configuration. <code>add_cred_helper</code> Adds a Credentials helper <code>credHelpers</code> for a registry. <code>add_raw</code> Adds arbitrary settings to configuration. <code>assign_creds_store</code> Sets the <code>credsStore</code> setting for clients. See docker login#credentials-store. <code>shell_command</code> Renders the shell command for creating the docker client config."},{"location":"api/container.python/#add_auth","title":"<code>add_auth</code>","text":"<pre><code>def add_auth(\nregistry: str,\nusername_env_var: str = None,\npassword_env_var: str = None\n) -&gt; DockerClientConfig\n</code></pre> <p>Adds basic authentication <code>auths</code> setting to the configuration.</p> <p>This method acts a little special, because of some security aspects. The method, takse three arguments, <code>registry</code>, <code>username_env_var</code> and <code>password_env_var</code>. Arguments ending wit *_env_var, are ment to be available as a <code>gcip.Job</code> variable.</p>"},{"location":"api/container.python/#registryrequired_3","title":"<code>registry</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Name of the container registry to set <code>creds_helper</code> for.</p>"},{"location":"api/container.python/#username_env_varoptional","title":"<code>username_env_var</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Name of the environment variable which as the registry username stored.</p>"},{"location":"api/container.python/#password_env_varoptional","title":"<code>password_env_var</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Name of the environment variable which as the registry password stored.</p>"},{"location":"api/container.python/#add_cred_helper","title":"<code>add_cred_helper</code>","text":"<pre><code>def add_cred_helper(\nregistry: str,\ncred_helper: str\n) -&gt; DockerClientConfig\n</code></pre> <p>Adds a Credentials helper <code>credHelpers</code> for a registry.</p> <p>See docker login#credential-helpers</p>"},{"location":"api/container.python/#registryrequired_4","title":"<code>registry</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Name of the container registry to set <code>creds_helper</code> for.</p>"},{"location":"api/container.python/#cred_helperrequired","title":"<code>cred_helper</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Name of the credential helper to use together with the <code>registry</code>.</p>"},{"location":"api/container.python/#add_raw","title":"<code>add_raw</code>","text":"<pre><code>def add_raw(\nraw_input: typing.Mapping[typing.Any]\n) -&gt; DockerClientConfig\n</code></pre> <p>Adds arbitrary settings to configuration.</p> <p>Be aware and warned! You can overwrite any predefined settings with this method. This method is intendet to be used, if non suitable method is available and you have to set a configuration setting.</p>"},{"location":"api/container.python/#raw_inputrequired","title":"<code>raw_input</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[typing.Any]</li> </ul> <p>Dictionary of non-available settings to be set.</p>"},{"location":"api/container.python/#assign_creds_store","title":"<code>assign_creds_store</code>","text":"<pre><code>def assign_creds_store(\ncreds_store: str\n) -&gt; DockerClientConfig\n</code></pre> <p>Sets the <code>credsStore</code> setting for clients. See docker login#credentials-store.</p> <p>Be aware, that if you set the <code>credsStore</code> and add creds_helper or username and password authentication, those authentication methods are not used.</p> <p>Clients which can authenticate against a registry can handle the credential store itself, mostly you do not want to set the <code>credsStore</code>. Use <code>credsHelpers</code> instead.</p>"},{"location":"api/container.python/#creds_storerequired","title":"<code>creds_store</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Should be the suffix of the program to use (i.e. everything after docker-credential-). <code>osxkeychain</code>, to use docker-credential-osxkeychain or <code>ecr-login</code>, to use docker-crendential-ecr-login.</p>"},{"location":"api/container.python/#shell_command","title":"<code>shell_command</code>","text":"<pre><code>def shell_command() -&gt; typing.List[str]\n</code></pre> <p>Renders the shell command for creating the docker client config.</p> <p>The render method uses <code>json.dumps()</code> to dump the configuration as a json string and escapes it for the shell. In Jobs which needed the configuration the rendered output should be redirected to the appropriate destination e.g. ~/.docker/config.json. This ensures, that environment variables are substituted.</p>"},{"location":"api/container.python/#properties_20","title":"Properties","text":"Name Type Description <code>config</code> <code>IDockerClientConfigType</code> Docker client configuration. <code>config_file_path</code> <code>str</code> Docker client config path."},{"location":"api/container.python/#configrequired","title":"<code>config</code><sup>Required</sup>","text":"<pre><code>config: IDockerClientConfigType\n</code></pre> <ul> <li>Type: IDockerClientConfigType</li> </ul> <p>Docker client configuration.</p>"},{"location":"api/container.python/#config_file_pathrequired","title":"<code>config_file_path</code><sup>Required</sup>","text":"<pre><code>config_file_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Docker client config path.</p>"},{"location":"api/container.python/#dockerpush","title":"DockerPush","text":"<ul> <li>Implements: IDockerPush</li> </ul> <p>Runs <code>docker push</code> and optionally <code>docker login</code> before.</p> <p>Example:</p> <pre><code>import { Push } from \"@gcix/gcix\"\n\nconst pushJob = new Push({\n                registry: \"index.docker.io/v1/gcix/gcix\",\n                image: \"gcip\",\n                tag: \"v0.1.0\",\n                userEnvVar: \"DOCKER_USER\",\n                loginEnvVar: \"DOCKER_TOKEN\"\n            })\n</code></pre> <p>The <code>userEnvVar</code> and <code>loginEnvVar</code> should be created as protected and masked custom environment variable configured in the UI.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: docker</li> <li>stage: deploy</li> </ul>"},{"location":"api/container.python/#initializers_8","title":"Initializers","text":"<pre><code>from gcix import container\ncontainer.DockerPush(\ncontainer_image: str,\njob_name: str = None,\njob_stage: str = None,\nlogin_env_var: str = None,\nregistry: str = None,\ntag: str = None,\nuser_env_var: str = None\n)\n</code></pre> Name Type Description <code>container_image</code> <code>str</code> The name of the Docker image to push to the <code>registry</code>. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>login_env_var</code> <code>str</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here. <code>registry</code> <code>str</code> The Docker registry the image should be pushed to. <code>tag</code> <code>str</code> The Docker image tag that should be pushed to the <code>registry</code>. <code>user_env_var</code> <code>str</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here."},{"location":"api/container.python/#container_imagerequired_1","title":"<code>container_image</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Docker image to push to the <code>registry</code>.</p>"},{"location":"api/container.python/#job_nameoptional_18","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_18","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#login_env_varoptional_1","title":"<code>login_env_var</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.python/#registryoptional_1","title":"<code>registry</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: index.docker.io/v1</li> </ul> <p>The Docker registry the image should be pushed to.</p>"},{"location":"api/container.python/#tagoptional_3","title":"<code>tag</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: <code>latest</code></li> </ul> <p>The Docker image tag that should be pushed to the <code>registry</code>.</p>"},{"location":"api/container.python/#user_env_varoptional_1","title":"<code>user_env_var</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.python/#methods_8","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.python/#add_dependencies_7","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_16","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_needs_7","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_16","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_parent_7","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.python/#parentrequired_7","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#add_tags_7","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_21","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#add_variables_7","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#variablesrequired_11","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#append_rules_7","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_18","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#append_scripts_7","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_19","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#assign_allow_failure_5","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#allow_failurerequired_14","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#assign_artifacts_7","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#artifactsrequired_9","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#assign_cache_7","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#cacherequired_9","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#assign_dependencies_5","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_17","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_image_5","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.python/#imagerequired_9","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#assign_needs_5","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_17","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_tags_5","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_22","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#copy_5","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.python/#extend_name_5","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.python/#namerequired_10","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_5","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.python/#stagerequired_15","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_value_5","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.python/#stagerequired_16","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#get_all_instance_names_7","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.python/#childoptional_7","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#is_equal_7","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.python/#comparablerequired_7","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/container.python/#prepend_rules_7","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_19","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#prepend_scripts_7","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_20","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#render_7","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.python/#properties_21","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>container_image</code> <code>str</code> The name of the Docker image to push to the <code>registry</code>. <code>registry</code> <code>str</code> The Docker registry the image should be pushed to. <code>tag</code> <code>str</code> The Docker image tag that should be pushed to the <code>registry</code>. <code>login_env_var</code> <code>str</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here. <code>user_env_var</code> <code>str</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here."},{"location":"api/container.python/#tagsrequired_23","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.python/#allow_failurerequired_15","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#namerequired_11","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#ordered_tagsrequired_7","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#parentsrequired_7","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#scriptsrequired_21","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#stagerequired_17","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#artifactsoptional_7","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#cacheoptional_7","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#dependenciesoptional_7","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#imageoptional_5","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/container.python/#needsoptional_7","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#originaloptional_5","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/container.python/#rulesoptional_5","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#variablesoptional_7","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#container_imagerequired_2","title":"<code>container_image</code><sup>Required</sup>","text":"<pre><code>container_image: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Docker image to push to the <code>registry</code>.</p>"},{"location":"api/container.python/#registryrequired_5","title":"<code>registry</code><sup>Required</sup>","text":"<pre><code>registry: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The Docker registry the image should be pushed to.</p>"},{"location":"api/container.python/#tagrequired_1","title":"<code>tag</code><sup>Required</sup>","text":"<pre><code>tag: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The Docker image tag that should be pushed to the <code>registry</code>.</p>"},{"location":"api/container.python/#login_env_varoptional_2","title":"<code>login_env_var</code><sup>Optional</sup>","text":"<pre><code>login_env_var: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.python/#user_env_varoptional_2","title":"<code>user_env_var</code><sup>Optional</sup>","text":"<pre><code>user_env_var: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.python/#kanikoexecute","title":"KanikoExecute","text":"<ul> <li>Implements: IKanikoExecute</li> </ul> <p>Creates a job which builds container images.</p> <p>This job creates images depending on git branches. e.g If the branch which gets pushed to the remote is named <code>my_awsome_feature</code> the image will be tagged with <code>my-awsome-feature</code>.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: kaniko</li> <li>stage: build</li> <li>image: PredefinedImages.KANIKO</li> </ul>"},{"location":"api/container.python/#initializers_9","title":"Initializers","text":"<pre><code>from gcix import container\ncontainer.KanikoExecute(\nbuild_args: typing.Mapping[typing.Any] = None,\nbuild_target: str = None,\ncontext: str = None,\ndocker_client_config: DockerClientConfig = None,\ndockerfile: str = None,\nenable_push: bool = None,\nimage_name: str = None,\nimage_tag: str = None,\njob_name: str = None,\njob_stage: str = None,\nregistries: typing.Union[typing.List[str], typing.List[Registry]] = None,\ntar_path: str = None,\nverbosity: str = None\n)\n</code></pre> Name Type Description <code>build_args</code> <code>typing.Mapping[typing.Any]</code> Container build arguments, used to instrument the container image build. <code>build_target</code> <code>str</code> For container multistage builds name of the build stage you want to create. <code>context</code> <code>str</code> Context which will be send to kaniko. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>dockerfile</code> <code>str</code> Name of the dockerfile to use. <code>enable_push</code> <code>bool</code> Enable push to container registry, disabled to allow subsequent jobs to. <code>image_name</code> <code>str</code> Image name which will be created. <code>image_tag</code> <code>str</code> The tag the image will be tagged with. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>registries</code> <code>typing.Union[typing.List[str], typing.List[Registry]]</code> List of container registries to push created image to. <code>tar_path</code> <code>str</code> Container images created by kaniko are tarball files. <code>verbosity</code> <code>str</code> Verbosity of kaniko logging."},{"location":"api/container.python/#build_argsoptional_1","title":"<code>build_args</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Mapping[typing.Any]</li> </ul> <p>Container build arguments, used to instrument the container image build.</p>"},{"location":"api/container.python/#build_targetoptional_1","title":"<code>build_target</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>For container multistage builds name of the build stage you want to create.</p> <p>Image tag will be appended with the build_target. e.g. latest-buildtarget.</p>"},{"location":"api/container.python/#contextoptional_3","title":"<code>context</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Context which will be send to kaniko.</p> <p>Defaults to <code>None</code> which implies the local directory is the context.</p>"},{"location":"api/container.python/#docker_client_configoptional_12","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.python/#dockerfileoptional_1","title":"<code>dockerfile</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: \"Dockerfile\"</li> </ul> <p>Name of the dockerfile to use.</p> <p>File is relative to context.</p>"},{"location":"api/container.python/#enable_pushoptional_1","title":"<code>enable_push</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: false act on container tarball.</li> </ul> <p>Enable push to container registry, disabled to allow subsequent jobs to.</p>"},{"location":"api/container.python/#image_nameoptional_10","title":"<code>image_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_PROJECT_NAME.</li> </ul> <p>Image name which will be created.</p>"},{"location":"api/container.python/#image_tagoptional_7","title":"<code>image_tag</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_COMMIT_TAG</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.python/#job_nameoptional_19","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_19","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#registriesoptional_1","title":"<code>registries</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[typing.List[str], typing.List[Registry]]</li> </ul> <p>List of container registries to push created image to.</p>"},{"location":"api/container.python/#tar_pathoptional_5","title":"<code>tar_path</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Container images created by kaniko are tarball files.</p> <p>This is the path where to store the image, will be named with suffix <code>.tar</code>. This path will be created if not present.</p>"},{"location":"api/container.python/#verbosityoptional_1","title":"<code>verbosity</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: \"info\"</li> </ul> <p>Verbosity of kaniko logging.</p>"},{"location":"api/container.python/#methods_9","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.python/#add_dependencies_8","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_18","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_needs_8","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_18","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_parent_8","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.python/#parentrequired_8","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#add_tags_8","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_24","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#add_variables_8","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#variablesrequired_12","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#append_rules_8","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_20","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#append_scripts_8","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_22","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#assign_allow_failure_6","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#allow_failurerequired_16","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#assign_artifacts_8","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#artifactsrequired_10","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#assign_cache_8","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#cacherequired_10","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#assign_dependencies_6","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_19","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_image_6","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.python/#imagerequired_10","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#assign_needs_6","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_19","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_tags_6","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_25","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#copy_6","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.python/#extend_name_6","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.python/#namerequired_12","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_6","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.python/#stagerequired_18","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_value_6","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.python/#stagerequired_19","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#get_all_instance_names_8","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.python/#childoptional_8","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#is_equal_8","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.python/#comparablerequired_8","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/container.python/#prepend_rules_8","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_21","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#prepend_scripts_8","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_23","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#render_8","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.python/#properties_22","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>context</code> <code>str</code> Context which will be send to kaniko. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>dockerfile</code> <code>str</code> Name of the dockerfile to use. <code>enable_push</code> <code>bool</code> Enable push to container registry, disabled to allow subsequent jobs to act on container tarball. <code>image_name</code> <code>str</code> Image name which will be created. <code>image_tag</code> <code>str</code> The tag the image will be tagged with. <code>verbosity</code> <code>str</code> Verbosity of kaniko logging. <code>build_args</code> <code>typing.Mapping[typing.Any]</code> Container build arguments, used to instrument the container image build. <code>build_target</code> <code>str</code> For container multistage builds name of the build stage you want to create. <code>registries</code> <code>typing.Union[typing.List[str], typing.List[Registry]]</code> List of container registries to push created image to. <code>tar_path</code> <code>str</code> Container images created by kaniko are tarball files."},{"location":"api/container.python/#tagsrequired_26","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.python/#allow_failurerequired_17","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#namerequired_13","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#ordered_tagsrequired_8","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#parentsrequired_8","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#scriptsrequired_24","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#stagerequired_20","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#artifactsoptional_8","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#cacheoptional_8","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#dependenciesoptional_8","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#imageoptional_6","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/container.python/#needsoptional_8","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#originaloptional_6","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/container.python/#rulesoptional_6","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#variablesoptional_8","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#contextrequired_1","title":"<code>context</code><sup>Required</sup>","text":"<pre><code>context: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Context which will be send to kaniko.</p>"},{"location":"api/container.python/#docker_client_configrequired_4","title":"<code>docker_client_config</code><sup>Required</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.python/#dockerfilerequired","title":"<code>dockerfile</code><sup>Required</sup>","text":"<pre><code>dockerfile: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Name of the dockerfile to use.</p> <p>File is relative to context.</p>"},{"location":"api/container.python/#enable_pushrequired","title":"<code>enable_push</code><sup>Required</sup>","text":"<pre><code>enable_push: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Enable push to container registry, disabled to allow subsequent jobs to act on container tarball.</p>"},{"location":"api/container.python/#image_namerequired_7","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Image name which will be created.</p>"},{"location":"api/container.python/#image_tagrequired_6","title":"<code>image_tag</code><sup>Required</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.python/#verbosityrequired","title":"<code>verbosity</code><sup>Required</sup>","text":"<pre><code>verbosity: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Verbosity of kaniko logging.</p>"},{"location":"api/container.python/#build_argsoptional_2","title":"<code>build_args</code><sup>Optional</sup>","text":"<pre><code>build_args: typing.Mapping[typing.Any]\n</code></pre> <ul> <li>Type: typing.Mapping[typing.Any]</li> </ul> <p>Container build arguments, used to instrument the container image build.</p>"},{"location":"api/container.python/#build_targetoptional_2","title":"<code>build_target</code><sup>Optional</sup>","text":"<pre><code>build_target: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>For container multistage builds name of the build stage you want to create.</p> <p>Image tag will be appended with the build_target. e.g. latest-buildtarget.</p>"},{"location":"api/container.python/#registriesoptional_2","title":"<code>registries</code><sup>Optional</sup>","text":"<pre><code>registries: typing.Union[typing.List[str], typing.List[Registry]]\n</code></pre> <ul> <li>Type: typing.Union[typing.List[str], typing.List[Registry]]</li> </ul> <p>List of container registries to push created image to.</p>"},{"location":"api/container.python/#tar_pathoptional_6","title":"<code>tar_path</code><sup>Optional</sup>","text":"<pre><code>tar_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Container images created by kaniko are tarball files.</p> <p>This is the path where to store the image, will be named with suffix <code>.tar</code>. This path will be created if not present.</p>"},{"location":"api/container.python/#predefinedimages","title":"PredefinedImages","text":"<p>The PredefinedImages collection supplies commonly utilized container image objects within the gcix framework.</p>"},{"location":"api/container.python/#constants","title":"Constants","text":"Name Type Description <code>ALPINE_GIT</code> <code>gcix.Image</code> A predefined Alpine Git container image object. <code>BUSYBOX</code> <code>gcix.Image</code> A predefined Busybox container image object. <code>CRANE</code> <code>gcix.Image</code> A predefined Crane container image object. <code>DIVE</code> <code>gcix.Image</code> A predefined Dive container image object. <code>GCIP</code> <code>gcix.Image</code> A predefined GCIP container image object. <code>GCIX</code> <code>gcix.Image</code> A predefined GCIX container image object. <code>KANIKO</code> <code>gcix.Image</code> A predefined Kaniko container image object. <code>TRIVY</code> <code>gcix.Image</code> A predefined Trivy container image object."},{"location":"api/container.python/#alpine_gitrequired","title":"<code>ALPINE_GIT</code><sup>Required</sup>","text":"<pre><code>ALPINE_GIT: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul> <p>A predefined Alpine Git container image object.</p> <p>This image is useful for Git operations within containers.</p>"},{"location":"api/container.python/#busyboxrequired","title":"<code>BUSYBOX</code><sup>Required</sup>","text":"<pre><code>BUSYBOX: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul> <p>A predefined Busybox container image object.</p>"},{"location":"api/container.python/#cranerequired","title":"<code>CRANE</code><sup>Required</sup>","text":"<pre><code>CRANE: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul> <p>A predefined Crane container image object.</p>"},{"location":"api/container.python/#diverequired","title":"<code>DIVE</code><sup>Required</sup>","text":"<pre><code>DIVE: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul> <p>A predefined Dive container image object.</p>"},{"location":"api/container.python/#gciprequired","title":"<code>GCIP</code><sup>Required</sup>","text":"<pre><code>GCIP: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul> <p>A predefined GCIP container image object.</p>"},{"location":"api/container.python/#gcixrequired","title":"<code>GCIX</code><sup>Required</sup>","text":"<pre><code>GCIX: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul> <p>A predefined GCIX container image object.</p>"},{"location":"api/container.python/#kanikorequired","title":"<code>KANIKO</code><sup>Required</sup>","text":"<pre><code>KANIKO: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul> <p>A predefined Kaniko container image object.</p>"},{"location":"api/container.python/#trivyrequired","title":"<code>TRIVY</code><sup>Required</sup>","text":"<pre><code>TRIVY: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul> <p>A predefined Trivy container image object.</p>"},{"location":"api/container.python/#registry","title":"Registry","text":"<p>Container registry urls constants.</p>"},{"location":"api/container.python/#static-functions","title":"Static Functions","text":"Name Description <code>aws</code> Amazon Elastic Container Registry (ECR)."},{"location":"api/container.python/#aws","title":"<code>aws</code>","text":"<pre><code>from gcix import container\ncontainer.Registry.aws(\naccount_id: str = None,\nregion: str = None\n)\n</code></pre> <p>Amazon Elastic Container Registry (ECR).</p> <p>If neither <code>accountId</code> nor <code>region</code> is given, the method attempts to evaluate <code>accountId</code> and <code>region</code> using helper functions from <code>aws.AWSAccount</code>. If either of the helper functions does provide a valid value, a <code>ValueError</code> or <code>KeyError</code> exception will be raised.</p>"},{"location":"api/container.python/#account_idoptional_1","title":"<code>account_id</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: AWSAccount.awsAccountId()</li> </ul> <p>AWS account id.</p>"},{"location":"api/container.python/#regionoptional_1","title":"<code>region</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: AWSAccount.awsRegion()</li> </ul> <p>AWS region where the ECR repository lives in.</p>"},{"location":"api/container.python/#constants_1","title":"Constants","text":"Name Type Description <code>DOCKER</code> <code>str</code> No description. <code>GCR</code> <code>str</code> No description. <code>QUAY</code> <code>str</code> No description."},{"location":"api/container.python/#dockerrequired","title":"<code>DOCKER</code><sup>Required</sup>","text":"<pre><code>DOCKER: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#gcrrequired","title":"<code>GCR</code><sup>Required</sup>","text":"<pre><code>GCR: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#quayrequired","title":"<code>QUAY</code><sup>Required</sup>","text":"<pre><code>QUAY: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#trivyignorefilecheck","title":"TrivyIgnoreFileCheck","text":"<ul> <li>Implements: ITrivyIgnoreFileCheck</li> </ul> <p>This job checks if a .trivyignore file exists and is not empty and fails if so.</p> <p>If a .trivyignore file is found and not empty, by default the job fails with <code>exit 1</code>, the job is configured to allow failures so that the pipeline keeps running. This ensures the visibility of acknowledged CVE's in the .trivyignore file inside the pipeline.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: trivyignore</li> <li>stage: check</li> <li>image: PredefinedImages.BUSYBOX</li> <li>allow_failure: 1</li> </ul>"},{"location":"api/container.python/#initializers_10","title":"Initializers","text":"<pre><code>from gcix import container\ncontainer.TrivyIgnoreFileCheck(\njob_name: str = None,\njob_stage: str = None,\ntrivyignore_path: str = None\n)\n</code></pre> Name Type Description <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>trivyignore_path</code> <code>str</code> Path to the <code>.trivyignore</code> file."},{"location":"api/container.python/#job_nameoptional_20","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_20","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#trivyignore_pathoptional_1","title":"<code>trivyignore_path</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectDir/.trivyignore</li> </ul> <p>Path to the <code>.trivyignore</code> file.</p>"},{"location":"api/container.python/#methods_10","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.python/#add_dependencies_9","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_20","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_needs_9","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_20","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_parent_9","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.python/#parentrequired_9","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#add_tags_9","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_27","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#add_variables_9","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#variablesrequired_13","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#append_rules_9","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_22","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#append_scripts_9","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_25","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#assign_allow_failure_7","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#allow_failurerequired_18","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#assign_artifacts_9","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#artifactsrequired_11","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#assign_cache_9","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#cacherequired_11","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#assign_dependencies_7","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_21","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_image_7","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.python/#imagerequired_11","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#assign_needs_7","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_21","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_tags_7","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_28","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#copy_7","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.python/#extend_name_7","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.python/#namerequired_14","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_7","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.python/#stagerequired_21","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_value_7","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.python/#stagerequired_22","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#get_all_instance_names_9","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.python/#childoptional_9","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#is_equal_9","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.python/#comparablerequired_9","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/container.python/#prepend_rules_9","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_23","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#prepend_scripts_9","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_26","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#render_9","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.python/#properties_23","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>trivyignore_path</code> <code>str</code> Path to the <code>.trivyignore</code> file."},{"location":"api/container.python/#tagsrequired_29","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.python/#allow_failurerequired_19","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#namerequired_15","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#ordered_tagsrequired_9","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#parentsrequired_9","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#scriptsrequired_27","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#stagerequired_23","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#artifactsoptional_9","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#cacheoptional_9","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#dependenciesoptional_9","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#imageoptional_7","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/container.python/#needsoptional_9","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#originaloptional_7","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/container.python/#rulesoptional_7","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#variablesoptional_9","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#trivyignore_pathrequired","title":"<code>trivyignore_path</code><sup>Required</sup>","text":"<pre><code>trivyignore_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Path to the <code>.trivyignore</code> file.</p>"},{"location":"api/container.python/#trivyscanlocalimage","title":"TrivyScanLocalImage","text":"<ul> <li>Implements: ITrivyScanLocalImage</li> </ul> <p>This job scanns container images to find vulnerabilities.</p> <p>This job fails with exit code 1 if severities are found. The scan output is printed to stdout and uploaded to the artifacts of GitLab.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: trivy</li> <li>stage: check</li> <li>image: PredefinedImages.TRIVY</li> <li>artifacts: Path 'trivy.txt'</li> </ul>"},{"location":"api/container.python/#initializers_11","title":"Initializers","text":"<pre><code>from gcix import container\ncontainer.TrivyScanLocalImage(\ndebug: bool = None,\nexit_if_vulnerable: bool = None,\nimage_name: str = None,\nimage_path: str = None,\njob_name: str = None,\njob_stage: str = None,\noutput_format: str = None,\nseverity: str = None,\ntrivy_config: str = None,\nvulnerability_types: str = None\n)\n</code></pre> Name Type Description <code>debug</code> <code>bool</code> If trivy should run in debug mode. <code>exit_if_vulnerable</code> <code>bool</code> Exit code when vulnerabilities were found. <code>image_name</code> <code>str</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>image_path</code> <code>str</code> Path where to find the container image. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>output_format</code> <code>str</code> Scan output format, possible values (table, json). <code>severity</code> <code>str</code> Severities of vulnerabilities to be displayed (comma separated). <code>trivy_config</code> <code>str</code> Additional options to pass to <code>trivy</code> binary. <code>vulnerability_types</code> <code>str</code> List of vulnerability types (comma separated)."},{"location":"api/container.python/#debugoptional_1","title":"<code>debug</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: false</li> </ul> <p>If trivy should run in debug mode.</p>"},{"location":"api/container.python/#exit_if_vulnerableoptional_1","title":"<code>exit_if_vulnerable</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Exit code when vulnerabilities were found.</p> <p>If true exit code is 1 else 0.</p>"},{"location":"api/container.python/#image_nameoptional_11","title":"<code>image_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_PROJECT_NAME</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.python/#image_pathoptional_3","title":"<code>image_path</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_PROJECT_DIR</li> </ul> <p>Path where to find the container image.</p>"},{"location":"api/container.python/#job_nameoptional_21","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.python/#job_stageoptional_21","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.python/#output_formatoptional_1","title":"<code>output_format</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: \"table\"</li> </ul> <p>Scan output format, possible values (table, json).</p>"},{"location":"api/container.python/#severityoptional_1","title":"<code>severity</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\"</li> </ul> <p>Severities of vulnerabilities to be displayed (comma separated).</p>"},{"location":"api/container.python/#trivy_configoptional_1","title":"<code>trivy_config</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Additional options to pass to <code>trivy</code> binary.</p>"},{"location":"api/container.python/#vulnerability_typesoptional_1","title":"<code>vulnerability_types</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: \"os,library\"</li> </ul> <p>List of vulnerability types (comma separated).</p>"},{"location":"api/container.python/#methods_11","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.python/#add_dependencies_10","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_22","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_needs_10","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_22","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#add_parent_10","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.python/#parentrequired_10","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#add_tags_10","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_30","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#add_variables_10","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#variablesrequired_14","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#append_rules_10","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_24","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#append_scripts_10","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_28","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#assign_allow_failure_8","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#allow_failurerequired_20","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#assign_artifacts_10","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#artifactsrequired_12","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#assign_cache_10","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#cacherequired_12","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#assign_dependencies_8","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#dependenciesrequired_23","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_image_8","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.python/#imagerequired_12","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/container.python/#assign_needs_8","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#needsrequired_23","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#assign_tags_8","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#tagsrequired_31","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#copy_8","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.python/#extend_name_8","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.python/#namerequired_16","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_8","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.python/#stagerequired_24","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#extend_stage_value_8","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.python/#stagerequired_25","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#get_all_instance_names_10","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.python/#childoptional_10","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/container.python/#is_equal_10","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.python/#comparablerequired_10","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/container.python/#prepend_rules_10","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#rulesrequired_25","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#prepend_scripts_10","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/container.python/#scriptsrequired_29","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#render_10","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.python/#properties_24","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>debug</code> <code>bool</code> If trivy should run in debug mode. <code>exit_if_vulnerable</code> <code>bool</code> Exit code when vulnerabilities were found. <code>image_name</code> <code>str</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>image_path</code> <code>str</code> Path where to find the container image. <code>output_format</code> <code>str</code> Scan output format, possible values (table, json). <code>severity</code> <code>str</code> Severities of vulnerabilities to be displayed (comma separated). <code>vulnerability_types</code> <code>str</code> List of vulnerability types (comma separated). <code>trivy_config</code> <code>str</code> Additional options to pass to <code>trivy</code> binary."},{"location":"api/container.python/#tagsrequired_32","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.python/#allow_failurerequired_21","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/container.python/#namerequired_17","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#ordered_tagsrequired_10","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.python/#parentsrequired_10","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/container.python/#scriptsrequired_30","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/container.python/#stagerequired_26","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#artifactsoptional_10","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/container.python/#cacheoptional_10","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/container.python/#dependenciesoptional_10","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#imageoptional_8","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/container.python/#needsoptional_10","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/container.python/#originaloptional_8","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/container.python/#rulesoptional_8","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/container.python/#variablesoptional_10","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#debugrequired","title":"<code>debug</code><sup>Required</sup>","text":"<pre><code>debug: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>If trivy should run in debug mode.</p>"},{"location":"api/container.python/#exit_if_vulnerablerequired","title":"<code>exit_if_vulnerable</code><sup>Required</sup>","text":"<pre><code>exit_if_vulnerable: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Exit code when vulnerabilities were found.</p> <p>If true exit code is 1 else 0.</p>"},{"location":"api/container.python/#image_namerequired_8","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.python/#image_pathrequired_1","title":"<code>image_path</code><sup>Required</sup>","text":"<pre><code>image_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Path where to find the container image.</p>"},{"location":"api/container.python/#output_formatrequired","title":"<code>output_format</code><sup>Required</sup>","text":"<pre><code>output_format: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Scan output format, possible values (table, json).</p>"},{"location":"api/container.python/#severityrequired","title":"<code>severity</code><sup>Required</sup>","text":"<pre><code>severity: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Severities of vulnerabilities to be displayed (comma separated).</p>"},{"location":"api/container.python/#vulnerability_typesrequired","title":"<code>vulnerability_types</code><sup>Required</sup>","text":"<pre><code>vulnerability_types: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>List of vulnerability types (comma separated).</p>"},{"location":"api/container.python/#trivy_configoptional_2","title":"<code>trivy_config</code><sup>Optional</sup>","text":"<pre><code>trivy_config: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Additional options to pass to <code>trivy</code> binary.</p>"},{"location":"api/container.python/#protocols","title":"Protocols","text":""},{"location":"api/container.python/#ibuildcontainercollection","title":"IBuildContainerCollection","text":"<ul> <li>Implemented By: BuildContainerCollection, IBuildContainerCollection</li> </ul>"},{"location":"api/container.python/#properties_25","title":"Properties","text":"Name Type Description <code>crane_push_job</code> <code>CranePush</code> Crane push job. <code>dive_scan_job</code> <code>DiveScan</code> Dive scan job. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>do_crane_push</code> <code>bool</code> Set to <code>false</code> to skip the Crane push job. <code>do_dive_scan</code> <code>bool</code> Set to <code>false</code> to skip the Dive scan job. <code>do_trivyignore_check</code> <code>bool</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>do_trivy_scan</code> <code>bool</code> Set to <code>false</code> to skip the Trivy scan job. <code>image_name</code> <code>str</code> Image name with stage in the registry. <code>image_tag</code> <code>str</code> Image tag. <code>kaniko_execute_job</code> <code>KanikoExecute</code> Kaniko execute job. <code>registry</code> <code>typing.Union[str, Registry]</code> Container registry to push the image to. <code>trivy_ignore_file_check_job</code> <code>TrivyIgnoreFileCheck</code> Trivy ignore file check job. <code>trivy_scan_local_image_job</code> <code>TrivyScanLocalImage</code> Trivy scan local image job."},{"location":"api/container.python/#crane_push_jobrequired_2","title":"<code>crane_push_job</code><sup>Required</sup>","text":"<pre><code>crane_push_job: CranePush\n</code></pre> <ul> <li>Type: CranePush</li> </ul> <p>Crane push job.</p>"},{"location":"api/container.python/#dive_scan_jobrequired_1","title":"<code>dive_scan_job</code><sup>Required</sup>","text":"<pre><code>dive_scan_job: DiveScan\n</code></pre> <ul> <li>Type: DiveScan</li> </ul> <p>Dive scan job.</p>"},{"location":"api/container.python/#docker_client_configrequired_5","title":"<code>docker_client_config</code><sup>Required</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.python/#do_crane_pushrequired_1","title":"<code>do_crane_push</code><sup>Required</sup>","text":"<pre><code>do_crane_push: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Crane push job.</p>"},{"location":"api/container.python/#do_dive_scanrequired_2","title":"<code>do_dive_scan</code><sup>Required</sup>","text":"<pre><code>do_dive_scan: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.python/#do_trivyignore_checkrequired_2","title":"<code>do_trivyignore_check</code><sup>Required</sup>","text":"<pre><code>do_trivyignore_check: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.python/#do_trivy_scanrequired_2","title":"<code>do_trivy_scan</code><sup>Required</sup>","text":"<pre><code>do_trivy_scan: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.python/#image_namerequired_9","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/imageName.</p>"},{"location":"api/container.python/#image_tagrequired_7","title":"<code>image_tag</code><sup>Required</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciCommitRefName</li> </ul> <p>Image tag.</p> <p>Depending of the build it defaults either to the git tag or to the actual branch name.</p>"},{"location":"api/container.python/#kaniko_execute_jobrequired_1","title":"<code>kaniko_execute_job</code><sup>Required</sup>","text":"<pre><code>kaniko_execute_job: KanikoExecute\n</code></pre> <ul> <li>Type: KanikoExecute</li> </ul> <p>Kaniko execute job.</p>"},{"location":"api/container.python/#registryrequired_6","title":"<code>registry</code><sup>Required</sup>","text":"<pre><code>registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.python/#trivy_ignore_file_check_jobrequired_1","title":"<code>trivy_ignore_file_check_job</code><sup>Required</sup>","text":"<pre><code>trivy_ignore_file_check_job: TrivyIgnoreFileCheck\n</code></pre> <ul> <li>Type: TrivyIgnoreFileCheck</li> </ul> <p>Trivy ignore file check job.</p>"},{"location":"api/container.python/#trivy_scan_local_image_jobrequired_1","title":"<code>trivy_scan_local_image_job</code><sup>Required</sup>","text":"<pre><code>trivy_scan_local_image_job: TrivyScanLocalImage\n</code></pre> <ul> <li>Type: TrivyScanLocalImage</li> </ul> <p>Trivy scan local image job.</p>"},{"location":"api/container.python/#icopycontainercollection","title":"ICopyContainerCollection","text":"<ul> <li>Implemented By: CopyContainerCollection, ICopyContainerCollection</li> </ul>"},{"location":"api/container.python/#properties_26","title":"Properties","text":"Name Type Description <code>crane_pull_job</code> <code>CranePull</code> CranPull job. <code>crane_push_job</code> <code>CranePush</code> No description. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>do_dive_scan</code> <code>bool</code> Set to <code>false</code> to skip the Dive scan job. <code>do_trivyignore_check</code> <code>bool</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>do_trivy_scan</code> <code>bool</code> Set to <code>false</code> to skip the Trivy scan job. <code>dst_registry</code> <code>typing.Union[str, Registry]</code> Container registry to push the image to. <code>image_name</code> <code>str</code> Image name with stage in the registry. <code>image_tag</code> <code>str</code> Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>. <code>src_registry</code> <code>typing.Union[str, Registry]</code> Container registry to pull the image from. <code>dive_scan_job</code> <code>DiveScan</code> Dive scan job. <code>trivy_ignore_file_check_job</code> <code>TrivyIgnoreFileCheck</code> Trivy ignore file check job. <code>trivy_scan_local_image_job</code> <code>TrivyScanLocalImage</code> Trivy scan local image job."},{"location":"api/container.python/#crane_pull_jobrequired_1","title":"<code>crane_pull_job</code><sup>Required</sup>","text":"<pre><code>crane_pull_job: CranePull\n</code></pre> <ul> <li>Type: CranePull</li> </ul> <p>CranPull job.</p>"},{"location":"api/container.python/#crane_push_jobrequired_3","title":"<code>crane_push_job</code><sup>Required</sup>","text":"<pre><code>crane_push_job: CranePush\n</code></pre> <ul> <li>Type: CranePush</li> </ul>"},{"location":"api/container.python/#docker_client_configrequired_6","title":"<code>docker_client_config</code><sup>Required</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.python/#do_dive_scanrequired_3","title":"<code>do_dive_scan</code><sup>Required</sup>","text":"<pre><code>do_dive_scan: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.python/#do_trivyignore_checkrequired_3","title":"<code>do_trivyignore_check</code><sup>Required</sup>","text":"<pre><code>do_trivyignore_check: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.python/#do_trivy_scanrequired_3","title":"<code>do_trivy_scan</code><sup>Required</sup>","text":"<pre><code>do_trivy_scan: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.python/#dst_registryrequired_7","title":"<code>dst_registry</code><sup>Required</sup>","text":"<pre><code>dst_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.python/#image_namerequired_10","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/image_name.</p>"},{"location":"api/container.python/#image_tagrequired_8","title":"<code>image_tag</code><sup>Required</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>.</p>"},{"location":"api/container.python/#src_registryrequired_7","title":"<code>src_registry</code><sup>Required</sup>","text":"<pre><code>src_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to pull the image from.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.python/#dive_scan_joboptional_1","title":"<code>dive_scan_job</code><sup>Optional</sup>","text":"<pre><code>dive_scan_job: DiveScan\n</code></pre> <ul> <li>Type: DiveScan</li> </ul> <p>Dive scan job.</p>"},{"location":"api/container.python/#trivy_ignore_file_check_joboptional_1","title":"<code>trivy_ignore_file_check_job</code><sup>Optional</sup>","text":"<pre><code>trivy_ignore_file_check_job: TrivyIgnoreFileCheck\n</code></pre> <ul> <li>Type: TrivyIgnoreFileCheck</li> </ul> <p>Trivy ignore file check job.</p>"},{"location":"api/container.python/#trivy_scan_local_image_joboptional_1","title":"<code>trivy_scan_local_image_job</code><sup>Optional</sup>","text":"<pre><code>trivy_scan_local_image_job: TrivyScanLocalImage\n</code></pre> <ul> <li>Type: TrivyScanLocalImage</li> </ul> <p>Trivy scan local image job.</p>"},{"location":"api/container.python/#icranecopy","title":"ICraneCopy","text":"<ul> <li>Implemented By: CraneCopy, ICraneCopy</li> </ul>"},{"location":"api/container.python/#properties_27","title":"Properties","text":"Name Type Description <code>dst_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to copy container image to. <code>src_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to copy container image from. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries."},{"location":"api/container.python/#dst_registryrequired_8","title":"<code>dst_registry</code><sup>Required</sup>","text":"<pre><code>dst_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.python/#src_registryrequired_8","title":"<code>src_registry</code><sup>Required</sup>","text":"<pre><code>src_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to copy container image from.</p>"},{"location":"api/container.python/#docker_client_configoptional_13","title":"<code>docker_client_config</code><sup>Optional</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries.</p>"},{"location":"api/container.python/#icranepull","title":"ICranePull","text":"<ul> <li>Implemented By: CranePull, ICranePull</li> </ul>"},{"location":"api/container.python/#properties_28","title":"Properties","text":"Name Type Description <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>image_name</code> <code>str</code> Container image with namespace to pull from <code>srcRegistry</code>. <code>image_tag</code> <code>str</code> Tag of the image which will be pulled. <code>src_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to pull container image from. <code>tar_path</code> <code>str</code> Path where to save the container image tarball."},{"location":"api/container.python/#docker_client_configrequired_7","title":"<code>docker_client_config</code><sup>Required</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.python/#image_namerequired_11","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Container image with namespace to pull from <code>srcRegistry</code>.</p>"},{"location":"api/container.python/#image_tagrequired_9","title":"<code>image_tag</code><sup>Required</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: latest</li> </ul> <p>Tag of the image which will be pulled.</p>"},{"location":"api/container.python/#src_registryrequired_9","title":"<code>src_registry</code><sup>Required</sup>","text":"<pre><code>src_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to pull container image from.</p>"},{"location":"api/container.python/#tar_pathrequired_2","title":"<code>tar_path</code><sup>Required</sup>","text":"<pre><code>tar_path: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Path where to save the container image tarball.</p>"},{"location":"api/container.python/#icranepush","title":"ICranePush","text":"<ul> <li>Implemented By: CranePush, ICranePush</li> </ul>"},{"location":"api/container.python/#properties_29","title":"Properties","text":"Name Type Description <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>dst_registry</code> <code>typing.Union[str, Registry]</code> Registry URL to copy container image to. <code>image_name</code> <code>str</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>image_tag</code> <code>str</code> The tag the image will be tagged with. <code>tar_path</code> <code>str</code> Path where to find the container image tarball."},{"location":"api/container.python/#docker_client_configrequired_8","title":"<code>docker_client_config</code><sup>Required</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.python/#dst_registryrequired_9","title":"<code>dst_registry</code><sup>Required</sup>","text":"<pre><code>dst_registry: typing.Union[str, Registry]\n</code></pre> <ul> <li>Type: typing.Union[str, Registry]</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.python/#image_namerequired_12","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.python/#image_tagrequired_10","title":"<code>image_tag</code><sup>Required</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciCommitTag</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.python/#tar_pathrequired_3","title":"<code>tar_path</code><sup>Required</sup>","text":"<pre><code>tar_path: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Path where to find the container image tarball.</p>"},{"location":"api/container.python/#idivescan","title":"IDiveScan","text":"<ul> <li>Implemented By: DiveScan, IDiveScan</li> </ul>"},{"location":"api/container.python/#properties_30","title":"Properties","text":"Name Type Description <code>highest_user_wasted_percent</code> <code>typing.Union[int, float]</code> Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail. <code>ignore_errors</code> <code>bool</code> Ignore image parsing errors and run the analysis anyway. <code>image_name</code> <code>str</code> Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>. <code>image_path</code> <code>str</code> Path to the image can be either a remote container registry, as well as a local path to an image. <code>lowest_efficiency</code> <code>typing.Union[int, float]</code> Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail. <code>source</code> <code>str</code> The container engine to fetch the image from. <code>highest_wasted_bytes</code> <code>typing.Union[int, float]</code> Highest allowable bytes wasted, otherwise CI validation will fail."},{"location":"api/container.python/#highest_user_wasted_percentrequired_1","title":"<code>highest_user_wasted_percent</code><sup>Required</sup>","text":"<pre><code>highest_user_wasted_percent: typing.Union[int, float]\n</code></pre> <ul> <li>Type: typing.Union[int, float]</li> <li>Default: 0.1</li> </ul> <p>Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.python/#ignore_errorsrequired_1","title":"<code>ignore_errors</code><sup>Required</sup>","text":"<pre><code>ignore_errors: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: false</li> </ul> <p>Ignore image parsing errors and run the analysis anyway.</p>"},{"location":"api/container.python/#image_namerequired_13","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>.</p>"},{"location":"api/container.python/#image_pathrequired_2","title":"<code>image_path</code><sup>Required</sup>","text":"<pre><code>image_path: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectPath</li> </ul> <p>Path to the image can be either a remote container registry, as well as a local path to an image.</p>"},{"location":"api/container.python/#lowest_efficiencyrequired_1","title":"<code>lowest_efficiency</code><sup>Required</sup>","text":"<pre><code>lowest_efficiency: typing.Union[int, float]\n</code></pre> <ul> <li>Type: typing.Union[int, float]</li> <li>Default: 0.9</li> </ul> <p>Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.python/#sourcerequired_1","title":"<code>source</code><sup>Required</sup>","text":"<pre><code>source: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: docker-archive</li> </ul> <p>The container engine to fetch the image from.</p> <p>Allowed values: docker, podman, docker-archive</p>"},{"location":"api/container.python/#highest_wasted_bytesoptional_3","title":"<code>highest_wasted_bytes</code><sup>Optional</sup>","text":"<pre><code>highest_wasted_bytes: typing.Union[int, float]\n</code></pre> <ul> <li>Type: typing.Union[int, float]</li> </ul> <p>Highest allowable bytes wasted, otherwise CI validation will fail.</p>"},{"location":"api/container.python/#idockerbuild","title":"IDockerBuild","text":"<ul> <li>Implemented By: DockerBuild, IDockerBuild</li> </ul>"},{"location":"api/container.python/#properties_31","title":"Properties","text":"Name Type Description <code>context</code> <code>str</code> The Docker build context (the directory containing the Dockerfile). <code>repository</code> <code>str</code> The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>. <code>tag</code> <code>str</code> A Docker image tag applied to the image."},{"location":"api/container.python/#contextrequired_2","title":"<code>context</code><sup>Required</sup>","text":"<pre><code>context: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: <code>.</code></li> </ul> <p>The Docker build context (the directory containing the Dockerfile).</p>"},{"location":"api/container.python/#repositoryrequired_3","title":"<code>repository</code><sup>Required</sup>","text":"<pre><code>repository: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>.</p>"},{"location":"api/container.python/#tagrequired_2","title":"<code>tag</code><sup>Required</sup>","text":"<pre><code>tag: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"latest\"</li> </ul> <p>A Docker image tag applied to the image.</p>"},{"location":"api/container.python/#idockerclientconfig","title":"IDockerClientConfig","text":"<ul> <li>Implemented By: DockerClientConfig, IDockerClientConfig</li> </ul>"},{"location":"api/container.python/#properties_32","title":"Properties","text":"Name Type Description <code>config</code> <code>IDockerClientConfigType</code> Docker client configuration. <code>config_file_path</code> <code>str</code> Docker client config path."},{"location":"api/container.python/#configrequired_1","title":"<code>config</code><sup>Required</sup>","text":"<pre><code>config: IDockerClientConfigType\n</code></pre> <ul> <li>Type: IDockerClientConfigType</li> </ul> <p>Docker client configuration.</p>"},{"location":"api/container.python/#config_file_pathrequired_1","title":"<code>config_file_path</code><sup>Required</sup>","text":"<pre><code>config_file_path: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: $HOME/.docker/config.json</li> </ul> <p>Docker client config path.</p>"},{"location":"api/container.python/#idockerclientconfigtype","title":"IDockerClientConfigType","text":"<ul> <li>Implemented By: IDockerClientConfigType</li> </ul>"},{"location":"api/container.python/#properties_33","title":"Properties","text":"Name Type Description <code>auths</code> <code>typing.Mapping[typing.Any]</code> No description. <code>cred_helpers</code> <code>typing.Mapping[str]</code> No description. <code>creds_store</code> <code>str</code> No description. <code>raw_input</code> <code>typing.Mapping[str]</code> No description."},{"location":"api/container.python/#authsoptional","title":"<code>auths</code><sup>Optional</sup>","text":"<pre><code>auths: typing.Mapping[typing.Any]\n</code></pre> <ul> <li>Type: typing.Mapping[typing.Any]</li> </ul>"},{"location":"api/container.python/#cred_helpersoptional","title":"<code>cred_helpers</code><sup>Optional</sup>","text":"<pre><code>cred_helpers: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#creds_storeoptional","title":"<code>creds_store</code><sup>Optional</sup>","text":"<pre><code>creds_store: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/container.python/#raw_inputoptional","title":"<code>raw_input</code><sup>Optional</sup>","text":"<pre><code>raw_input: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/container.python/#idockerpush","title":"IDockerPush","text":"<ul> <li>Implemented By: DockerPush, IDockerPush</li> </ul>"},{"location":"api/container.python/#properties_34","title":"Properties","text":"Name Type Description <code>container_image</code> <code>str</code> The name of the Docker image to push to the <code>registry</code>. <code>registry</code> <code>str</code> The Docker registry the image should be pushed to. <code>tag</code> <code>str</code> The Docker image tag that should be pushed to the <code>registry</code>. <code>login_env_var</code> <code>str</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here. <code>user_env_var</code> <code>str</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here."},{"location":"api/container.python/#container_imagerequired_3","title":"<code>container_image</code><sup>Required</sup>","text":"<pre><code>container_image: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Docker image to push to the <code>registry</code>.</p>"},{"location":"api/container.python/#registryrequired_7","title":"<code>registry</code><sup>Required</sup>","text":"<pre><code>registry: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: index.docker.io/v1</li> </ul> <p>The Docker registry the image should be pushed to.</p>"},{"location":"api/container.python/#tagrequired_3","title":"<code>tag</code><sup>Required</sup>","text":"<pre><code>tag: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: <code>latest</code></li> </ul> <p>The Docker image tag that should be pushed to the <code>registry</code>.</p>"},{"location":"api/container.python/#login_env_varoptional_3","title":"<code>login_env_var</code><sup>Optional</sup>","text":"<pre><code>login_env_var: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.python/#user_env_varoptional_3","title":"<code>user_env_var</code><sup>Optional</sup>","text":"<pre><code>user_env_var: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.python/#ikanikoexecute","title":"IKanikoExecute","text":"<ul> <li>Implemented By: KanikoExecute, IKanikoExecute</li> </ul>"},{"location":"api/container.python/#properties_35","title":"Properties","text":"Name Type Description <code>context</code> <code>str</code> Context which will be send to kaniko. <code>docker_client_config</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>dockerfile</code> <code>str</code> Name of the dockerfile to use. <code>enable_push</code> <code>bool</code> Enable push to container registry, disabled to allow subsequent jobs to act on container tarball. <code>image_name</code> <code>str</code> Image name which will be created. <code>image_tag</code> <code>str</code> The tag the image will be tagged with. <code>verbosity</code> <code>str</code> Verbosity of kaniko logging. <code>build_args</code> <code>typing.Mapping[typing.Any]</code> Container build arguments, used to instrument the container image build. <code>build_target</code> <code>str</code> For container multistage builds name of the build stage you want to create. <code>registries</code> <code>typing.Union[typing.List[str], typing.List[Registry]]</code> List of container registries to push created image to. <code>tar_path</code> <code>str</code> Container images created by kaniko are tarball files."},{"location":"api/container.python/#contextrequired_3","title":"<code>context</code><sup>Required</sup>","text":"<pre><code>context: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_PROJECT_DIR</li> </ul> <p>Context which will be send to kaniko.</p>"},{"location":"api/container.python/#docker_client_configrequired_9","title":"<code>docker_client_config</code><sup>Required</sup>","text":"<pre><code>docker_client_config: DockerClientConfig\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.python/#dockerfilerequired_1","title":"<code>dockerfile</code><sup>Required</sup>","text":"<pre><code>dockerfile: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"Dockerfile\"</li> </ul> <p>Name of the dockerfile to use.</p> <p>File is relative to context.</p>"},{"location":"api/container.python/#enable_pushrequired_1","title":"<code>enable_push</code><sup>Required</sup>","text":"<pre><code>enable_push: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: false</li> </ul> <p>Enable push to container registry, disabled to allow subsequent jobs to act on container tarball.</p>"},{"location":"api/container.python/#image_namerequired_14","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_PROJECT_NAME.</li> </ul> <p>Image name which will be created.</p>"},{"location":"api/container.python/#image_tagrequired_11","title":"<code>image_tag</code><sup>Required</sup>","text":"<pre><code>image_tag: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_COMMIT_TAG</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.python/#verbosityrequired_1","title":"<code>verbosity</code><sup>Required</sup>","text":"<pre><code>verbosity: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"info\"</li> </ul> <p>Verbosity of kaniko logging.</p>"},{"location":"api/container.python/#build_argsoptional_3","title":"<code>build_args</code><sup>Optional</sup>","text":"<pre><code>build_args: typing.Mapping[typing.Any]\n</code></pre> <ul> <li>Type: typing.Mapping[typing.Any]</li> </ul> <p>Container build arguments, used to instrument the container image build.</p>"},{"location":"api/container.python/#build_targetoptional_3","title":"<code>build_target</code><sup>Optional</sup>","text":"<pre><code>build_target: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>For container multistage builds name of the build stage you want to create.</p> <p>Image tag will be appended with the build_target. e.g. latest-buildtarget.</p>"},{"location":"api/container.python/#registriesoptional_3","title":"<code>registries</code><sup>Optional</sup>","text":"<pre><code>registries: typing.Union[typing.List[str], typing.List[Registry]]\n</code></pre> <ul> <li>Type: typing.Union[typing.List[str], typing.List[Registry]]</li> </ul> <p>List of container registries to push created image to.</p>"},{"location":"api/container.python/#tar_pathoptional_7","title":"<code>tar_path</code><sup>Optional</sup>","text":"<pre><code>tar_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Container images created by kaniko are tarball files.</p> <p>This is the path where to store the image, will be named with suffix <code>.tar</code>. This path will be created if not present.</p>"},{"location":"api/container.python/#itrivyignorefilecheck","title":"ITrivyIgnoreFileCheck","text":"<ul> <li>Implemented By: TrivyIgnoreFileCheck, ITrivyIgnoreFileCheck</li> </ul>"},{"location":"api/container.python/#properties_36","title":"Properties","text":"Name Type Description <code>trivyignore_path</code> <code>str</code> Path to the <code>.trivyignore</code> file."},{"location":"api/container.python/#trivyignore_pathrequired_1","title":"<code>trivyignore_path</code><sup>Required</sup>","text":"<pre><code>trivyignore_path: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.ciProjectDir/.trivyignore</li> </ul> <p>Path to the <code>.trivyignore</code> file.</p>"},{"location":"api/container.python/#itrivyscanlocalimage","title":"ITrivyScanLocalImage","text":"<ul> <li>Implemented By: TrivyScanLocalImage, ITrivyScanLocalImage</li> </ul>"},{"location":"api/container.python/#properties_37","title":"Properties","text":"Name Type Description <code>debug</code> <code>bool</code> If trivy should run in debug mode. <code>exit_if_vulnerable</code> <code>bool</code> Exit code when vulnerabilities were found. <code>image_name</code> <code>str</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>image_path</code> <code>str</code> Path where to find the container image. <code>output_format</code> <code>str</code> Scan output format, possible values (table, json). <code>severity</code> <code>str</code> Severities of vulnerabilities to be displayed (comma separated). <code>vulnerability_types</code> <code>str</code> List of vulnerability types (comma separated). <code>trivy_config</code> <code>str</code> Additional options to pass to <code>trivy</code> binary."},{"location":"api/container.python/#debugrequired_1","title":"<code>debug</code><sup>Required</sup>","text":"<pre><code>debug: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: false</li> </ul> <p>If trivy should run in debug mode.</p>"},{"location":"api/container.python/#exit_if_vulnerablerequired_1","title":"<code>exit_if_vulnerable</code><sup>Required</sup>","text":"<pre><code>exit_if_vulnerable: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul> <p>Exit code when vulnerabilities were found.</p> <p>If true exit code is 1 else 0.</p>"},{"location":"api/container.python/#image_namerequired_15","title":"<code>image_name</code><sup>Required</sup>","text":"<pre><code>image_name: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_PROJECT_NAME</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.python/#image_pathrequired_3","title":"<code>image_path</code><sup>Required</sup>","text":"<pre><code>image_path: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: PredefinedVariables.CI_PROJECT_DIR</li> </ul> <p>Path where to find the container image.</p>"},{"location":"api/container.python/#output_formatrequired_1","title":"<code>output_format</code><sup>Required</sup>","text":"<pre><code>output_format: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"table\"</li> </ul> <p>Scan output format, possible values (table, json).</p>"},{"location":"api/container.python/#severityrequired_1","title":"<code>severity</code><sup>Required</sup>","text":"<pre><code>severity: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\"</li> </ul> <p>Severities of vulnerabilities to be displayed (comma separated).</p>"},{"location":"api/container.python/#vulnerability_typesrequired_1","title":"<code>vulnerability_types</code><sup>Required</sup>","text":"<pre><code>vulnerability_types: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"os,library\"</li> </ul> <p>List of vulnerability types (comma separated).</p>"},{"location":"api/container.python/#trivy_configoptional_3","title":"<code>trivy_config</code><sup>Optional</sup>","text":"<pre><code>trivy_config: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Additional options to pass to <code>trivy</code> binary.</p>"},{"location":"api/container.typescript/","title":"<code>container</code> Submodule","text":""},{"location":"api/container.typescript/#structs","title":"Structs","text":""},{"location":"api/container.typescript/#awsregistryprops","title":"AWSRegistryProps","text":""},{"location":"api/container.typescript/#initializer","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst aWSRegistryProps: container.AWSRegistryProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties","title":"Properties","text":"Name Type Description <code>accountId</code> <code>string</code> AWS account id. <code>region</code> <code>string</code> AWS region where the ECR repository lives in."},{"location":"api/container.typescript/#accountidoptional","title":"<code>accountId</code><sup>Optional</sup>","text":"<pre><code>public readonly accountId: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: AWSAccount.awsAccountId()</li> </ul> <p>AWS account id.</p>"},{"location":"api/container.typescript/#regionoptional","title":"<code>region</code><sup>Optional</sup>","text":"<pre><code>public readonly region: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: AWSAccount.awsRegion()</li> </ul> <p>AWS region where the ECR repository lives in.</p>"},{"location":"api/container.typescript/#buildcontainercollectionprops","title":"BuildContainerCollectionProps","text":""},{"location":"api/container.typescript/#initializer_1","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst buildContainerCollectionProps: container.BuildContainerCollectionProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties_1","title":"Properties","text":"Name Type Description <code>registry</code> <code>string | Registry</code> Container registry to push the image to. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>doCranePush</code> <code>boolean</code> Set to <code>false</code> to skip the Crane push job. <code>doDiveScan</code> <code>boolean</code> Set to <code>false</code> to skip the Dive scan job. <code>doTrivyignoreCheck</code> <code>boolean</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>doTrivyScan</code> <code>boolean</code> Set to <code>false</code> to skip the Trivy scan job. <code>imageName</code> <code>string</code> Image name with stage in the registry. <code>imageTag</code> <code>string</code> Image tag. <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job."},{"location":"api/container.typescript/#registryrequired","title":"<code>registry</code><sup>Required</sup>","text":"<pre><code>public readonly registry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.typescript/#dockerclientconfigoptional","title":"<code>dockerClientConfig</code><sup>Optional</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.typescript/#docranepushoptional","title":"<code>doCranePush</code><sup>Optional</sup>","text":"<pre><code>public readonly doCranePush: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Crane push job.</p>"},{"location":"api/container.typescript/#dodivescanoptional","title":"<code>doDiveScan</code><sup>Optional</sup>","text":"<pre><code>public readonly doDiveScan: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.typescript/#dotrivyignorecheckoptional","title":"<code>doTrivyignoreCheck</code><sup>Optional</sup>","text":"<pre><code>public readonly doTrivyignoreCheck: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.typescript/#dotrivyscanoptional","title":"<code>doTrivyScan</code><sup>Optional</sup>","text":"<pre><code>public readonly doTrivyScan: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.typescript/#imagenameoptional","title":"<code>imageName</code><sup>Optional</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/imageName.</p>"},{"location":"api/container.typescript/#imagetagoptional","title":"<code>imageTag</code><sup>Optional</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciCommitRefName</li> </ul> <p>Image tag.</p> <p>Depending of the build it defaults either to the git tag or to the actual branch name.</p>"},{"location":"api/container.typescript/#jobnameoptional","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.typescript/#jobstageoptional","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.typescript/#copycontainercollectionprops","title":"CopyContainerCollectionProps","text":""},{"location":"api/container.typescript/#initializer_2","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst copyContainerCollectionProps: container.CopyContainerCollectionProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties_2","title":"Properties","text":"Name Type Description <code>imageName</code> <code>string</code> Image name with stage in the registry. <code>imageTag</code> <code>string</code> Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>doDiveScan</code> <code>boolean</code> Set to <code>false</code> to skip the Dive scan job. <code>doTrivyignoreCheck</code> <code>boolean</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>doTrivyScan</code> <code>boolean</code> Set to <code>false</code> to skip the Trivy scan job. <code>dstRegistry</code> <code>string | Registry</code> Container registry to push the image to. <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>srcRegistry</code> <code>string | Registry</code> Container registry to pull the image from."},{"location":"api/container.typescript/#imagenamerequired","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/image_name.</p>"},{"location":"api/container.typescript/#imagetagrequired","title":"<code>imageTag</code><sup>Required</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>.</p>"},{"location":"api/container.typescript/#dockerclientconfigoptional_1","title":"<code>dockerClientConfig</code><sup>Optional</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.typescript/#dodivescanoptional_1","title":"<code>doDiveScan</code><sup>Optional</sup>","text":"<pre><code>public readonly doDiveScan: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.typescript/#dotrivyignorecheckoptional_1","title":"<code>doTrivyignoreCheck</code><sup>Optional</sup>","text":"<pre><code>public readonly doTrivyignoreCheck: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.typescript/#dotrivyscanoptional_1","title":"<code>doTrivyScan</code><sup>Optional</sup>","text":"<pre><code>public readonly doTrivyScan: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.typescript/#dstregistryoptional","title":"<code>dstRegistry</code><sup>Optional</sup>","text":"<pre><code>public readonly dstRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.typescript/#jobnameoptional_1","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.typescript/#jobstageoptional_1","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.typescript/#srcregistryoptional","title":"<code>srcRegistry</code><sup>Optional</sup>","text":"<pre><code>public readonly srcRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to pull the image from.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.typescript/#cranecopyprops","title":"CraneCopyProps","text":""},{"location":"api/container.typescript/#initializer_3","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst craneCopyProps: container.CraneCopyProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties_3","title":"Properties","text":"Name Type Description <code>dstRegistry</code> <code>string | Registry</code> Registry URL to copy container image to. <code>srcRegistry</code> <code>string | Registry</code> Registry URL to copy container image from. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries. <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job."},{"location":"api/container.typescript/#dstregistryrequired","title":"<code>dstRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly dstRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.typescript/#srcregistryrequired","title":"<code>srcRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly srcRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Registry URL to copy container image from.</p>"},{"location":"api/container.typescript/#dockerclientconfigoptional_2","title":"<code>dockerClientConfig</code><sup>Optional</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries.</p>"},{"location":"api/container.typescript/#jobnameoptional_2","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.typescript/#jobstageoptional_2","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.typescript/#cranepullprops","title":"CranePullProps","text":""},{"location":"api/container.typescript/#initializer_4","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst cranePullProps: container.CranePullProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties_4","title":"Properties","text":"Name Type Description <code>srcRegistry</code> <code>string | Registry</code> Registry URL to pull container image from. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>imageName</code> <code>string</code> Container image with namespace to pull from <code>srcRegistry</code>. <code>imageTag</code> <code>string</code> Tag of the image which will be pulled. <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>tarPath</code> <code>string</code> Path where to save the container image tarball."},{"location":"api/container.typescript/#srcregistryrequired_1","title":"<code>srcRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly srcRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Registry URL to pull container image from.</p>"},{"location":"api/container.typescript/#dockerclientconfigoptional_3","title":"<code>dockerClientConfig</code><sup>Optional</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.typescript/#imagenameoptional_1","title":"<code>imageName</code><sup>Optional</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Container image with namespace to pull from <code>srcRegistry</code>.</p>"},{"location":"api/container.typescript/#imagetagoptional_1","title":"<code>imageTag</code><sup>Optional</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: latest</li> </ul> <p>Tag of the image which will be pulled.</p>"},{"location":"api/container.typescript/#jobnameoptional_3","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.typescript/#jobstageoptional_3","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.typescript/#tarpathoptional","title":"<code>tarPath</code><sup>Optional</sup>","text":"<pre><code>public readonly tarPath: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Path where to save the container image tarball.</p>"},{"location":"api/container.typescript/#cranepushprops","title":"CranePushProps","text":""},{"location":"api/container.typescript/#initializer_5","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst cranePushProps: container.CranePushProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties_5","title":"Properties","text":"Name Type Description <code>dstRegistry</code> <code>string | Registry</code> Registry URL to copy container image to. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>imageName</code> <code>string</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>imageTag</code> <code>string</code> The tag the image will be tagged with. <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>tarPath</code> <code>string</code> Path where to find the container image tarball."},{"location":"api/container.typescript/#dstregistryrequired_1","title":"<code>dstRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly dstRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.typescript/#dockerclientconfigoptional_4","title":"<code>dockerClientConfig</code><sup>Optional</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.typescript/#imagenameoptional_2","title":"<code>imageName</code><sup>Optional</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.typescript/#imagetagoptional_2","title":"<code>imageTag</code><sup>Optional</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciCommitTag</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.typescript/#jobnameoptional_4","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.typescript/#jobstageoptional_4","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.typescript/#tarpathoptional_1","title":"<code>tarPath</code><sup>Optional</sup>","text":"<pre><code>public readonly tarPath: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Path where to find the container image tarball.</p>"},{"location":"api/container.typescript/#divescanprops","title":"DiveScanProps","text":""},{"location":"api/container.typescript/#initializer_6","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst diveScanProps: container.DiveScanProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties_6","title":"Properties","text":"Name Type Description <code>highestUserWastedPercent</code> <code>number</code> Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail. <code>highestWastedBytes</code> <code>number</code> Highest allowable bytes wasted, otherwise CI validation will fail. <code>ignoreErrors</code> <code>boolean</code> Ignore image parsing errors and run the analysis anyway. <code>imageName</code> <code>string</code> Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>. <code>imagePath</code> <code>string</code> Path to the image can be either a remote container registry, as well as a local path to an image. <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>lowestEfficiency</code> <code>number</code> Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail. <code>source</code> <code>string</code> The container engine to fetch the image from."},{"location":"api/container.typescript/#highestuserwastedpercentoptional","title":"<code>highestUserWastedPercent</code><sup>Optional</sup>","text":"<pre><code>public readonly highestUserWastedPercent: number;\n</code></pre> <ul> <li>Type: number</li> <li>Default: 0.1</li> </ul> <p>Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.typescript/#highestwastedbytesoptional","title":"<code>highestWastedBytes</code><sup>Optional</sup>","text":"<pre><code>public readonly highestWastedBytes: number;\n</code></pre> <ul> <li>Type: number</li> </ul> <p>Highest allowable bytes wasted, otherwise CI validation will fail.</p>"},{"location":"api/container.typescript/#ignoreerrorsoptional","title":"<code>ignoreErrors</code><sup>Optional</sup>","text":"<pre><code>public readonly ignoreErrors: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: false</li> </ul> <p>Ignore image parsing errors and run the analysis anyway.</p>"},{"location":"api/container.typescript/#imagenameoptional_3","title":"<code>imageName</code><sup>Optional</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>.</p>"},{"location":"api/container.typescript/#imagepathoptional","title":"<code>imagePath</code><sup>Optional</sup>","text":"<pre><code>public readonly imagePath: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectPath</li> </ul> <p>Path to the image can be either a remote container registry, as well as a local path to an image.</p>"},{"location":"api/container.typescript/#jobnameoptional_5","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.typescript/#jobstageoptional_5","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.typescript/#lowestefficiencyoptional","title":"<code>lowestEfficiency</code><sup>Optional</sup>","text":"<pre><code>public readonly lowestEfficiency: number;\n</code></pre> <ul> <li>Type: number</li> <li>Default: 0.9</li> </ul> <p>Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.typescript/#sourceoptional","title":"<code>source</code><sup>Optional</sup>","text":"<pre><code>public readonly source: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"docker-archive</li> </ul> <p>The container engine to fetch the image from.</p> <p>Allowed values: docker, podman, docker-archive</p>"},{"location":"api/container.typescript/#dockerbuildprops","title":"DockerBuildProps","text":""},{"location":"api/container.typescript/#initializer_7","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst dockerBuildProps: container.DockerBuildProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties_7","title":"Properties","text":"Name Type Description <code>repository</code> <code>string</code> The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>. <code>context</code> <code>string</code> The Docker build context (the directory containing the Dockerfile). <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>tag</code> <code>string</code> A Docker image tag applied to the image."},{"location":"api/container.typescript/#repositoryrequired","title":"<code>repository</code><sup>Required</sup>","text":"<pre><code>public readonly repository: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>.</p>"},{"location":"api/container.typescript/#contextoptional","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>public readonly context: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: <code>.</code></li> </ul> <p>The Docker build context (the directory containing the Dockerfile).</p>"},{"location":"api/container.typescript/#jobnameoptional_6","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.typescript/#jobstageoptional_6","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.typescript/#tagoptional","title":"<code>tag</code><sup>Optional</sup>","text":"<pre><code>public readonly tag: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>A Docker image tag applied to the image.</p> <p>If not set docker uses <code>latest</code></p>"},{"location":"api/container.typescript/#dockerclientconfigprops","title":"DockerClientConfigProps","text":""},{"location":"api/container.typescript/#initializer_8","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst dockerClientConfigProps: container.DockerClientConfigProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties_8","title":"Properties","text":"Name Type Description <code>configFilePath</code> <code>string</code> Docker client config path."},{"location":"api/container.typescript/#configfilepathoptional","title":"<code>configFilePath</code><sup>Optional</sup>","text":"<pre><code>public readonly configFilePath: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: $HOME/.docker/config.json</li> </ul> <p>Docker client config path.</p>"},{"location":"api/container.typescript/#dockerpushprops","title":"DockerPushProps","text":""},{"location":"api/container.typescript/#initializer_9","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst dockerPushProps: container.DockerPushProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties_9","title":"Properties","text":"Name Type Description <code>containerImage</code> <code>string</code> The name of the Docker image to push to the <code>registry</code>. <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>loginEnvVar</code> <code>string</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here. <code>registry</code> <code>string</code> The Docker registry the image should be pushed to. <code>tag</code> <code>string</code> The Docker image tag that should be pushed to the <code>registry</code>. <code>userEnvVar</code> <code>string</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here."},{"location":"api/container.typescript/#containerimagerequired","title":"<code>containerImage</code><sup>Required</sup>","text":"<pre><code>public readonly containerImage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Docker image to push to the <code>registry</code>.</p>"},{"location":"api/container.typescript/#jobnameoptional_7","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.typescript/#jobstageoptional_7","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.typescript/#loginenvvaroptional","title":"<code>loginEnvVar</code><sup>Optional</sup>","text":"<pre><code>public readonly loginEnvVar: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.typescript/#registryoptional","title":"<code>registry</code><sup>Optional</sup>","text":"<pre><code>public readonly registry: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: index.docker.io/v1</li> </ul> <p>The Docker registry the image should be pushed to.</p>"},{"location":"api/container.typescript/#tagoptional_1","title":"<code>tag</code><sup>Optional</sup>","text":"<pre><code>public readonly tag: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: <code>latest</code></li> </ul> <p>The Docker image tag that should be pushed to the <code>registry</code>.</p>"},{"location":"api/container.typescript/#userenvvaroptional","title":"<code>userEnvVar</code><sup>Optional</sup>","text":"<pre><code>public readonly userEnvVar: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.typescript/#kanikoexecuteprops","title":"KanikoExecuteProps","text":""},{"location":"api/container.typescript/#initializer_10","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst kanikoExecuteProps: container.KanikoExecuteProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties_10","title":"Properties","text":"Name Type Description <code>buildArgs</code> <code>{[ key: string ]: any}</code> Container build arguments, used to instrument the container image build. <code>buildTarget</code> <code>string</code> For container multistage builds name of the build stage you want to create. <code>context</code> <code>string</code> Context which will be send to kaniko. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>dockerfile</code> <code>string</code> Name of the dockerfile to use. <code>enablePush</code> <code>boolean</code> Enable push to container registry, disabled to allow subsequent jobs to. <code>imageName</code> <code>string</code> Image name which will be created. <code>imageTag</code> <code>string</code> The tag the image will be tagged with. <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>registries</code> <code>string[] | Registry[]</code> List of container registries to push created image to. <code>tarPath</code> <code>string</code> Container images created by kaniko are tarball files. <code>verbosity</code> <code>string</code> Verbosity of kaniko logging."},{"location":"api/container.typescript/#buildargsoptional","title":"<code>buildArgs</code><sup>Optional</sup>","text":"<pre><code>public readonly buildArgs: {[ key: string ]: any};\n</code></pre> <ul> <li>Type: {[ key: string ]: any}</li> </ul> <p>Container build arguments, used to instrument the container image build.</p>"},{"location":"api/container.typescript/#buildtargetoptional","title":"<code>buildTarget</code><sup>Optional</sup>","text":"<pre><code>public readonly buildTarget: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>For container multistage builds name of the build stage you want to create.</p> <p>Image tag will be appended with the build_target. e.g. latest-buildtarget.</p>"},{"location":"api/container.typescript/#contextoptional_1","title":"<code>context</code><sup>Optional</sup>","text":"<pre><code>public readonly context: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Context which will be send to kaniko.</p> <p>Defaults to <code>None</code> which implies the local directory is the context.</p>"},{"location":"api/container.typescript/#dockerclientconfigoptional_5","title":"<code>dockerClientConfig</code><sup>Optional</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.typescript/#dockerfileoptional","title":"<code>dockerfile</code><sup>Optional</sup>","text":"<pre><code>public readonly dockerfile: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"Dockerfile\"</li> </ul> <p>Name of the dockerfile to use.</p> <p>File is relative to context.</p>"},{"location":"api/container.typescript/#enablepushoptional","title":"<code>enablePush</code><sup>Optional</sup>","text":"<pre><code>public readonly enablePush: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: false act on container tarball.</li> </ul> <p>Enable push to container registry, disabled to allow subsequent jobs to.</p>"},{"location":"api/container.typescript/#imagenameoptional_4","title":"<code>imageName</code><sup>Optional</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.CI_PROJECT_NAME.</li> </ul> <p>Image name which will be created.</p>"},{"location":"api/container.typescript/#imagetagoptional_3","title":"<code>imageTag</code><sup>Optional</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.CI_COMMIT_TAG</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.typescript/#jobnameoptional_8","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.typescript/#jobstageoptional_8","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.typescript/#registriesoptional","title":"<code>registries</code><sup>Optional</sup>","text":"<pre><code>public readonly registries: string[] | Registry[];\n</code></pre> <ul> <li>Type: string[] | Registry[]</li> </ul> <p>List of container registries to push created image to.</p>"},{"location":"api/container.typescript/#tarpathoptional_2","title":"<code>tarPath</code><sup>Optional</sup>","text":"<pre><code>public readonly tarPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Container images created by kaniko are tarball files.</p> <p>This is the path where to store the image, will be named with suffix <code>.tar</code>. This path will be created if not present.</p>"},{"location":"api/container.typescript/#verbosityoptional","title":"<code>verbosity</code><sup>Optional</sup>","text":"<pre><code>public readonly verbosity: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"info\"</li> </ul> <p>Verbosity of kaniko logging.</p>"},{"location":"api/container.typescript/#trivyignorefilecheckprops","title":"TrivyIgnoreFileCheckProps","text":""},{"location":"api/container.typescript/#initializer_11","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst trivyIgnoreFileCheckProps: container.TrivyIgnoreFileCheckProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties_11","title":"Properties","text":"Name Type Description <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>trivyignorePath</code> <code>string</code> Path to the <code>.trivyignore</code> file."},{"location":"api/container.typescript/#jobnameoptional_9","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.typescript/#jobstageoptional_9","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.typescript/#trivyignorepathoptional","title":"<code>trivyignorePath</code><sup>Optional</sup>","text":"<pre><code>public readonly trivyignorePath: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectDir/.trivyignore</li> </ul> <p>Path to the <code>.trivyignore</code> file.</p>"},{"location":"api/container.typescript/#trivyscanlocalimageprops","title":"TrivyScanLocalImageProps","text":""},{"location":"api/container.typescript/#initializer_12","title":"Initializer","text":"<pre><code>import { container } from '@gcix/gcix'\nconst trivyScanLocalImageProps: container.TrivyScanLocalImageProps = { ... }\n</code></pre>"},{"location":"api/container.typescript/#properties_12","title":"Properties","text":"Name Type Description <code>debug</code> <code>boolean</code> If trivy should run in debug mode. <code>exitIfVulnerable</code> <code>boolean</code> Exit code when vulnerabilities were found. <code>imageName</code> <code>string</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>imagePath</code> <code>string</code> Path where to find the container image. <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>outputFormat</code> <code>string</code> Scan output format, possible values (table, json). <code>severity</code> <code>string</code> Severities of vulnerabilities to be displayed (comma separated). <code>trivyConfig</code> <code>string</code> Additional options to pass to <code>trivy</code> binary. <code>vulnerabilityTypes</code> <code>string</code> List of vulnerability types (comma separated)."},{"location":"api/container.typescript/#debugoptional","title":"<code>debug</code><sup>Optional</sup>","text":"<pre><code>public readonly debug: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: false</li> </ul> <p>If trivy should run in debug mode.</p>"},{"location":"api/container.typescript/#exitifvulnerableoptional","title":"<code>exitIfVulnerable</code><sup>Optional</sup>","text":"<pre><code>public readonly exitIfVulnerable: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Exit code when vulnerabilities were found.</p> <p>If true exit code is 1 else 0.</p>"},{"location":"api/container.typescript/#imagenameoptional_5","title":"<code>imageName</code><sup>Optional</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.CI_PROJECT_NAME</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.typescript/#imagepathoptional_1","title":"<code>imagePath</code><sup>Optional</sup>","text":"<pre><code>public readonly imagePath: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.CI_PROJECT_DIR</li> </ul> <p>Path where to find the container image.</p>"},{"location":"api/container.typescript/#jobnameoptional_10","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/container.typescript/#jobstageoptional_10","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/container.typescript/#outputformatoptional","title":"<code>outputFormat</code><sup>Optional</sup>","text":"<pre><code>public readonly outputFormat: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"table\"</li> </ul> <p>Scan output format, possible values (table, json).</p>"},{"location":"api/container.typescript/#severityoptional","title":"<code>severity</code><sup>Optional</sup>","text":"<pre><code>public readonly severity: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\"</li> </ul> <p>Severities of vulnerabilities to be displayed (comma separated).</p>"},{"location":"api/container.typescript/#trivyconfigoptional","title":"<code>trivyConfig</code><sup>Optional</sup>","text":"<pre><code>public readonly trivyConfig: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Additional options to pass to <code>trivy</code> binary.</p>"},{"location":"api/container.typescript/#vulnerabilitytypesoptional","title":"<code>vulnerabilityTypes</code><sup>Optional</sup>","text":"<pre><code>public readonly vulnerabilityTypes: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"os,library\"</li> </ul> <p>List of vulnerability types (comma separated).</p>"},{"location":"api/container.typescript/#classes","title":"Classes","text":""},{"location":"api/container.typescript/#buildcontainercollection","title":"BuildContainerCollection","text":"<ul> <li>Implements: IBuildContainerCollection</li> </ul> <p>Creates a <code>gcip.Sequence</code> to build, scan and push a container image.</p> <p>The build step is executed by <code>KanikoExecute</code>,  it will build the container image an outputs it to a tarball. There are two scan's, optimization scan with <code>DiveScan</code> to scan storage wasting in container image and a vulnerability scan with <code>TrivyScanLocalImage</code>. Both outputs are uploaded as an artifact to the GitLab instance. The container image is uploaded with <code>CranePush</code>.</p>"},{"location":"api/container.typescript/#initializers","title":"Initializers","text":"<pre><code>import { container } from '@gcix/gcix'\nnew container.BuildContainerCollection(props: BuildContainerCollectionProps)\n</code></pre> Name Type Description <code>props</code> <code>BuildContainerCollectionProps</code> No description."},{"location":"api/container.typescript/#propsrequired","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: BuildContainerCollectionProps</li> </ul>"},{"location":"api/container.typescript/#methods","title":"Methods","text":"Name Description <code>addChildren</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> No description. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>initializeAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initializeArtifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initializeCache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initializeDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initializeImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initializeNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initializeRules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initializeTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initializeVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>overrideAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>overrideImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>overrideRules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>overrideTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>overrideVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.typescript/#addchildren","title":"<code>addChildren</code>","text":"<pre><code>public addChildren(props: AddChildrenProps): JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/container.typescript/#propsrequired_1","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.AddChildrenProps</li> </ul>"},{"location":"api/container.typescript/#adddependencies","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addneeds","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#needsrequired","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addparent","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: JobCollection): void\n</code></pre>"},{"location":"api/container.typescript/#parentrequired","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#addtags","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#addvariables","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#variablesrequired","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#appendrules","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#appendscripts","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#assignartifacts","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#artifactsrequired","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#assigncache","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#cacherequired","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#getallinstancenames","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/container.typescript/#childoptional","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#initializeallowfailure","title":"<code>initializeAllowFailure</code>","text":"<pre><code>public initializeAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/container.typescript/#allowfailurerequired","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#initializeartifacts","title":"<code>initializeArtifacts</code>","text":"<pre><code>public initializeArtifacts(artifacts: Artifacts): JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/container.typescript/#artifactsrequired_1","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#initializecache","title":"<code>initializeCache</code>","text":"<pre><code>public initializeCache(cache: Cache): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/container.typescript/#cacherequired_1","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#initializedependencies","title":"<code>initializeDependencies</code>","text":"<pre><code>public initializeDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/container.typescript/#dependenciesrequired_1","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#initializeimage","title":"<code>initializeImage</code>","text":"<pre><code>public initializeImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/container.typescript/#imagerequired","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#initializeneeds","title":"<code>initializeNeeds</code>","text":"<pre><code>public initializeNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/container.typescript/#needsrequired_1","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#initializerules","title":"<code>initializeRules</code>","text":"<pre><code>public initializeRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/container.typescript/#rulesrequired_1","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#initializetags","title":"<code>initializeTags</code>","text":"<pre><code>public initializeTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/container.typescript/#tagsrequired_1","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#initializevariables","title":"<code>initializeVariables</code>","text":"<pre><code>public initializeVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/container.typescript/#variablesrequired_1","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#isequal","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.typescript/#comparablerequired","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/container.typescript/#overrideallowfailure","title":"<code>overrideAllowFailure</code>","text":"<pre><code>public overrideAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/container.typescript/#allowfailurerequired_1","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#overridedependencies","title":"<code>overrideDependencies</code>","text":"<pre><code>public overrideDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/container.typescript/#dependenciesrequired_2","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#overrideimage","title":"<code>overrideImage</code>","text":"<pre><code>public overrideImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/container.typescript/#imagerequired_1","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#overrideneeds","title":"<code>overrideNeeds</code>","text":"<pre><code>public overrideNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/container.typescript/#needsrequired_2","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#overriderules","title":"<code>overrideRules</code>","text":"<pre><code>public overrideRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/container.typescript/#rulesrequired_2","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#overridetags","title":"<code>overrideTags</code>","text":"<pre><code>public overrideTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/container.typescript/#tagsrequired_2","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#overridevariables","title":"<code>overrideVariables</code>","text":"<pre><code>public overrideVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/container.typescript/#variablesrequired_2","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#prependrules","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_3","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#prependscripts","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_1","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#render","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.typescript/#properties_13","title":"Properties","text":"Name Type Description <code>lastJobsExecuted</code> <code>@gcix/gcix.Job[]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nestedJobs</code> <code>@gcix/gcix.Job[]</code> No description. <code>populatedJobs</code> <code>@gcix/gcix.Job[]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>@gcix/gcix.ChildDict[]</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>orderedTagsForInitialization</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>orderedTagsForReplacement</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>allowFailureForInitialization</code> <code>string | boolean | number[]</code> No description. <code>allowFailureForReplacement</code> <code>string | boolean | number[]</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>artifactsForInitialization</code> <code>@gcix/gcix.Artifacts</code> No description. <code>artifactsForReplacement</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>cacheForInitialization</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>dependenciesForInitialization</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>dependenciesForReplacement</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>imageForInitialization</code> <code>string | @gcix/gcix.Image</code> No description. <code>imageForReplacement</code> <code>string | @gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>needsForInitialization</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>needsForReplacement</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>rulesForInitialization</code> <code>@gcix/gcix.Rule[]</code> No description. <code>rulesForReplacement</code> <code>@gcix/gcix.Rule[]</code> No description. <code>rulesToAppend</code> <code>@gcix/gcix.Rule[]</code> No description. <code>rulesToPrepend</code> <code>@gcix/gcix.Rule[]</code> No description. <code>scriptsToAppend</code> <code>string[]</code> No description. <code>scriptsToPrepend</code> <code>string[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForInitialization</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForReplacement</code> <code>{[ key: string ]: string}</code> No description. <code>cranePushJob</code> <code>CranePush</code> Crane push job. <code>diveScanJob</code> <code>DiveScan</code> Dive scan job. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>doCranePush</code> <code>boolean</code> Set to <code>false</code> to skip the Crane push job. <code>doDiveScan</code> <code>boolean</code> Set to <code>false</code> to skip the Dive scan job. <code>doTrivyignoreCheck</code> <code>boolean</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>doTrivyScan</code> <code>boolean</code> Set to <code>false</code> to skip the Trivy scan job. <code>imageName</code> <code>string</code> Image name with stage in the registry. <code>imageTag</code> <code>string</code> Image tag. <code>kanikoExecuteJob</code> <code>KanikoExecute</code> Kaniko execute job. <code>registry</code> <code>string | Registry</code> Container registry to push the image to. <code>trivyIgnoreFileCheckJob</code> <code>TrivyIgnoreFileCheck</code> Trivy ignore file check job. <code>trivyScanLocalImageJob</code> <code>TrivyScanLocalImage</code> Trivy scan local image job."},{"location":"api/container.typescript/#lastjobsexecutedrequired","title":"<code>lastJobsExecuted</code><sup>Required</sup>","text":"<pre><code>public readonly lastJobsExecuted: Job[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job[]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/container.typescript/#nestedjobsrequired","title":"<code>nestedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly nestedJobs: Job[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job[]</li> </ul>"},{"location":"api/container.typescript/#populatedjobsrequired","title":"<code>populatedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly populatedJobs: Job[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job[]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/container.typescript/#childrenrequired","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>public readonly children: ChildDict[];\n</code></pre> <ul> <li>Type: @gcix/gcix.ChildDict[]</li> </ul>"},{"location":"api/container.typescript/#orderedtagsrequired","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#orderedtagsforinitializationrequired","title":"<code>orderedTagsForInitialization</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForInitialization: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#orderedtagsforreplacementrequired","title":"<code>orderedTagsForReplacement</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForReplacement: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#parentsrequired","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/container.typescript/#allowfailureforinitializationoptional","title":"<code>allowFailureForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForInitialization: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#allowfailureforreplacementoptional","title":"<code>allowFailureForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForReplacement: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#artifactsoptional","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#artifactsforinitializationoptional","title":"<code>artifactsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForInitialization: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#artifactsforreplacementoptional","title":"<code>artifactsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForReplacement: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#cacheoptional","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#cacheforinitializationoptional","title":"<code>cacheForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly cacheForInitialization: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#dependenciesoptional","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#dependenciesforinitializationoptional","title":"<code>dependenciesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#dependenciesforreplacementoptional","title":"<code>dependenciesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#imageforinitializationoptional","title":"<code>imageForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForInitialization: string | Image;\n</code></pre> <ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#imageforreplacementoptional","title":"<code>imageForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForReplacement: string | Image;\n</code></pre> <ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#needsoptional","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#needsforinitializationoptional","title":"<code>needsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#needsforreplacementoptional","title":"<code>needsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#rulesforinitializationoptional","title":"<code>rulesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForInitialization: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#rulesforreplacementoptional","title":"<code>rulesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForReplacement: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#rulestoappendoptional","title":"<code>rulesToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToAppend: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#rulestoprependoptional","title":"<code>rulesToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToPrepend: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#scriptstoappendoptional","title":"<code>scriptsToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToAppend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#scriptstoprependoptional","title":"<code>scriptsToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToPrepend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#variablesoptional","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#variablesforinitializationoptional","title":"<code>variablesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForInitialization: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#variablesforreplacementoptional","title":"<code>variablesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForReplacement: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#cranepushjobrequired","title":"<code>cranePushJob</code><sup>Required</sup>","text":"<pre><code>public readonly cranePushJob: CranePush;\n</code></pre> <ul> <li>Type: CranePush</li> </ul> <p>Crane push job.</p>"},{"location":"api/container.typescript/#divescanjobrequired","title":"<code>diveScanJob</code><sup>Required</sup>","text":"<pre><code>public readonly diveScanJob: DiveScan;\n</code></pre> <ul> <li>Type: DiveScan</li> </ul> <p>Dive scan job.</p>"},{"location":"api/container.typescript/#dockerclientconfigrequired","title":"<code>dockerClientConfig</code><sup>Required</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.typescript/#docranepushrequired","title":"<code>doCranePush</code><sup>Required</sup>","text":"<pre><code>public readonly doCranePush: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Set to <code>false</code> to skip the Crane push job.</p>"},{"location":"api/container.typescript/#dodivescanrequired","title":"<code>doDiveScan</code><sup>Required</sup>","text":"<pre><code>public readonly doDiveScan: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.typescript/#dotrivyignorecheckrequired","title":"<code>doTrivyignoreCheck</code><sup>Required</sup>","text":"<pre><code>public readonly doTrivyignoreCheck: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.typescript/#dotrivyscanrequired","title":"<code>doTrivyScan</code><sup>Required</sup>","text":"<pre><code>public readonly doTrivyScan: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.typescript/#imagenamerequired_1","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/imageName.</p>"},{"location":"api/container.typescript/#imagetagrequired_1","title":"<code>imageTag</code><sup>Required</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Image tag.</p> <p>Depending of the build it defaults either to the git tag or to the actual branch name.</p>"},{"location":"api/container.typescript/#kanikoexecutejobrequired","title":"<code>kanikoExecuteJob</code><sup>Required</sup>","text":"<pre><code>public readonly kanikoExecuteJob: KanikoExecute;\n</code></pre> <ul> <li>Type: KanikoExecute</li> </ul> <p>Kaniko execute job.</p>"},{"location":"api/container.typescript/#registryrequired_1","title":"<code>registry</code><sup>Required</sup>","text":"<pre><code>public readonly registry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.typescript/#trivyignorefilecheckjobrequired","title":"<code>trivyIgnoreFileCheckJob</code><sup>Required</sup>","text":"<pre><code>public readonly trivyIgnoreFileCheckJob: TrivyIgnoreFileCheck;\n</code></pre> <ul> <li>Type: TrivyIgnoreFileCheck</li> </ul> <p>Trivy ignore file check job.</p>"},{"location":"api/container.typescript/#trivyscanlocalimagejobrequired","title":"<code>trivyScanLocalImageJob</code><sup>Required</sup>","text":"<pre><code>public readonly trivyScanLocalImageJob: TrivyScanLocalImage;\n</code></pre> <ul> <li>Type: TrivyScanLocalImage</li> </ul> <p>Trivy scan local image job.</p>"},{"location":"api/container.typescript/#copycontainercollection","title":"CopyContainerCollection","text":"<ul> <li>Implements: ICopyContainerCollection</li> </ul> <p>Creates a <code>gcip.Sequence</code> to pull, scan and push a container image.</p> <p>The pull step is executed by <code>CranePull</code>, it will pull the container image and outputs it to a tarball. There are two scan's, optimization scan with <code>DiveScan</code> to scan storage wasting in container image and a vulnerability scan with <code>TrivyScanLocalImage</code>.  Both outputs are uploaded as an artifact to the GitLab instance. Built container image is uploaded with <code>CranePush</code>.</p> <p>NOTE: We decided to use caches instead of artifacts to pass the Docker image tar archive from one job to another. This is because those tar archives could become very large - especially larger then the maximum artifact size limit. This limit can just be adjusted by the admin of the gitlab instance, so your pipeline would never work, your Gitlab provider would not adjust this limit for you. For caches on the other hand you can define storage backends at the base of your Gitlab runners.</p> <p>Furthermore we set the cache key to the pipeline ID. This is because the name and tag of the image does not ensure that the downloaded tar is unique, as the image behind the image tag could be overridden.  So we ensure uniqueness by downloading the image once per pipeline.</p>"},{"location":"api/container.typescript/#initializers_1","title":"Initializers","text":"<pre><code>import { container } from '@gcix/gcix'\nnew container.CopyContainerCollection(props: CopyContainerCollectionProps)\n</code></pre> Name Type Description <code>props</code> <code>CopyContainerCollectionProps</code> No description."},{"location":"api/container.typescript/#propsrequired_2","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: CopyContainerCollectionProps</li> </ul>"},{"location":"api/container.typescript/#methods_1","title":"Methods","text":"Name Description <code>addChildren</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> No description. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>initializeAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initializeArtifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initializeCache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initializeDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initializeImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initializeNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initializeRules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initializeTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initializeVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>overrideAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>overrideImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>overrideRules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>overrideTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>overrideVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.typescript/#addchildren_1","title":"<code>addChildren</code>","text":"<pre><code>public addChildren(props: AddChildrenProps): JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/container.typescript/#propsrequired_3","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.AddChildrenProps</li> </ul>"},{"location":"api/container.typescript/#adddependencies_1","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_3","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addneeds_1","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_3","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addparent_1","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: JobCollection): void\n</code></pre>"},{"location":"api/container.typescript/#parentrequired_1","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#addtags_1","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_3","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#addvariables_1","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#variablesrequired_3","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#appendrules_1","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_4","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#appendscripts_1","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_2","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#assignartifacts_1","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#artifactsrequired_2","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#assigncache_1","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#cacherequired_2","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#getallinstancenames_1","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/container.typescript/#childoptional_1","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#initializeallowfailure_1","title":"<code>initializeAllowFailure</code>","text":"<pre><code>public initializeAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/container.typescript/#allowfailurerequired_2","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#initializeartifacts_1","title":"<code>initializeArtifacts</code>","text":"<pre><code>public initializeArtifacts(artifacts: Artifacts): JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/container.typescript/#artifactsrequired_3","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#initializecache_1","title":"<code>initializeCache</code>","text":"<pre><code>public initializeCache(cache: Cache): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/container.typescript/#cacherequired_3","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#initializedependencies_1","title":"<code>initializeDependencies</code>","text":"<pre><code>public initializeDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/container.typescript/#dependenciesrequired_4","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#initializeimage_1","title":"<code>initializeImage</code>","text":"<pre><code>public initializeImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/container.typescript/#imagerequired_2","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#initializeneeds_1","title":"<code>initializeNeeds</code>","text":"<pre><code>public initializeNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/container.typescript/#needsrequired_4","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#initializerules_1","title":"<code>initializeRules</code>","text":"<pre><code>public initializeRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/container.typescript/#rulesrequired_5","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#initializetags_1","title":"<code>initializeTags</code>","text":"<pre><code>public initializeTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/container.typescript/#tagsrequired_4","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#initializevariables_1","title":"<code>initializeVariables</code>","text":"<pre><code>public initializeVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/container.typescript/#variablesrequired_4","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#isequal_1","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.typescript/#comparablerequired_1","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/container.typescript/#overrideallowfailure_1","title":"<code>overrideAllowFailure</code>","text":"<pre><code>public overrideAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/container.typescript/#allowfailurerequired_3","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#overridedependencies_1","title":"<code>overrideDependencies</code>","text":"<pre><code>public overrideDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/container.typescript/#dependenciesrequired_5","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#overrideimage_1","title":"<code>overrideImage</code>","text":"<pre><code>public overrideImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/container.typescript/#imagerequired_3","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#overrideneeds_1","title":"<code>overrideNeeds</code>","text":"<pre><code>public overrideNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/container.typescript/#needsrequired_5","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#overriderules_1","title":"<code>overrideRules</code>","text":"<pre><code>public overrideRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/container.typescript/#rulesrequired_6","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#overridetags_1","title":"<code>overrideTags</code>","text":"<pre><code>public overrideTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/container.typescript/#tagsrequired_5","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#overridevariables_1","title":"<code>overrideVariables</code>","text":"<pre><code>public overrideVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/container.typescript/#variablesrequired_5","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#prependrules_1","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_7","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#prependscripts_1","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_3","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#render_1","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.typescript/#properties_14","title":"Properties","text":"Name Type Description <code>lastJobsExecuted</code> <code>@gcix/gcix.Job[]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nestedJobs</code> <code>@gcix/gcix.Job[]</code> No description. <code>populatedJobs</code> <code>@gcix/gcix.Job[]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>@gcix/gcix.ChildDict[]</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>orderedTagsForInitialization</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>orderedTagsForReplacement</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>allowFailureForInitialization</code> <code>string | boolean | number[]</code> No description. <code>allowFailureForReplacement</code> <code>string | boolean | number[]</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>artifactsForInitialization</code> <code>@gcix/gcix.Artifacts</code> No description. <code>artifactsForReplacement</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>cacheForInitialization</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>dependenciesForInitialization</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>dependenciesForReplacement</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>imageForInitialization</code> <code>string | @gcix/gcix.Image</code> No description. <code>imageForReplacement</code> <code>string | @gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>needsForInitialization</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>needsForReplacement</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>rulesForInitialization</code> <code>@gcix/gcix.Rule[]</code> No description. <code>rulesForReplacement</code> <code>@gcix/gcix.Rule[]</code> No description. <code>rulesToAppend</code> <code>@gcix/gcix.Rule[]</code> No description. <code>rulesToPrepend</code> <code>@gcix/gcix.Rule[]</code> No description. <code>scriptsToAppend</code> <code>string[]</code> No description. <code>scriptsToPrepend</code> <code>string[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForInitialization</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForReplacement</code> <code>{[ key: string ]: string}</code> No description. <code>cranePullJob</code> <code>CranePull</code> CranPull job. <code>cranePushJob</code> <code>CranePush</code> No description. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>doDiveScan</code> <code>boolean</code> Set to <code>false</code> to skip the Dive scan job. <code>doTrivyignoreCheck</code> <code>boolean</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>doTrivyScan</code> <code>boolean</code> Set to <code>false</code> to skip the Trivy scan job. <code>dstRegistry</code> <code>string | Registry</code> Container registry to push the image to. <code>imageName</code> <code>string</code> Image name with stage in the registry. <code>imageTag</code> <code>string</code> Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>. <code>srcRegistry</code> <code>string | Registry</code> Container registry to pull the image from. <code>diveScanJob</code> <code>DiveScan</code> Dive scan job. <code>trivyIgnoreFileCheckJob</code> <code>TrivyIgnoreFileCheck</code> Trivy ignore file check job. <code>trivyScanLocalImageJob</code> <code>TrivyScanLocalImage</code> Trivy scan local image job."},{"location":"api/container.typescript/#lastjobsexecutedrequired_1","title":"<code>lastJobsExecuted</code><sup>Required</sup>","text":"<pre><code>public readonly lastJobsExecuted: Job[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job[]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/container.typescript/#nestedjobsrequired_1","title":"<code>nestedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly nestedJobs: Job[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job[]</li> </ul>"},{"location":"api/container.typescript/#populatedjobsrequired_1","title":"<code>populatedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly populatedJobs: Job[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job[]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/container.typescript/#childrenrequired_1","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>public readonly children: ChildDict[];\n</code></pre> <ul> <li>Type: @gcix/gcix.ChildDict[]</li> </ul>"},{"location":"api/container.typescript/#orderedtagsrequired_1","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#orderedtagsforinitializationrequired_1","title":"<code>orderedTagsForInitialization</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForInitialization: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#orderedtagsforreplacementrequired_1","title":"<code>orderedTagsForReplacement</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForReplacement: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#parentsrequired_1","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/container.typescript/#allowfailureforinitializationoptional_1","title":"<code>allowFailureForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForInitialization: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#allowfailureforreplacementoptional_1","title":"<code>allowFailureForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForReplacement: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#artifactsoptional_1","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#artifactsforinitializationoptional_1","title":"<code>artifactsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForInitialization: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#artifactsforreplacementoptional_1","title":"<code>artifactsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForReplacement: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#cacheoptional_1","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#cacheforinitializationoptional_1","title":"<code>cacheForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly cacheForInitialization: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#dependenciesoptional_1","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#dependenciesforinitializationoptional_1","title":"<code>dependenciesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#dependenciesforreplacementoptional_1","title":"<code>dependenciesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#imageforinitializationoptional_1","title":"<code>imageForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForInitialization: string | Image;\n</code></pre> <ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#imageforreplacementoptional_1","title":"<code>imageForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForReplacement: string | Image;\n</code></pre> <ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#needsoptional_1","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#needsforinitializationoptional_1","title":"<code>needsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#needsforreplacementoptional_1","title":"<code>needsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#rulesforinitializationoptional_1","title":"<code>rulesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForInitialization: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#rulesforreplacementoptional_1","title":"<code>rulesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForReplacement: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#rulestoappendoptional_1","title":"<code>rulesToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToAppend: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#rulestoprependoptional_1","title":"<code>rulesToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToPrepend: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#scriptstoappendoptional_1","title":"<code>scriptsToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToAppend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#scriptstoprependoptional_1","title":"<code>scriptsToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToPrepend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#variablesoptional_1","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#variablesforinitializationoptional_1","title":"<code>variablesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForInitialization: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#variablesforreplacementoptional_1","title":"<code>variablesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForReplacement: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#cranepulljobrequired","title":"<code>cranePullJob</code><sup>Required</sup>","text":"<pre><code>public readonly cranePullJob: CranePull;\n</code></pre> <ul> <li>Type: CranePull</li> </ul> <p>CranPull job.</p>"},{"location":"api/container.typescript/#cranepushjobrequired_1","title":"<code>cranePushJob</code><sup>Required</sup>","text":"<pre><code>public readonly cranePushJob: CranePush;\n</code></pre> <ul> <li>Type: CranePush</li> </ul>"},{"location":"api/container.typescript/#dockerclientconfigrequired_1","title":"<code>dockerClientConfig</code><sup>Required</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.typescript/#dodivescanrequired_1","title":"<code>doDiveScan</code><sup>Required</sup>","text":"<pre><code>public readonly doDiveScan: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.typescript/#dotrivyignorecheckrequired_1","title":"<code>doTrivyignoreCheck</code><sup>Required</sup>","text":"<pre><code>public readonly doTrivyignoreCheck: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.typescript/#dotrivyscanrequired_1","title":"<code>doTrivyScan</code><sup>Required</sup>","text":"<pre><code>public readonly doTrivyScan: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.typescript/#dstregistryrequired_2","title":"<code>dstRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly dstRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.typescript/#imagenamerequired_2","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/image_name.</p>"},{"location":"api/container.typescript/#imagetagrequired_2","title":"<code>imageTag</code><sup>Required</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>.</p>"},{"location":"api/container.typescript/#srcregistryrequired_2","title":"<code>srcRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly srcRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Container registry to pull the image from.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.typescript/#divescanjoboptional","title":"<code>diveScanJob</code><sup>Optional</sup>","text":"<pre><code>public readonly diveScanJob: DiveScan;\n</code></pre> <ul> <li>Type: DiveScan</li> </ul> <p>Dive scan job.</p>"},{"location":"api/container.typescript/#trivyignorefilecheckjoboptional","title":"<code>trivyIgnoreFileCheckJob</code><sup>Optional</sup>","text":"<pre><code>public readonly trivyIgnoreFileCheckJob: TrivyIgnoreFileCheck;\n</code></pre> <ul> <li>Type: TrivyIgnoreFileCheck</li> </ul> <p>Trivy ignore file check job.</p>"},{"location":"api/container.typescript/#trivyscanlocalimagejoboptional","title":"<code>trivyScanLocalImageJob</code><sup>Optional</sup>","text":"<pre><code>public readonly trivyScanLocalImageJob: TrivyScanLocalImage;\n</code></pre> <ul> <li>Type: TrivyScanLocalImage</li> </ul> <p>Trivy scan local image job.</p>"},{"location":"api/container.typescript/#cranecopy","title":"CraneCopy","text":"<ul> <li>Implements: ICraneCopy</li> </ul> <p>Creates a job to copy container images with <code>crane</code>. See <code>crane</code>.</p> <p>Copying an image is useful, if you want to have container images as close as possible to your cluster or servers.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: crane-copy</li> <li>stage: deploy</li> <li>image: PredefinedImages.CRANE</li> </ul>"},{"location":"api/container.typescript/#initializers_2","title":"Initializers","text":"<pre><code>import { container } from '@gcix/gcix'\nnew container.CraneCopy(props: CraneCopyProps)\n</code></pre> Name Type Description <code>props</code> <code>CraneCopyProps</code> No description."},{"location":"api/container.typescript/#propsrequired_4","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: CraneCopyProps</li> </ul>"},{"location":"api/container.typescript/#methods_2","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.typescript/#adddependencies_2","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_6","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addneeds_2","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_6","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addparent_2","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.typescript/#parentrequired_2","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#addtags_2","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_6","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#addvariables_2","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/container.typescript/#variablesrequired_6","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#appendrules_2","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_8","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#appendscripts_2","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_4","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#assignallowfailure","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/container.typescript/#allowfailurerequired_4","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#assignartifacts_2","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/container.typescript/#artifactsrequired_4","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#assigncache_2","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/container.typescript/#cacherequired_4","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#assigndependencies","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_7","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assignimage","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.typescript/#imagerequired_4","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#assignneeds","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_7","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assigntags","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_7","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#copy","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.typescript/#extendname","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.typescript/#namerequired","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstage","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.typescript/#stagerequired","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstagevalue","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.typescript/#stagerequired_1","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#getallinstancenames_2","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.typescript/#childoptional_2","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#isequal_2","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.typescript/#comparablerequired_2","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/container.typescript/#prependrules_2","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_9","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#prependscripts_2","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_5","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#render_2","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.typescript/#properties_15","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>dstRegistry</code> <code>string | Registry</code> Registry URL to copy container image to. <code>srcRegistry</code> <code>string | Registry</code> Registry URL to copy container image from. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries."},{"location":"api/container.typescript/#tagsrequired_8","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.typescript/#allowfailurerequired_5","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#namerequired_1","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#orderedtagsrequired_2","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#parentsrequired_2","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/container.typescript/#scriptsrequired_6","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#stagerequired_2","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#artifactsoptional_2","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#cacheoptional_2","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#dependenciesoptional_2","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#imageoptional","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#needsoptional_2","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#originaloptional","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/container.typescript/#rulesoptional","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#variablesoptional_2","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#dstregistryrequired_3","title":"<code>dstRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly dstRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.typescript/#srcregistryrequired_3","title":"<code>srcRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly srcRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Registry URL to copy container image from.</p>"},{"location":"api/container.typescript/#dockerclientconfigoptional_6","title":"<code>dockerClientConfig</code><sup>Optional</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries.</p>"},{"location":"api/container.typescript/#cranepull","title":"CranePull","text":"<ul> <li>Implements: ICranePull</li> </ul> <p>Creates a job to pull container image from remote container registry with <code>crane</code>.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: crane</li> <li>stage: pull</li> <li>image: PredefinedImages.CRANE</li> </ul>"},{"location":"api/container.typescript/#initializers_3","title":"Initializers","text":"<pre><code>import { container } from '@gcix/gcix'\nnew container.CranePull(props: CranePullProps)\n</code></pre> Name Type Description <code>props</code> <code>CranePullProps</code> No description."},{"location":"api/container.typescript/#propsrequired_5","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: CranePullProps</li> </ul>"},{"location":"api/container.typescript/#methods_3","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.typescript/#adddependencies_3","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_8","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addneeds_3","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_8","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addparent_3","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.typescript/#parentrequired_3","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#addtags_3","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_9","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#addvariables_3","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/container.typescript/#variablesrequired_7","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#appendrules_3","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_10","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#appendscripts_3","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_7","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#assignallowfailure_1","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/container.typescript/#allowfailurerequired_6","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#assignartifacts_3","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/container.typescript/#artifactsrequired_5","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#assigncache_3","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/container.typescript/#cacherequired_5","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#assigndependencies_1","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_9","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assignimage_1","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.typescript/#imagerequired_5","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#assignneeds_1","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_9","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assigntags_1","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_10","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#copy_1","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.typescript/#extendname_1","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.typescript/#namerequired_2","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstage_1","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.typescript/#stagerequired_3","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstagevalue_1","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.typescript/#stagerequired_4","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#getallinstancenames_3","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.typescript/#childoptional_3","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#isequal_3","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.typescript/#comparablerequired_3","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/container.typescript/#prependrules_3","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_11","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#prependscripts_3","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_8","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#render_3","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.typescript/#properties_16","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>imageName</code> <code>string</code> Container image with namespace to pull from <code>srcRegistry</code>. <code>imageTag</code> <code>string</code> Tag of the image which will be pulled. <code>srcRegistry</code> <code>string | Registry</code> Registry URL to pull container image from. <code>tarPath</code> <code>string</code> Path where to save the container image tarball."},{"location":"api/container.typescript/#tagsrequired_11","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.typescript/#allowfailurerequired_7","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#namerequired_3","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#orderedtagsrequired_3","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#parentsrequired_3","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/container.typescript/#scriptsrequired_9","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#stagerequired_5","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#artifactsoptional_3","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#cacheoptional_3","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#dependenciesoptional_3","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#imageoptional_1","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#needsoptional_3","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#originaloptional_1","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/container.typescript/#rulesoptional_1","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#variablesoptional_3","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#dockerclientconfigrequired_2","title":"<code>dockerClientConfig</code><sup>Required</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.typescript/#imagenamerequired_3","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Container image with namespace to pull from <code>srcRegistry</code>.</p>"},{"location":"api/container.typescript/#imagetagrequired_3","title":"<code>imageTag</code><sup>Required</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Tag of the image which will be pulled.</p>"},{"location":"api/container.typescript/#srcregistryrequired_4","title":"<code>srcRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly srcRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Registry URL to pull container image from.</p>"},{"location":"api/container.typescript/#tarpathrequired","title":"<code>tarPath</code><sup>Required</sup>","text":"<pre><code>public readonly tarPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Path where to save the container image tarball.</p>"},{"location":"api/container.typescript/#cranepush","title":"CranePush","text":"<ul> <li>Implements: ICranePush</li> </ul> <p>Creates a job to push container image to remote container registry with <code>crane</code>.</p> <p>The image to copy must be in a <code>tarball</code> format. It gets validated with crane and is pushed to <code>dst_registry</code> destination registry.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: crane-push</li> <li>stage: deploy</li> <li>image: PredefinedImages.CRANE</li> </ul>"},{"location":"api/container.typescript/#initializers_4","title":"Initializers","text":"<pre><code>import { container } from '@gcix/gcix'\nnew container.CranePush(props: CranePushProps)\n</code></pre> Name Type Description <code>props</code> <code>CranePushProps</code> No description."},{"location":"api/container.typescript/#propsrequired_6","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: CranePushProps</li> </ul>"},{"location":"api/container.typescript/#methods_4","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.typescript/#adddependencies_4","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_10","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addneeds_4","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_10","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addparent_4","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.typescript/#parentrequired_4","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#addtags_4","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_12","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#addvariables_4","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/container.typescript/#variablesrequired_8","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#appendrules_4","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_12","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#appendscripts_4","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_10","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#assignallowfailure_2","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/container.typescript/#allowfailurerequired_8","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#assignartifacts_4","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/container.typescript/#artifactsrequired_6","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#assigncache_4","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/container.typescript/#cacherequired_6","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#assigndependencies_2","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_11","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assignimage_2","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.typescript/#imagerequired_6","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#assignneeds_2","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_11","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assigntags_2","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_13","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#copy_2","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.typescript/#extendname_2","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.typescript/#namerequired_4","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstage_2","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.typescript/#stagerequired_6","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstagevalue_2","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.typescript/#stagerequired_7","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#getallinstancenames_4","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.typescript/#childoptional_4","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#isequal_4","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.typescript/#comparablerequired_4","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/container.typescript/#prependrules_4","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_13","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#prependscripts_4","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_11","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#render_4","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.typescript/#properties_17","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>dstRegistry</code> <code>string | Registry</code> Registry URL to copy container image to. <code>imageName</code> <code>string</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>imageTag</code> <code>string</code> The tag the image will be tagged with. <code>tarPath</code> <code>string</code> Path where to find the container image tarball."},{"location":"api/container.typescript/#tagsrequired_14","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.typescript/#allowfailurerequired_9","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#namerequired_5","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#orderedtagsrequired_4","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#parentsrequired_4","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/container.typescript/#scriptsrequired_12","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#stagerequired_8","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#artifactsoptional_4","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#cacheoptional_4","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#dependenciesoptional_4","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#imageoptional_2","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#needsoptional_4","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#originaloptional_2","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/container.typescript/#rulesoptional_2","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#variablesoptional_4","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#dockerclientconfigrequired_3","title":"<code>dockerClientConfig</code><sup>Required</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.typescript/#dstregistryrequired_4","title":"<code>dstRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly dstRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.typescript/#imagenamerequired_4","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.typescript/#imagetagrequired_4","title":"<code>imageTag</code><sup>Required</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.typescript/#tarpathrequired_1","title":"<code>tarPath</code><sup>Required</sup>","text":"<pre><code>public readonly tarPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Path where to find the container image tarball.</p>"},{"location":"api/container.typescript/#divescan","title":"DiveScan","text":"<ul> <li>Implements: IDiveScan</li> </ul> <p>Scan your images with wagoodman/dive.</p> <p><code>dive</code> will scan your container image layers and will output the efficency of each layer. You can see which layer and which file is consuming the most storage and optimize the layers if possible. It prevents container images and its layers beeing polluted with files like apt or yum cache's. The output produced by <code>dive</code> is uploaded as an artifact to the GitLab instance.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: dive</li> <li>stage: check</li> <li>image: PredefinedImages.DIVE</li> <li>artifacts: Path 'dive.txt'</li> </ul>"},{"location":"api/container.typescript/#initializers_5","title":"Initializers","text":"<pre><code>import { container } from '@gcix/gcix'\nnew container.DiveScan(props: DiveScanProps)\n</code></pre> Name Type Description <code>props</code> <code>DiveScanProps</code> No description."},{"location":"api/container.typescript/#propsrequired_7","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: DiveScanProps</li> </ul>"},{"location":"api/container.typescript/#methods_5","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.typescript/#adddependencies_5","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_12","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addneeds_5","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_12","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addparent_5","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.typescript/#parentrequired_5","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#addtags_5","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_15","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#addvariables_5","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/container.typescript/#variablesrequired_9","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#appendrules_5","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_14","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#appendscripts_5","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_13","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#assignallowfailure_3","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/container.typescript/#allowfailurerequired_10","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#assignartifacts_5","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/container.typescript/#artifactsrequired_7","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#assigncache_5","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/container.typescript/#cacherequired_7","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#assigndependencies_3","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_13","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assignimage_3","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.typescript/#imagerequired_7","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#assignneeds_3","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_13","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assigntags_3","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_16","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#copy_3","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.typescript/#extendname_3","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.typescript/#namerequired_6","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstage_3","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.typescript/#stagerequired_9","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstagevalue_3","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.typescript/#stagerequired_10","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#getallinstancenames_5","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.typescript/#childoptional_5","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#isequal_5","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.typescript/#comparablerequired_5","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/container.typescript/#prependrules_5","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_15","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#prependscripts_5","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_14","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#render_5","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.typescript/#properties_18","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>highestUserWastedPercent</code> <code>number</code> Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail. <code>ignoreErrors</code> <code>boolean</code> Ignore image parsing errors and run the analysis anyway. <code>imageName</code> <code>string</code> Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>. <code>imagePath</code> <code>string</code> Path to the image can be either a remote container registry, as well as a local path to an image. <code>lowestEfficiency</code> <code>number</code> Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail. <code>source</code> <code>string</code> The container engine to fetch the image from. <code>highestWastedBytes</code> <code>number</code> Highest allowable bytes wasted, otherwise CI validation will fail."},{"location":"api/container.typescript/#tagsrequired_17","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.typescript/#allowfailurerequired_11","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#namerequired_7","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#orderedtagsrequired_5","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#parentsrequired_5","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/container.typescript/#scriptsrequired_15","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#stagerequired_11","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#artifactsoptional_5","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#cacheoptional_5","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#dependenciesoptional_5","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#imageoptional_3","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#needsoptional_5","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#originaloptional_3","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/container.typescript/#rulesoptional_3","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#variablesoptional_5","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#highestuserwastedpercentrequired","title":"<code>highestUserWastedPercent</code><sup>Required</sup>","text":"<pre><code>public readonly highestUserWastedPercent: number;\n</code></pre> <ul> <li>Type: number</li> </ul> <p>Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.typescript/#ignoreerrorsrequired","title":"<code>ignoreErrors</code><sup>Required</sup>","text":"<pre><code>public readonly ignoreErrors: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Ignore image parsing errors and run the analysis anyway.</p>"},{"location":"api/container.typescript/#imagenamerequired_5","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>.</p>"},{"location":"api/container.typescript/#imagepathrequired","title":"<code>imagePath</code><sup>Required</sup>","text":"<pre><code>public readonly imagePath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Path to the image can be either a remote container registry, as well as a local path to an image.</p>"},{"location":"api/container.typescript/#lowestefficiencyrequired","title":"<code>lowestEfficiency</code><sup>Required</sup>","text":"<pre><code>public readonly lowestEfficiency: number;\n</code></pre> <ul> <li>Type: number</li> </ul> <p>Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.typescript/#sourcerequired","title":"<code>source</code><sup>Required</sup>","text":"<pre><code>public readonly source: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The container engine to fetch the image from.</p> <p>Allowed values: docker, podman, docker-archive</p>"},{"location":"api/container.typescript/#highestwastedbytesoptional_1","title":"<code>highestWastedBytes</code><sup>Optional</sup>","text":"<pre><code>public readonly highestWastedBytes: number;\n</code></pre> <ul> <li>Type: number</li> </ul> <p>Highest allowable bytes wasted, otherwise CI validation will fail.</p>"},{"location":"api/container.typescript/#dockerbuild","title":"DockerBuild","text":"<ul> <li>Implements: IDockerBuild</li> </ul> <p>Runs <code>docker build</code>.</p> <p>Example:</p> <pre><code>import { Build } from \"@gcix/gcix\"\nconst buildJob = Build({repository: \"myrepo/myimage\", tag: \"v0.1.0\"})\n</code></pre> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: docker</li> <li>stage: build</li> </ul>"},{"location":"api/container.typescript/#initializers_6","title":"Initializers","text":"<pre><code>import { container } from '@gcix/gcix'\nnew container.DockerBuild(props: DockerBuildProps)\n</code></pre> Name Type Description <code>props</code> <code>DockerBuildProps</code> No description."},{"location":"api/container.typescript/#propsrequired_8","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: DockerBuildProps</li> </ul>"},{"location":"api/container.typescript/#methods_6","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.typescript/#adddependencies_6","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_14","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addneeds_6","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_14","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addparent_6","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.typescript/#parentrequired_6","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#addtags_6","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_18","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#addvariables_6","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/container.typescript/#variablesrequired_10","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#appendrules_6","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_16","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#appendscripts_6","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_16","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#assignallowfailure_4","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/container.typescript/#allowfailurerequired_12","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#assignartifacts_6","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/container.typescript/#artifactsrequired_8","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#assigncache_6","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/container.typescript/#cacherequired_8","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#assigndependencies_4","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_15","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assignimage_4","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.typescript/#imagerequired_8","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#assignneeds_4","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_15","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assigntags_4","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_19","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#copy_4","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.typescript/#extendname_4","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.typescript/#namerequired_8","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstage_4","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.typescript/#stagerequired_12","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstagevalue_4","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.typescript/#stagerequired_13","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#getallinstancenames_6","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.typescript/#childoptional_6","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#isequal_6","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.typescript/#comparablerequired_6","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/container.typescript/#prependrules_6","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_17","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#prependscripts_6","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_17","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#render_6","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.typescript/#properties_19","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>context</code> <code>string</code> The Docker build context (the directory containing the Dockerfile). <code>repository</code> <code>string</code> The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>. <code>tag</code> <code>string</code> A Docker image tag applied to the image."},{"location":"api/container.typescript/#tagsrequired_20","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.typescript/#allowfailurerequired_13","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#namerequired_9","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#orderedtagsrequired_6","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#parentsrequired_6","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/container.typescript/#scriptsrequired_18","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#stagerequired_14","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#artifactsoptional_6","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#cacheoptional_6","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#dependenciesoptional_6","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#imageoptional_4","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#needsoptional_6","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#originaloptional_4","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/container.typescript/#rulesoptional_4","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#variablesoptional_6","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#contextrequired","title":"<code>context</code><sup>Required</sup>","text":"<pre><code>public readonly context: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The Docker build context (the directory containing the Dockerfile).</p>"},{"location":"api/container.typescript/#repositoryrequired_1","title":"<code>repository</code><sup>Required</sup>","text":"<pre><code>public readonly repository: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>.</p>"},{"location":"api/container.typescript/#tagrequired","title":"<code>tag</code><sup>Required</sup>","text":"<pre><code>public readonly tag: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>A Docker image tag applied to the image.</p>"},{"location":"api/container.typescript/#dockerclientconfig","title":"DockerClientConfig","text":"<ul> <li>Implements: IDockerClientConfig</li> </ul> <p>Class which represents a docker client configuration.</p> <p>After creating an instance of this class you can add new credential helper, basic authentication settings or default credential store.</p>"},{"location":"api/container.typescript/#initializers_7","title":"Initializers","text":"<pre><code>import { container } from '@gcix/gcix'\nnew container.DockerClientConfig(props?: DockerClientConfigProps)\n</code></pre> Name Type Description <code>props</code> <code>DockerClientConfigProps</code> No description."},{"location":"api/container.typescript/#propsoptional","title":"<code>props</code><sup>Optional</sup>","text":"<ul> <li>Type: DockerClientConfigProps</li> </ul>"},{"location":"api/container.typescript/#methods_7","title":"Methods","text":"Name Description <code>addAuth</code> Adds basic authentication <code>auths</code> setting to the configuration. <code>addCredHelper</code> Adds a Credentials helper <code>credHelpers</code> for a registry. <code>addRaw</code> Adds arbitrary settings to configuration. <code>assignCredsStore</code> Sets the <code>credsStore</code> setting for clients. See docker login#credentials-store. <code>shellCommand</code> Renders the shell command for creating the docker client config."},{"location":"api/container.typescript/#addauth","title":"<code>addAuth</code>","text":"<pre><code>public addAuth(registry: string, usernameEnvVar?: string, passwordEnvVar?: string): DockerClientConfig\n</code></pre> <p>Adds basic authentication <code>auths</code> setting to the configuration.</p> <p>This method acts a little special, because of some security aspects. The method, takse three arguments, <code>registry</code>, <code>username_env_var</code> and <code>password_env_var</code>. Arguments ending wit *_env_var, are ment to be available as a <code>gcip.Job</code> variable.</p>"},{"location":"api/container.typescript/#registryrequired_2","title":"<code>registry</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>Name of the container registry to set <code>creds_helper</code> for.</p>"},{"location":"api/container.typescript/#usernameenvvaroptional","title":"<code>usernameEnvVar</code><sup>Optional</sup>","text":"<ul> <li>Type: string</li> </ul> <p>Name of the environment variable which as the registry username stored.</p>"},{"location":"api/container.typescript/#passwordenvvaroptional","title":"<code>passwordEnvVar</code><sup>Optional</sup>","text":"<ul> <li>Type: string</li> </ul> <p>Name of the environment variable which as the registry password stored.</p>"},{"location":"api/container.typescript/#addcredhelper","title":"<code>addCredHelper</code>","text":"<pre><code>public addCredHelper(registry: string, credHelper: string): DockerClientConfig\n</code></pre> <p>Adds a Credentials helper <code>credHelpers</code> for a registry.</p> <p>See docker login#credential-helpers</p>"},{"location":"api/container.typescript/#registryrequired_3","title":"<code>registry</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>Name of the container registry to set <code>creds_helper</code> for.</p>"},{"location":"api/container.typescript/#credhelperrequired","title":"<code>credHelper</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>Name of the credential helper to use together with the <code>registry</code>.</p>"},{"location":"api/container.typescript/#addraw","title":"<code>addRaw</code>","text":"<pre><code>public addRaw(rawInput: {[ key: string ]: any}): DockerClientConfig\n</code></pre> <p>Adds arbitrary settings to configuration.</p> <p>Be aware and warned! You can overwrite any predefined settings with this method. This method is intendet to be used, if non suitable method is available and you have to set a configuration setting.</p>"},{"location":"api/container.typescript/#rawinputrequired","title":"<code>rawInput</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: any}</li> </ul> <p>Dictionary of non-available settings to be set.</p>"},{"location":"api/container.typescript/#assigncredsstore","title":"<code>assignCredsStore</code>","text":"<pre><code>public assignCredsStore(credsStore: string): DockerClientConfig\n</code></pre> <p>Sets the <code>credsStore</code> setting for clients. See docker login#credentials-store.</p> <p>Be aware, that if you set the <code>credsStore</code> and add creds_helper or username and password authentication, those authentication methods are not used.</p> <p>Clients which can authenticate against a registry can handle the credential store itself, mostly you do not want to set the <code>credsStore</code>. Use <code>credsHelpers</code> instead.</p>"},{"location":"api/container.typescript/#credsstorerequired","title":"<code>credsStore</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>Should be the suffix of the program to use (i.e. everything after docker-credential-). <code>osxkeychain</code>, to use docker-credential-osxkeychain or <code>ecr-login</code>, to use docker-crendential-ecr-login.</p>"},{"location":"api/container.typescript/#shellcommand","title":"<code>shellCommand</code>","text":"<pre><code>public shellCommand(): string[]\n</code></pre> <p>Renders the shell command for creating the docker client config.</p> <p>The render method uses <code>json.dumps()</code> to dump the configuration as a json string and escapes it for the shell. In Jobs which needed the configuration the rendered output should be redirected to the appropriate destination e.g. ~/.docker/config.json. This ensures, that environment variables are substituted.</p>"},{"location":"api/container.typescript/#properties_20","title":"Properties","text":"Name Type Description <code>config</code> <code>IDockerClientConfigType</code> Docker client configuration. <code>configFilePath</code> <code>string</code> Docker client config path."},{"location":"api/container.typescript/#configrequired","title":"<code>config</code><sup>Required</sup>","text":"<pre><code>public readonly config: IDockerClientConfigType;\n</code></pre> <ul> <li>Type: IDockerClientConfigType</li> </ul> <p>Docker client configuration.</p>"},{"location":"api/container.typescript/#configfilepathrequired","title":"<code>configFilePath</code><sup>Required</sup>","text":"<pre><code>public readonly configFilePath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Docker client config path.</p>"},{"location":"api/container.typescript/#dockerpush","title":"DockerPush","text":"<ul> <li>Implements: IDockerPush</li> </ul> <p>Runs <code>docker push</code> and optionally <code>docker login</code> before.</p> <p>Example:</p> <pre><code>import { Push } from \"@gcix/gcix\"\n\nconst pushJob = new Push({\n                registry: \"index.docker.io/v1/gcix/gcix\",\n                image: \"gcip\",\n                tag: \"v0.1.0\",\n                userEnvVar: \"DOCKER_USER\",\n                loginEnvVar: \"DOCKER_TOKEN\"\n            })\n</code></pre> <p>The <code>userEnvVar</code> and <code>loginEnvVar</code> should be created as protected and masked custom environment variable configured in the UI.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: docker</li> <li>stage: deploy</li> </ul>"},{"location":"api/container.typescript/#initializers_8","title":"Initializers","text":"<pre><code>import { container } from '@gcix/gcix'\nnew container.DockerPush(props: DockerPushProps)\n</code></pre> Name Type Description <code>props</code> <code>DockerPushProps</code> No description."},{"location":"api/container.typescript/#propsrequired_9","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: DockerPushProps</li> </ul>"},{"location":"api/container.typescript/#methods_8","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.typescript/#adddependencies_7","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_16","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addneeds_7","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_16","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addparent_7","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.typescript/#parentrequired_7","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#addtags_7","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_21","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#addvariables_7","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/container.typescript/#variablesrequired_11","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#appendrules_7","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_18","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#appendscripts_7","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_19","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#assignallowfailure_5","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/container.typescript/#allowfailurerequired_14","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#assignartifacts_7","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/container.typescript/#artifactsrequired_9","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#assigncache_7","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/container.typescript/#cacherequired_9","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#assigndependencies_5","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_17","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assignimage_5","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.typescript/#imagerequired_9","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#assignneeds_5","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_17","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assigntags_5","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_22","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#copy_5","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.typescript/#extendname_5","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.typescript/#namerequired_10","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstage_5","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.typescript/#stagerequired_15","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstagevalue_5","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.typescript/#stagerequired_16","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#getallinstancenames_7","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.typescript/#childoptional_7","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#isequal_7","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.typescript/#comparablerequired_7","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/container.typescript/#prependrules_7","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_19","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#prependscripts_7","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_20","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#render_7","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.typescript/#properties_21","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>containerImage</code> <code>string</code> The name of the Docker image to push to the <code>registry</code>. <code>registry</code> <code>string</code> The Docker registry the image should be pushed to. <code>tag</code> <code>string</code> The Docker image tag that should be pushed to the <code>registry</code>. <code>loginEnvVar</code> <code>string</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here. <code>userEnvVar</code> <code>string</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here."},{"location":"api/container.typescript/#tagsrequired_23","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.typescript/#allowfailurerequired_15","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#namerequired_11","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#orderedtagsrequired_7","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#parentsrequired_7","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/container.typescript/#scriptsrequired_21","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#stagerequired_17","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#artifactsoptional_7","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#cacheoptional_7","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#dependenciesoptional_7","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#imageoptional_5","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#needsoptional_7","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#originaloptional_5","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/container.typescript/#rulesoptional_5","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#variablesoptional_7","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#containerimagerequired_1","title":"<code>containerImage</code><sup>Required</sup>","text":"<pre><code>public readonly containerImage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Docker image to push to the <code>registry</code>.</p>"},{"location":"api/container.typescript/#registryrequired_4","title":"<code>registry</code><sup>Required</sup>","text":"<pre><code>public readonly registry: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The Docker registry the image should be pushed to.</p>"},{"location":"api/container.typescript/#tagrequired_1","title":"<code>tag</code><sup>Required</sup>","text":"<pre><code>public readonly tag: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The Docker image tag that should be pushed to the <code>registry</code>.</p>"},{"location":"api/container.typescript/#loginenvvaroptional_1","title":"<code>loginEnvVar</code><sup>Optional</sup>","text":"<pre><code>public readonly loginEnvVar: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.typescript/#userenvvaroptional_1","title":"<code>userEnvVar</code><sup>Optional</sup>","text":"<pre><code>public readonly userEnvVar: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.typescript/#kanikoexecute","title":"KanikoExecute","text":"<ul> <li>Implements: IKanikoExecute</li> </ul> <p>Creates a job which builds container images.</p> <p>This job creates images depending on git branches. e.g If the branch which gets pushed to the remote is named <code>my_awsome_feature</code> the image will be tagged with <code>my-awsome-feature</code>.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: kaniko</li> <li>stage: build</li> <li>image: PredefinedImages.KANIKO</li> </ul>"},{"location":"api/container.typescript/#initializers_9","title":"Initializers","text":"<pre><code>import { container } from '@gcix/gcix'\nnew container.KanikoExecute(props: KanikoExecuteProps)\n</code></pre> Name Type Description <code>props</code> <code>KanikoExecuteProps</code> No description."},{"location":"api/container.typescript/#propsrequired_10","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: KanikoExecuteProps</li> </ul>"},{"location":"api/container.typescript/#methods_9","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.typescript/#adddependencies_8","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_18","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addneeds_8","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_18","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addparent_8","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.typescript/#parentrequired_8","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#addtags_8","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_24","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#addvariables_8","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/container.typescript/#variablesrequired_12","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#appendrules_8","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_20","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#appendscripts_8","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_22","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#assignallowfailure_6","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/container.typescript/#allowfailurerequired_16","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#assignartifacts_8","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/container.typescript/#artifactsrequired_10","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#assigncache_8","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/container.typescript/#cacherequired_10","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#assigndependencies_6","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_19","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assignimage_6","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.typescript/#imagerequired_10","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#assignneeds_6","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_19","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assigntags_6","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_25","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#copy_6","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.typescript/#extendname_6","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.typescript/#namerequired_12","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstage_6","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.typescript/#stagerequired_18","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstagevalue_6","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.typescript/#stagerequired_19","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#getallinstancenames_8","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.typescript/#childoptional_8","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#isequal_8","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.typescript/#comparablerequired_8","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/container.typescript/#prependrules_8","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_21","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#prependscripts_8","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_23","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#render_8","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.typescript/#properties_22","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>context</code> <code>string</code> Context which will be send to kaniko. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>dockerfile</code> <code>string</code> Name of the dockerfile to use. <code>enablePush</code> <code>boolean</code> Enable push to container registry, disabled to allow subsequent jobs to act on container tarball. <code>imageName</code> <code>string</code> Image name which will be created. <code>imageTag</code> <code>string</code> The tag the image will be tagged with. <code>verbosity</code> <code>string</code> Verbosity of kaniko logging. <code>buildArgs</code> <code>{[ key: string ]: any}</code> Container build arguments, used to instrument the container image build. <code>buildTarget</code> <code>string</code> For container multistage builds name of the build stage you want to create. <code>registries</code> <code>string[] | Registry[]</code> List of container registries to push created image to. <code>tarPath</code> <code>string</code> Container images created by kaniko are tarball files."},{"location":"api/container.typescript/#tagsrequired_26","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.typescript/#allowfailurerequired_17","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#namerequired_13","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#orderedtagsrequired_8","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#parentsrequired_8","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/container.typescript/#scriptsrequired_24","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#stagerequired_20","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#artifactsoptional_8","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#cacheoptional_8","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#dependenciesoptional_8","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#imageoptional_6","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#needsoptional_8","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#originaloptional_6","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/container.typescript/#rulesoptional_6","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#variablesoptional_8","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#contextrequired_1","title":"<code>context</code><sup>Required</sup>","text":"<pre><code>public readonly context: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Context which will be send to kaniko.</p>"},{"location":"api/container.typescript/#dockerclientconfigrequired_4","title":"<code>dockerClientConfig</code><sup>Required</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.typescript/#dockerfilerequired","title":"<code>dockerfile</code><sup>Required</sup>","text":"<pre><code>public readonly dockerfile: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Name of the dockerfile to use.</p> <p>File is relative to context.</p>"},{"location":"api/container.typescript/#enablepushrequired","title":"<code>enablePush</code><sup>Required</sup>","text":"<pre><code>public readonly enablePush: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Enable push to container registry, disabled to allow subsequent jobs to act on container tarball.</p>"},{"location":"api/container.typescript/#imagenamerequired_6","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Image name which will be created.</p>"},{"location":"api/container.typescript/#imagetagrequired_5","title":"<code>imageTag</code><sup>Required</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.typescript/#verbosityrequired","title":"<code>verbosity</code><sup>Required</sup>","text":"<pre><code>public readonly verbosity: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Verbosity of kaniko logging.</p>"},{"location":"api/container.typescript/#buildargsoptional_1","title":"<code>buildArgs</code><sup>Optional</sup>","text":"<pre><code>public readonly buildArgs: {[ key: string ]: any};\n</code></pre> <ul> <li>Type: {[ key: string ]: any}</li> </ul> <p>Container build arguments, used to instrument the container image build.</p>"},{"location":"api/container.typescript/#buildtargetoptional_1","title":"<code>buildTarget</code><sup>Optional</sup>","text":"<pre><code>public readonly buildTarget: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>For container multistage builds name of the build stage you want to create.</p> <p>Image tag will be appended with the build_target. e.g. latest-buildtarget.</p>"},{"location":"api/container.typescript/#registriesoptional_1","title":"<code>registries</code><sup>Optional</sup>","text":"<pre><code>public readonly registries: string[] | Registry[];\n</code></pre> <ul> <li>Type: string[] | Registry[]</li> </ul> <p>List of container registries to push created image to.</p>"},{"location":"api/container.typescript/#tarpathoptional_3","title":"<code>tarPath</code><sup>Optional</sup>","text":"<pre><code>public readonly tarPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Container images created by kaniko are tarball files.</p> <p>This is the path where to store the image, will be named with suffix <code>.tar</code>. This path will be created if not present.</p>"},{"location":"api/container.typescript/#predefinedimages","title":"PredefinedImages","text":"<p>The PredefinedImages collection supplies commonly utilized container image objects within the gcix framework.</p>"},{"location":"api/container.typescript/#constants","title":"Constants","text":"Name Type Description <code>ALPINE_GIT</code> <code>@gcix/gcix.Image</code> A predefined Alpine Git container image object. <code>BUSYBOX</code> <code>@gcix/gcix.Image</code> A predefined Busybox container image object. <code>CRANE</code> <code>@gcix/gcix.Image</code> A predefined Crane container image object. <code>DIVE</code> <code>@gcix/gcix.Image</code> A predefined Dive container image object. <code>GCIP</code> <code>@gcix/gcix.Image</code> A predefined GCIP container image object. <code>GCIX</code> <code>@gcix/gcix.Image</code> A predefined GCIX container image object. <code>KANIKO</code> <code>@gcix/gcix.Image</code> A predefined Kaniko container image object. <code>TRIVY</code> <code>@gcix/gcix.Image</code> A predefined Trivy container image object."},{"location":"api/container.typescript/#alpine_gitrequired","title":"<code>ALPINE_GIT</code><sup>Required</sup>","text":"<pre><code>public readonly ALPINE_GIT: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul> <p>A predefined Alpine Git container image object.</p> <p>This image is useful for Git operations within containers.</p>"},{"location":"api/container.typescript/#busyboxrequired","title":"<code>BUSYBOX</code><sup>Required</sup>","text":"<pre><code>public readonly BUSYBOX: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul> <p>A predefined Busybox container image object.</p>"},{"location":"api/container.typescript/#cranerequired","title":"<code>CRANE</code><sup>Required</sup>","text":"<pre><code>public readonly CRANE: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul> <p>A predefined Crane container image object.</p>"},{"location":"api/container.typescript/#diverequired","title":"<code>DIVE</code><sup>Required</sup>","text":"<pre><code>public readonly DIVE: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul> <p>A predefined Dive container image object.</p>"},{"location":"api/container.typescript/#gciprequired","title":"<code>GCIP</code><sup>Required</sup>","text":"<pre><code>public readonly GCIP: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul> <p>A predefined GCIP container image object.</p>"},{"location":"api/container.typescript/#gcixrequired","title":"<code>GCIX</code><sup>Required</sup>","text":"<pre><code>public readonly GCIX: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul> <p>A predefined GCIX container image object.</p>"},{"location":"api/container.typescript/#kanikorequired","title":"<code>KANIKO</code><sup>Required</sup>","text":"<pre><code>public readonly KANIKO: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul> <p>A predefined Kaniko container image object.</p>"},{"location":"api/container.typescript/#trivyrequired","title":"<code>TRIVY</code><sup>Required</sup>","text":"<pre><code>public readonly TRIVY: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul> <p>A predefined Trivy container image object.</p>"},{"location":"api/container.typescript/#registry","title":"Registry","text":"<p>Container registry urls constants.</p>"},{"location":"api/container.typescript/#static-functions","title":"Static Functions","text":"Name Description <code>aws</code> Amazon Elastic Container Registry (ECR)."},{"location":"api/container.typescript/#aws","title":"<code>aws</code>","text":"<pre><code>import { container } from '@gcix/gcix'\ncontainer.Registry.aws(props?: AWSRegistryProps)\n</code></pre> <p>Amazon Elastic Container Registry (ECR).</p> <p>If neither <code>accountId</code> nor <code>region</code> is given, the method attempts to evaluate <code>accountId</code> and <code>region</code> using helper functions from <code>aws.AWSAccount</code>. If either of the helper functions does provide a valid value, a <code>ValueError</code> or <code>KeyError</code> exception will be raised.</p>"},{"location":"api/container.typescript/#propsoptional_1","title":"<code>props</code><sup>Optional</sup>","text":"<ul> <li>Type: AWSRegistryProps</li> </ul>"},{"location":"api/container.typescript/#constants_1","title":"Constants","text":"Name Type Description <code>DOCKER</code> <code>string</code> No description. <code>GCR</code> <code>string</code> No description. <code>QUAY</code> <code>string</code> No description."},{"location":"api/container.typescript/#dockerrequired","title":"<code>DOCKER</code><sup>Required</sup>","text":"<pre><code>public readonly DOCKER: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#gcrrequired","title":"<code>GCR</code><sup>Required</sup>","text":"<pre><code>public readonly GCR: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#quayrequired","title":"<code>QUAY</code><sup>Required</sup>","text":"<pre><code>public readonly QUAY: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#trivyignorefilecheck","title":"TrivyIgnoreFileCheck","text":"<ul> <li>Implements: ITrivyIgnoreFileCheck</li> </ul> <p>This job checks if a .trivyignore file exists and is not empty and fails if so.</p> <p>If a .trivyignore file is found and not empty, by default the job fails with <code>exit 1</code>, the job is configured to allow failures so that the pipeline keeps running. This ensures the visibility of acknowledged CVE's in the .trivyignore file inside the pipeline.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: trivyignore</li> <li>stage: check</li> <li>image: PredefinedImages.BUSYBOX</li> <li>allow_failure: 1</li> </ul>"},{"location":"api/container.typescript/#initializers_10","title":"Initializers","text":"<pre><code>import { container } from '@gcix/gcix'\nnew container.TrivyIgnoreFileCheck(props: TrivyIgnoreFileCheckProps)\n</code></pre> Name Type Description <code>props</code> <code>TrivyIgnoreFileCheckProps</code> No description."},{"location":"api/container.typescript/#propsrequired_11","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: TrivyIgnoreFileCheckProps</li> </ul>"},{"location":"api/container.typescript/#methods_10","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.typescript/#adddependencies_9","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_20","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addneeds_9","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_20","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addparent_9","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.typescript/#parentrequired_9","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#addtags_9","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_27","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#addvariables_9","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/container.typescript/#variablesrequired_13","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#appendrules_9","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_22","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#appendscripts_9","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_25","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#assignallowfailure_7","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/container.typescript/#allowfailurerequired_18","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#assignartifacts_9","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/container.typescript/#artifactsrequired_11","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#assigncache_9","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/container.typescript/#cacherequired_11","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#assigndependencies_7","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_21","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assignimage_7","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.typescript/#imagerequired_11","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#assignneeds_7","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_21","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assigntags_7","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_28","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#copy_7","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.typescript/#extendname_7","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.typescript/#namerequired_14","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstage_7","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.typescript/#stagerequired_21","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstagevalue_7","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.typescript/#stagerequired_22","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#getallinstancenames_9","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.typescript/#childoptional_9","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#isequal_9","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.typescript/#comparablerequired_9","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/container.typescript/#prependrules_9","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_23","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#prependscripts_9","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_26","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#render_9","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.typescript/#properties_23","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>trivyignorePath</code> <code>string</code> Path to the <code>.trivyignore</code> file."},{"location":"api/container.typescript/#tagsrequired_29","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.typescript/#allowfailurerequired_19","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#namerequired_15","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#orderedtagsrequired_9","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#parentsrequired_9","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/container.typescript/#scriptsrequired_27","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#stagerequired_23","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#artifactsoptional_9","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#cacheoptional_9","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#dependenciesoptional_9","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#imageoptional_7","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#needsoptional_9","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#originaloptional_7","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/container.typescript/#rulesoptional_7","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#variablesoptional_9","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#trivyignorepathrequired","title":"<code>trivyignorePath</code><sup>Required</sup>","text":"<pre><code>public readonly trivyignorePath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Path to the <code>.trivyignore</code> file.</p>"},{"location":"api/container.typescript/#trivyscanlocalimage","title":"TrivyScanLocalImage","text":"<ul> <li>Implements: ITrivyScanLocalImage</li> </ul> <p>This job scanns container images to find vulnerabilities.</p> <p>This job fails with exit code 1 if severities are found. The scan output is printed to stdout and uploaded to the artifacts of GitLab.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: trivy</li> <li>stage: check</li> <li>image: PredefinedImages.TRIVY</li> <li>artifacts: Path 'trivy.txt'</li> </ul>"},{"location":"api/container.typescript/#initializers_11","title":"Initializers","text":"<pre><code>import { container } from '@gcix/gcix'\nnew container.TrivyScanLocalImage(props: TrivyScanLocalImageProps)\n</code></pre> Name Type Description <code>props</code> <code>TrivyScanLocalImageProps</code> No description."},{"location":"api/container.typescript/#propsrequired_12","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: TrivyScanLocalImageProps</li> </ul>"},{"location":"api/container.typescript/#methods_11","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/container.typescript/#adddependencies_10","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_22","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addneeds_10","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_22","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#addparent_10","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/container.typescript/#parentrequired_10","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#addtags_10","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_30","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#addvariables_10","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/container.typescript/#variablesrequired_14","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#appendrules_10","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_24","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#appendscripts_10","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_28","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#assignallowfailure_8","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/container.typescript/#allowfailurerequired_20","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#assignartifacts_10","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/container.typescript/#artifactsrequired_12","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#assigncache_10","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/container.typescript/#cacherequired_12","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#assigndependencies_8","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#dependenciesrequired_23","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assignimage_8","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/container.typescript/#imagerequired_12","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#assignneeds_8","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/container.typescript/#needsrequired_23","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#assigntags_8","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#tagsrequired_31","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#copy_8","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/container.typescript/#extendname_8","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/container.typescript/#namerequired_16","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstage_8","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/container.typescript/#stagerequired_24","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#extendstagevalue_8","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/container.typescript/#stagerequired_25","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#getallinstancenames_10","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/container.typescript/#childoptional_10","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/container.typescript/#isequal_10","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/container.typescript/#comparablerequired_10","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/container.typescript/#prependrules_10","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/container.typescript/#rulesrequired_25","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#prependscripts_10","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/container.typescript/#scriptsrequired_29","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#render_10","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/container.typescript/#properties_24","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>debug</code> <code>boolean</code> If trivy should run in debug mode. <code>exitIfVulnerable</code> <code>boolean</code> Exit code when vulnerabilities were found. <code>imageName</code> <code>string</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>imagePath</code> <code>string</code> Path where to find the container image. <code>outputFormat</code> <code>string</code> Scan output format, possible values (table, json). <code>severity</code> <code>string</code> Severities of vulnerabilities to be displayed (comma separated). <code>vulnerabilityTypes</code> <code>string</code> List of vulnerability types (comma separated). <code>trivyConfig</code> <code>string</code> Additional options to pass to <code>trivy</code> binary."},{"location":"api/container.typescript/#tagsrequired_32","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/container.typescript/#allowfailurerequired_21","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/container.typescript/#namerequired_17","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#orderedtagsrequired_10","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/container.typescript/#parentsrequired_10","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/container.typescript/#scriptsrequired_30","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/container.typescript/#stagerequired_26","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#artifactsoptional_10","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/container.typescript/#cacheoptional_10","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/container.typescript/#dependenciesoptional_10","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#imageoptional_8","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/container.typescript/#needsoptional_10","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/container.typescript/#originaloptional_8","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/container.typescript/#rulesoptional_8","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/container.typescript/#variablesoptional_10","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#debugrequired","title":"<code>debug</code><sup>Required</sup>","text":"<pre><code>public readonly debug: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>If trivy should run in debug mode.</p>"},{"location":"api/container.typescript/#exitifvulnerablerequired","title":"<code>exitIfVulnerable</code><sup>Required</sup>","text":"<pre><code>public readonly exitIfVulnerable: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Exit code when vulnerabilities were found.</p> <p>If true exit code is 1 else 0.</p>"},{"location":"api/container.typescript/#imagenamerequired_7","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.typescript/#imagepathrequired_1","title":"<code>imagePath</code><sup>Required</sup>","text":"<pre><code>public readonly imagePath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Path where to find the container image.</p>"},{"location":"api/container.typescript/#outputformatrequired","title":"<code>outputFormat</code><sup>Required</sup>","text":"<pre><code>public readonly outputFormat: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Scan output format, possible values (table, json).</p>"},{"location":"api/container.typescript/#severityrequired","title":"<code>severity</code><sup>Required</sup>","text":"<pre><code>public readonly severity: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Severities of vulnerabilities to be displayed (comma separated).</p>"},{"location":"api/container.typescript/#vulnerabilitytypesrequired","title":"<code>vulnerabilityTypes</code><sup>Required</sup>","text":"<pre><code>public readonly vulnerabilityTypes: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>List of vulnerability types (comma separated).</p>"},{"location":"api/container.typescript/#trivyconfigoptional_1","title":"<code>trivyConfig</code><sup>Optional</sup>","text":"<pre><code>public readonly trivyConfig: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Additional options to pass to <code>trivy</code> binary.</p>"},{"location":"api/container.typescript/#protocols","title":"Protocols","text":""},{"location":"api/container.typescript/#ibuildcontainercollection","title":"IBuildContainerCollection","text":"<ul> <li>Implemented By: BuildContainerCollection, IBuildContainerCollection</li> </ul>"},{"location":"api/container.typescript/#properties_25","title":"Properties","text":"Name Type Description <code>cranePushJob</code> <code>CranePush</code> Crane push job. <code>diveScanJob</code> <code>DiveScan</code> Dive scan job. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>doCranePush</code> <code>boolean</code> Set to <code>false</code> to skip the Crane push job. <code>doDiveScan</code> <code>boolean</code> Set to <code>false</code> to skip the Dive scan job. <code>doTrivyignoreCheck</code> <code>boolean</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>doTrivyScan</code> <code>boolean</code> Set to <code>false</code> to skip the Trivy scan job. <code>imageName</code> <code>string</code> Image name with stage in the registry. <code>imageTag</code> <code>string</code> Image tag. <code>kanikoExecuteJob</code> <code>KanikoExecute</code> Kaniko execute job. <code>registry</code> <code>string | Registry</code> Container registry to push the image to. <code>trivyIgnoreFileCheckJob</code> <code>TrivyIgnoreFileCheck</code> Trivy ignore file check job. <code>trivyScanLocalImageJob</code> <code>TrivyScanLocalImage</code> Trivy scan local image job."},{"location":"api/container.typescript/#cranepushjobrequired_2","title":"<code>cranePushJob</code><sup>Required</sup>","text":"<pre><code>public readonly cranePushJob: CranePush;\n</code></pre> <ul> <li>Type: CranePush</li> </ul> <p>Crane push job.</p>"},{"location":"api/container.typescript/#divescanjobrequired_1","title":"<code>diveScanJob</code><sup>Required</sup>","text":"<pre><code>public readonly diveScanJob: DiveScan;\n</code></pre> <ul> <li>Type: DiveScan</li> </ul> <p>Dive scan job.</p>"},{"location":"api/container.typescript/#dockerclientconfigrequired_5","title":"<code>dockerClientConfig</code><sup>Required</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.typescript/#docranepushrequired_1","title":"<code>doCranePush</code><sup>Required</sup>","text":"<pre><code>public readonly doCranePush: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Crane push job.</p>"},{"location":"api/container.typescript/#dodivescanrequired_2","title":"<code>doDiveScan</code><sup>Required</sup>","text":"<pre><code>public readonly doDiveScan: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.typescript/#dotrivyignorecheckrequired_2","title":"<code>doTrivyignoreCheck</code><sup>Required</sup>","text":"<pre><code>public readonly doTrivyignoreCheck: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.typescript/#dotrivyscanrequired_2","title":"<code>doTrivyScan</code><sup>Required</sup>","text":"<pre><code>public readonly doTrivyScan: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.typescript/#imagenamerequired_8","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/imageName.</p>"},{"location":"api/container.typescript/#imagetagrequired_6","title":"<code>imageTag</code><sup>Required</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciCommitRefName</li> </ul> <p>Image tag.</p> <p>Depending of the build it defaults either to the git tag or to the actual branch name.</p>"},{"location":"api/container.typescript/#kanikoexecutejobrequired_1","title":"<code>kanikoExecuteJob</code><sup>Required</sup>","text":"<pre><code>public readonly kanikoExecuteJob: KanikoExecute;\n</code></pre> <ul> <li>Type: KanikoExecute</li> </ul> <p>Kaniko execute job.</p>"},{"location":"api/container.typescript/#registryrequired_5","title":"<code>registry</code><sup>Required</sup>","text":"<pre><code>public readonly registry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.typescript/#trivyignorefilecheckjobrequired_1","title":"<code>trivyIgnoreFileCheckJob</code><sup>Required</sup>","text":"<pre><code>public readonly trivyIgnoreFileCheckJob: TrivyIgnoreFileCheck;\n</code></pre> <ul> <li>Type: TrivyIgnoreFileCheck</li> </ul> <p>Trivy ignore file check job.</p>"},{"location":"api/container.typescript/#trivyscanlocalimagejobrequired_1","title":"<code>trivyScanLocalImageJob</code><sup>Required</sup>","text":"<pre><code>public readonly trivyScanLocalImageJob: TrivyScanLocalImage;\n</code></pre> <ul> <li>Type: TrivyScanLocalImage</li> </ul> <p>Trivy scan local image job.</p>"},{"location":"api/container.typescript/#icopycontainercollection","title":"ICopyContainerCollection","text":"<ul> <li>Implemented By: CopyContainerCollection, ICopyContainerCollection</li> </ul>"},{"location":"api/container.typescript/#properties_26","title":"Properties","text":"Name Type Description <code>cranePullJob</code> <code>CranePull</code> CranPull job. <code>cranePushJob</code> <code>CranePush</code> No description. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>doDiveScan</code> <code>boolean</code> Set to <code>false</code> to skip the Dive scan job. <code>doTrivyignoreCheck</code> <code>boolean</code> Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file. <code>doTrivyScan</code> <code>boolean</code> Set to <code>false</code> to skip the Trivy scan job. <code>dstRegistry</code> <code>string | Registry</code> Container registry to push the image to. <code>imageName</code> <code>string</code> Image name with stage in the registry. <code>imageTag</code> <code>string</code> Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>. <code>srcRegistry</code> <code>string | Registry</code> Container registry to pull the image from. <code>diveScanJob</code> <code>DiveScan</code> Dive scan job. <code>trivyIgnoreFileCheckJob</code> <code>TrivyIgnoreFileCheck</code> Trivy ignore file check job. <code>trivyScanLocalImageJob</code> <code>TrivyScanLocalImage</code> Trivy scan local image job."},{"location":"api/container.typescript/#cranepulljobrequired_1","title":"<code>cranePullJob</code><sup>Required</sup>","text":"<pre><code>public readonly cranePullJob: CranePull;\n</code></pre> <ul> <li>Type: CranePull</li> </ul> <p>CranPull job.</p>"},{"location":"api/container.typescript/#cranepushjobrequired_3","title":"<code>cranePushJob</code><sup>Required</sup>","text":"<pre><code>public readonly cranePushJob: CranePush;\n</code></pre> <ul> <li>Type: CranePush</li> </ul>"},{"location":"api/container.typescript/#dockerclientconfigrequired_6","title":"<code>dockerClientConfig</code><sup>Required</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.typescript/#dodivescanrequired_3","title":"<code>doDiveScan</code><sup>Required</sup>","text":"<pre><code>public readonly doDiveScan: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Dive scan job.</p>"},{"location":"api/container.typescript/#dotrivyignorecheckrequired_3","title":"<code>doTrivyignoreCheck</code><sup>Required</sup>","text":"<pre><code>public readonly doTrivyignoreCheck: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the existance check of the <code>.trivyignore</code> file.</p>"},{"location":"api/container.typescript/#dotrivyscanrequired_3","title":"<code>doTrivyScan</code><sup>Required</sup>","text":"<pre><code>public readonly doTrivyScan: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Set to <code>false</code> to skip the Trivy scan job.</p>"},{"location":"api/container.typescript/#dstregistryrequired_5","title":"<code>dstRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly dstRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to push the image to.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.typescript/#imagenamerequired_9","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Image name with stage in the registry.</p> <p>e.g. username/image_name.</p>"},{"location":"api/container.typescript/#imagetagrequired_7","title":"<code>imageTag</code><sup>Required</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Container image tag to pull from <code>srcRegistry</code> and push to <code>dstRegistry</code>.</p>"},{"location":"api/container.typescript/#srcregistryrequired_5","title":"<code>srcRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly srcRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> <li>Default: Registry.DOCKER</li> </ul> <p>Container registry to pull the image from.</p> <p>If the container registry needs authentication, you have to provide a <code>DockerClientConfig</code> object with credentials.</p>"},{"location":"api/container.typescript/#divescanjoboptional_1","title":"<code>diveScanJob</code><sup>Optional</sup>","text":"<pre><code>public readonly diveScanJob: DiveScan;\n</code></pre> <ul> <li>Type: DiveScan</li> </ul> <p>Dive scan job.</p>"},{"location":"api/container.typescript/#trivyignorefilecheckjoboptional_1","title":"<code>trivyIgnoreFileCheckJob</code><sup>Optional</sup>","text":"<pre><code>public readonly trivyIgnoreFileCheckJob: TrivyIgnoreFileCheck;\n</code></pre> <ul> <li>Type: TrivyIgnoreFileCheck</li> </ul> <p>Trivy ignore file check job.</p>"},{"location":"api/container.typescript/#trivyscanlocalimagejoboptional_1","title":"<code>trivyScanLocalImageJob</code><sup>Optional</sup>","text":"<pre><code>public readonly trivyScanLocalImageJob: TrivyScanLocalImage;\n</code></pre> <ul> <li>Type: TrivyScanLocalImage</li> </ul> <p>Trivy scan local image job.</p>"},{"location":"api/container.typescript/#icranecopy","title":"ICraneCopy","text":"<ul> <li>Implemented By: CraneCopy, ICraneCopy</li> </ul>"},{"location":"api/container.typescript/#properties_27","title":"Properties","text":"Name Type Description <code>dstRegistry</code> <code>string | Registry</code> Registry URL to copy container image to. <code>srcRegistry</code> <code>string | Registry</code> Registry URL to copy container image from. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries."},{"location":"api/container.typescript/#dstregistryrequired_6","title":"<code>dstRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly dstRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.typescript/#srcregistryrequired_6","title":"<code>srcRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly srcRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Registry URL to copy container image from.</p>"},{"location":"api/container.typescript/#dockerclientconfigoptional_7","title":"<code>dockerClientConfig</code><sup>Optional</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, used by crane to authenticate against given registries.</p>"},{"location":"api/container.typescript/#icranepull","title":"ICranePull","text":"<ul> <li>Implemented By: CranePull, ICranePull</li> </ul>"},{"location":"api/container.typescript/#properties_28","title":"Properties","text":"Name Type Description <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>imageName</code> <code>string</code> Container image with namespace to pull from <code>srcRegistry</code>. <code>imageTag</code> <code>string</code> Tag of the image which will be pulled. <code>srcRegistry</code> <code>string | Registry</code> Registry URL to pull container image from. <code>tarPath</code> <code>string</code> Path where to save the container image tarball."},{"location":"api/container.typescript/#dockerclientconfigrequired_7","title":"<code>dockerClientConfig</code><sup>Required</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> <li>Default: DockerClientConfig with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p>"},{"location":"api/container.typescript/#imagenamerequired_10","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Container image with namespace to pull from <code>srcRegistry</code>.</p>"},{"location":"api/container.typescript/#imagetagrequired_8","title":"<code>imageTag</code><sup>Required</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: latest</li> </ul> <p>Tag of the image which will be pulled.</p>"},{"location":"api/container.typescript/#srcregistryrequired_7","title":"<code>srcRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly srcRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Registry URL to pull container image from.</p>"},{"location":"api/container.typescript/#tarpathrequired_2","title":"<code>tarPath</code><sup>Required</sup>","text":"<pre><code>public readonly tarPath: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Path where to save the container image tarball.</p>"},{"location":"api/container.typescript/#icranepush","title":"ICranePush","text":"<ul> <li>Implemented By: CranePush, ICranePush</li> </ul>"},{"location":"api/container.typescript/#properties_29","title":"Properties","text":"Name Type Description <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>dstRegistry</code> <code>string | Registry</code> Registry URL to copy container image to. <code>imageName</code> <code>string</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>imageTag</code> <code>string</code> The tag the image will be tagged with. <code>tarPath</code> <code>string</code> Path where to find the container image tarball."},{"location":"api/container.typescript/#dockerclientconfigrequired_8","title":"<code>dockerClientConfig</code><sup>Required</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.typescript/#dstregistryrequired_7","title":"<code>dstRegistry</code><sup>Required</sup>","text":"<pre><code>public readonly dstRegistry: string | Registry;\n</code></pre> <ul> <li>Type: string | Registry</li> </ul> <p>Registry URL to copy container image to.</p>"},{"location":"api/container.typescript/#imagenamerequired_11","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.typescript/#imagetagrequired_9","title":"<code>imageTag</code><sup>Required</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciCommitTag</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.typescript/#tarpathrequired_3","title":"<code>tarPath</code><sup>Required</sup>","text":"<pre><code>public readonly tarPath: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectDir</li> </ul> <p>Path where to find the container image tarball.</p>"},{"location":"api/container.typescript/#idivescan","title":"IDiveScan","text":"<ul> <li>Implemented By: DiveScan, IDiveScan</li> </ul>"},{"location":"api/container.typescript/#properties_30","title":"Properties","text":"Name Type Description <code>highestUserWastedPercent</code> <code>number</code> Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail. <code>ignoreErrors</code> <code>boolean</code> Ignore image parsing errors and run the analysis anyway. <code>imageName</code> <code>string</code> Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>. <code>imagePath</code> <code>string</code> Path to the image can be either a remote container registry, as well as a local path to an image. <code>lowestEfficiency</code> <code>number</code> Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail. <code>source</code> <code>string</code> The container engine to fetch the image from. <code>highestWastedBytes</code> <code>number</code> Highest allowable bytes wasted, otherwise CI validation will fail."},{"location":"api/container.typescript/#highestuserwastedpercentrequired_1","title":"<code>highestUserWastedPercent</code><sup>Required</sup>","text":"<pre><code>public readonly highestUserWastedPercent: number;\n</code></pre> <ul> <li>Type: number</li> <li>Default: 0.1</li> </ul> <p>Highest allowable percentage of bytes wasted (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.typescript/#ignoreerrorsrequired_1","title":"<code>ignoreErrors</code><sup>Required</sup>","text":"<pre><code>public readonly ignoreErrors: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: false</li> </ul> <p>Ignore image parsing errors and run the analysis anyway.</p>"},{"location":"api/container.typescript/#imagenamerequired_12","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectName</li> </ul> <p>Name of the container image to scan, if <code>source</code> is <code>docker-archive</code> argument gets prefix <code>.tar</code>.</p>"},{"location":"api/container.typescript/#imagepathrequired_2","title":"<code>imagePath</code><sup>Required</sup>","text":"<pre><code>public readonly imagePath: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectPath</li> </ul> <p>Path to the image can be either a remote container registry, as well as a local path to an image.</p>"},{"location":"api/container.typescript/#lowestefficiencyrequired_1","title":"<code>lowestEfficiency</code><sup>Required</sup>","text":"<pre><code>public readonly lowestEfficiency: number;\n</code></pre> <ul> <li>Type: number</li> <li>Default: 0.9</li> </ul> <p>Lowest allowable image efficiency (as a ratio between 0-1), otherwise CI validation will fail.</p>"},{"location":"api/container.typescript/#sourcerequired_1","title":"<code>source</code><sup>Required</sup>","text":"<pre><code>public readonly source: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: docker-archive</li> </ul> <p>The container engine to fetch the image from.</p> <p>Allowed values: docker, podman, docker-archive</p>"},{"location":"api/container.typescript/#highestwastedbytesoptional_2","title":"<code>highestWastedBytes</code><sup>Optional</sup>","text":"<pre><code>public readonly highestWastedBytes: number;\n</code></pre> <ul> <li>Type: number</li> </ul> <p>Highest allowable bytes wasted, otherwise CI validation will fail.</p>"},{"location":"api/container.typescript/#idockerbuild","title":"IDockerBuild","text":"<ul> <li>Implemented By: DockerBuild, IDockerBuild</li> </ul>"},{"location":"api/container.typescript/#properties_31","title":"Properties","text":"Name Type Description <code>context</code> <code>string</code> The Docker build context (the directory containing the Dockerfile). <code>repository</code> <code>string</code> The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>. <code>tag</code> <code>string</code> A Docker image tag applied to the image."},{"location":"api/container.typescript/#contextrequired_2","title":"<code>context</code><sup>Required</sup>","text":"<pre><code>public readonly context: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: <code>.</code></li> </ul> <p>The Docker build context (the directory containing the Dockerfile).</p>"},{"location":"api/container.typescript/#repositoryrequired_2","title":"<code>repository</code><sup>Required</sup>","text":"<pre><code>public readonly repository: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The Docker repository name <code>([&lt;registry&gt;/]&lt;image&gt;)</code>.</p>"},{"location":"api/container.typescript/#tagrequired_2","title":"<code>tag</code><sup>Required</sup>","text":"<pre><code>public readonly tag: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"latest\"</li> </ul> <p>A Docker image tag applied to the image.</p>"},{"location":"api/container.typescript/#idockerclientconfig","title":"IDockerClientConfig","text":"<ul> <li>Implemented By: DockerClientConfig, IDockerClientConfig</li> </ul>"},{"location":"api/container.typescript/#properties_32","title":"Properties","text":"Name Type Description <code>config</code> <code>IDockerClientConfigType</code> Docker client configuration. <code>configFilePath</code> <code>string</code> Docker client config path."},{"location":"api/container.typescript/#configrequired_1","title":"<code>config</code><sup>Required</sup>","text":"<pre><code>public readonly config: IDockerClientConfigType;\n</code></pre> <ul> <li>Type: IDockerClientConfigType</li> </ul> <p>Docker client configuration.</p>"},{"location":"api/container.typescript/#configfilepathrequired_1","title":"<code>configFilePath</code><sup>Required</sup>","text":"<pre><code>public readonly configFilePath: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: $HOME/.docker/config.json</li> </ul> <p>Docker client config path.</p>"},{"location":"api/container.typescript/#idockerclientconfigtype","title":"IDockerClientConfigType","text":"<ul> <li>Implemented By: IDockerClientConfigType</li> </ul>"},{"location":"api/container.typescript/#properties_33","title":"Properties","text":"Name Type Description <code>auths</code> <code>{[ key: string ]: any}</code> No description. <code>credHelpers</code> <code>{[ key: string ]: string}</code> No description. <code>credsStore</code> <code>string</code> No description. <code>rawInput</code> <code>{[ key: string ]: string}</code> No description."},{"location":"api/container.typescript/#authsoptional","title":"<code>auths</code><sup>Optional</sup>","text":"<pre><code>public readonly auths: {[ key: string ]: any};\n</code></pre> <ul> <li>Type: {[ key: string ]: any}</li> </ul>"},{"location":"api/container.typescript/#credhelpersoptional","title":"<code>credHelpers</code><sup>Optional</sup>","text":"<pre><code>public readonly credHelpers: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#credsstoreoptional","title":"<code>credsStore</code><sup>Optional</sup>","text":"<pre><code>public readonly credsStore: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/container.typescript/#rawinputoptional","title":"<code>rawInput</code><sup>Optional</sup>","text":"<pre><code>public readonly rawInput: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/container.typescript/#idockerpush","title":"IDockerPush","text":"<ul> <li>Implemented By: DockerPush, IDockerPush</li> </ul>"},{"location":"api/container.typescript/#properties_34","title":"Properties","text":"Name Type Description <code>containerImage</code> <code>string</code> The name of the Docker image to push to the <code>registry</code>. <code>registry</code> <code>string</code> The Docker registry the image should be pushed to. <code>tag</code> <code>string</code> The Docker image tag that should be pushed to the <code>registry</code>. <code>loginEnvVar</code> <code>string</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here. <code>userEnvVar</code> <code>string</code> If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here."},{"location":"api/container.typescript/#containerimagerequired_2","title":"<code>containerImage</code><sup>Required</sup>","text":"<pre><code>public readonly containerImage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Docker image to push to the <code>registry</code>.</p>"},{"location":"api/container.typescript/#registryrequired_6","title":"<code>registry</code><sup>Required</sup>","text":"<pre><code>public readonly registry: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: index.docker.io/v1</li> </ul> <p>The Docker registry the image should be pushed to.</p>"},{"location":"api/container.typescript/#tagrequired_3","title":"<code>tag</code><sup>Required</sup>","text":"<pre><code>public readonly tag: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: <code>latest</code></li> </ul> <p>The Docker image tag that should be pushed to the <code>registry</code>.</p>"},{"location":"api/container.typescript/#loginenvvaroptional_2","title":"<code>loginEnvVar</code><sup>Optional</sup>","text":"<pre><code>public readonly loginEnvVar: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the password or token, here.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.typescript/#userenvvaroptional_2","title":"<code>userEnvVar</code><sup>Optional</sup>","text":"<pre><code>public readonly userEnvVar: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>If you have to login to the registry before the push, you have to provide the name of the environment variable, which contains the username value, here.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue!</p>"},{"location":"api/container.typescript/#ikanikoexecute","title":"IKanikoExecute","text":"<ul> <li>Implemented By: KanikoExecute, IKanikoExecute</li> </ul>"},{"location":"api/container.typescript/#properties_35","title":"Properties","text":"Name Type Description <code>context</code> <code>string</code> Context which will be send to kaniko. <code>dockerClientConfig</code> <code>DockerClientConfig</code> Creates the Docker configuration file base on objects settings, to authenticate against given registries. <code>dockerfile</code> <code>string</code> Name of the dockerfile to use. <code>enablePush</code> <code>boolean</code> Enable push to container registry, disabled to allow subsequent jobs to act on container tarball. <code>imageName</code> <code>string</code> Image name which will be created. <code>imageTag</code> <code>string</code> The tag the image will be tagged with. <code>verbosity</code> <code>string</code> Verbosity of kaniko logging. <code>buildArgs</code> <code>{[ key: string ]: any}</code> Container build arguments, used to instrument the container image build. <code>buildTarget</code> <code>string</code> For container multistage builds name of the build stage you want to create. <code>registries</code> <code>string[] | Registry[]</code> List of container registries to push created image to. <code>tarPath</code> <code>string</code> Container images created by kaniko are tarball files."},{"location":"api/container.typescript/#contextrequired_3","title":"<code>context</code><sup>Required</sup>","text":"<pre><code>public readonly context: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.CI_PROJECT_DIR</li> </ul> <p>Context which will be send to kaniko.</p>"},{"location":"api/container.typescript/#dockerclientconfigrequired_9","title":"<code>dockerClientConfig</code><sup>Required</sup>","text":"<pre><code>public readonly dockerClientConfig: DockerClientConfig;\n</code></pre> <ul> <li>Type: DockerClientConfig</li> </ul> <p>Creates the Docker configuration file base on objects settings, to authenticate against given registries.</p> <p>Defaults to a <code>DockerClientConfig</code> with login to the official Docker Hub and expecting credentials given as environment variables <code>REGISTRY_USER</code> and <code>REGISTRY_LOGIN</code>.</p>"},{"location":"api/container.typescript/#dockerfilerequired_1","title":"<code>dockerfile</code><sup>Required</sup>","text":"<pre><code>public readonly dockerfile: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"Dockerfile\"</li> </ul> <p>Name of the dockerfile to use.</p> <p>File is relative to context.</p>"},{"location":"api/container.typescript/#enablepushrequired_1","title":"<code>enablePush</code><sup>Required</sup>","text":"<pre><code>public readonly enablePush: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: false</li> </ul> <p>Enable push to container registry, disabled to allow subsequent jobs to act on container tarball.</p>"},{"location":"api/container.typescript/#imagenamerequired_13","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.CI_PROJECT_NAME.</li> </ul> <p>Image name which will be created.</p>"},{"location":"api/container.typescript/#imagetagrequired_10","title":"<code>imageTag</code><sup>Required</sup>","text":"<pre><code>public readonly imageTag: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.CI_COMMIT_TAG</li> </ul> <p>The tag the image will be tagged with.</p>"},{"location":"api/container.typescript/#verbosityrequired_1","title":"<code>verbosity</code><sup>Required</sup>","text":"<pre><code>public readonly verbosity: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"info\"</li> </ul> <p>Verbosity of kaniko logging.</p>"},{"location":"api/container.typescript/#buildargsoptional_2","title":"<code>buildArgs</code><sup>Optional</sup>","text":"<pre><code>public readonly buildArgs: {[ key: string ]: any};\n</code></pre> <ul> <li>Type: {[ key: string ]: any}</li> </ul> <p>Container build arguments, used to instrument the container image build.</p>"},{"location":"api/container.typescript/#buildtargetoptional_2","title":"<code>buildTarget</code><sup>Optional</sup>","text":"<pre><code>public readonly buildTarget: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>For container multistage builds name of the build stage you want to create.</p> <p>Image tag will be appended with the build_target. e.g. latest-buildtarget.</p>"},{"location":"api/container.typescript/#registriesoptional_2","title":"<code>registries</code><sup>Optional</sup>","text":"<pre><code>public readonly registries: string[] | Registry[];\n</code></pre> <ul> <li>Type: string[] | Registry[]</li> </ul> <p>List of container registries to push created image to.</p>"},{"location":"api/container.typescript/#tarpathoptional_4","title":"<code>tarPath</code><sup>Optional</sup>","text":"<pre><code>public readonly tarPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Container images created by kaniko are tarball files.</p> <p>This is the path where to store the image, will be named with suffix <code>.tar</code>. This path will be created if not present.</p>"},{"location":"api/container.typescript/#itrivyignorefilecheck","title":"ITrivyIgnoreFileCheck","text":"<ul> <li>Implemented By: TrivyIgnoreFileCheck, ITrivyIgnoreFileCheck</li> </ul>"},{"location":"api/container.typescript/#properties_36","title":"Properties","text":"Name Type Description <code>trivyignorePath</code> <code>string</code> Path to the <code>.trivyignore</code> file."},{"location":"api/container.typescript/#trivyignorepathrequired_1","title":"<code>trivyignorePath</code><sup>Required</sup>","text":"<pre><code>public readonly trivyignorePath: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.ciProjectDir/.trivyignore</li> </ul> <p>Path to the <code>.trivyignore</code> file.</p>"},{"location":"api/container.typescript/#itrivyscanlocalimage","title":"ITrivyScanLocalImage","text":"<ul> <li>Implemented By: TrivyScanLocalImage, ITrivyScanLocalImage</li> </ul>"},{"location":"api/container.typescript/#properties_37","title":"Properties","text":"Name Type Description <code>debug</code> <code>boolean</code> If trivy should run in debug mode. <code>exitIfVulnerable</code> <code>boolean</code> Exit code when vulnerabilities were found. <code>imageName</code> <code>string</code> Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended. <code>imagePath</code> <code>string</code> Path where to find the container image. <code>outputFormat</code> <code>string</code> Scan output format, possible values (table, json). <code>severity</code> <code>string</code> Severities of vulnerabilities to be displayed (comma separated). <code>vulnerabilityTypes</code> <code>string</code> List of vulnerability types (comma separated). <code>trivyConfig</code> <code>string</code> Additional options to pass to <code>trivy</code> binary."},{"location":"api/container.typescript/#debugrequired_1","title":"<code>debug</code><sup>Required</sup>","text":"<pre><code>public readonly debug: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: false</li> </ul> <p>If trivy should run in debug mode.</p>"},{"location":"api/container.typescript/#exitifvulnerablerequired_1","title":"<code>exitIfVulnerable</code><sup>Required</sup>","text":"<pre><code>public readonly exitIfVulnerable: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul> <p>Exit code when vulnerabilities were found.</p> <p>If true exit code is 1 else 0.</p>"},{"location":"api/container.typescript/#imagenamerequired_14","title":"<code>imageName</code><sup>Required</sup>","text":"<pre><code>public readonly imageName: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.CI_PROJECT_NAME</li> </ul> <p>Container image name, searched for in <code>imagePath</code> and gets <code>.tar</code> appended.</p>"},{"location":"api/container.typescript/#imagepathrequired_3","title":"<code>imagePath</code><sup>Required</sup>","text":"<pre><code>public readonly imagePath: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: PredefinedVariables.CI_PROJECT_DIR</li> </ul> <p>Path where to find the container image.</p>"},{"location":"api/container.typescript/#outputformatrequired_1","title":"<code>outputFormat</code><sup>Required</sup>","text":"<pre><code>public readonly outputFormat: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"table\"</li> </ul> <p>Scan output format, possible values (table, json).</p>"},{"location":"api/container.typescript/#severityrequired_1","title":"<code>severity</code><sup>Required</sup>","text":"<pre><code>public readonly severity: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\"</li> </ul> <p>Severities of vulnerabilities to be displayed (comma separated).</p>"},{"location":"api/container.typescript/#vulnerabilitytypesrequired_1","title":"<code>vulnerabilityTypes</code><sup>Required</sup>","text":"<pre><code>public readonly vulnerabilityTypes: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"os,library\"</li> </ul> <p>List of vulnerability types (comma separated).</p>"},{"location":"api/container.typescript/#trivyconfigoptional_2","title":"<code>trivyConfig</code><sup>Optional</sup>","text":"<pre><code>public readonly trivyConfig: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Additional options to pass to <code>trivy</code> binary.</p>"},{"location":"api/git.python/","title":"<code>git</code> Submodule","text":""},{"location":"api/git.python/#structs","title":"Structs","text":""},{"location":"api/git.python/#gitmirrorprops","title":"GitMirrorProps","text":""},{"location":"api/git.python/#initializer","title":"Initializer","text":"<pre><code>from gcix import git\ngit.GitMirrorProps(\nremote_repository: str,\ngit_config_user_email: str = None,\ngit_config_user_name: str = None,\njob_name: str = None,\njob_stage: str = None,\nprivate_key_variable: str = None,\nrun_only_for_repository_url: str = None,\nscript_hook: typing.List[str] = None\n)\n</code></pre>"},{"location":"api/git.python/#properties","title":"Properties","text":"Name Type Description <code>remote_repository</code> <code>str</code> The git repository the code of the pipelines repository should be mirrored to. <code>git_config_user_email</code> <code>str</code> The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL. <code>git_config_user_name</code> <code>str</code> The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>private_key_variable</code> <code>str</code> DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project. <code>run_only_for_repository_url</code> <code>str</code> When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again. <code>script_hook</code> <code>typing.List[str]</code> This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote."},{"location":"api/git.python/#remote_repositoryrequired","title":"<code>remote_repository</code><sup>Required</sup>","text":"<pre><code>remote_repository: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The git repository the code of the pipelines repository should be mirrored to.</p>"},{"location":"api/git.python/#git_config_user_emailoptional","title":"<code>git_config_user_email</code><sup>Optional</sup>","text":"<pre><code>git_config_user_email: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL.</p>"},{"location":"api/git.python/#git_config_user_nameoptional","title":"<code>git_config_user_name</code><sup>Optional</sup>","text":"<pre><code>git_config_user_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME.</p>"},{"location":"api/git.python/#job_nameoptional","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/git.python/#job_stageoptional","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/git.python/#private_key_variableoptional","title":"<code>private_key_variable</code><sup>Optional</sup>","text":"<pre><code>private_key_variable: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project.</p>"},{"location":"api/git.python/#run_only_for_repository_urloptional","title":"<code>run_only_for_repository_url</code><sup>Optional</sup>","text":"<pre><code>run_only_for_repository_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again.</p> <p>With this variable the job only runs, when its value matches the CI_REPOSITORY_URL of the current repository.</p>"},{"location":"api/git.python/#script_hookoptional","title":"<code>script_hook</code><sup>Optional</sup>","text":"<pre><code>script_hook: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote.</p> <p>This hook is mostly meant to be for git configuration commands, required to push to the remote repository.</p>"},{"location":"api/git.python/#classes","title":"Classes","text":""},{"location":"api/git.python/#gitmirror","title":"GitMirror","text":"<ul> <li>Implements: IGitMirror</li> </ul> <p>This job clones the CI_COMMIT_REF_NAME of the current repository and forcefully pushes this REF to the <code>remote_repository</code>.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: git-mirror</li> <li>stage: deploy</li> <li>image: PredefinedImages.ALPINE_GIT</li> </ul>"},{"location":"api/git.python/#initializers","title":"Initializers","text":"<pre><code>from gcix import git\ngit.GitMirror(\nremote_repository: str,\ngit_config_user_email: str = None,\ngit_config_user_name: str = None,\njob_name: str = None,\njob_stage: str = None,\nprivate_key_variable: str = None,\nrun_only_for_repository_url: str = None,\nscript_hook: typing.List[str] = None\n)\n</code></pre> Name Type Description <code>remote_repository</code> <code>str</code> The git repository the code of the pipelines repository should be mirrored to. <code>git_config_user_email</code> <code>str</code> The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL. <code>git_config_user_name</code> <code>str</code> The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME. <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>private_key_variable</code> <code>str</code> DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project. <code>run_only_for_repository_url</code> <code>str</code> When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again. <code>script_hook</code> <code>typing.List[str]</code> This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote."},{"location":"api/git.python/#remote_repositoryrequired_1","title":"<code>remote_repository</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The git repository the code of the pipelines repository should be mirrored to.</p>"},{"location":"api/git.python/#git_config_user_emailoptional_1","title":"<code>git_config_user_email</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL.</p>"},{"location":"api/git.python/#git_config_user_nameoptional_1","title":"<code>git_config_user_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME.</p>"},{"location":"api/git.python/#job_nameoptional_1","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/git.python/#job_stageoptional_1","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/git.python/#private_key_variableoptional_1","title":"<code>private_key_variable</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project.</p>"},{"location":"api/git.python/#run_only_for_repository_urloptional_1","title":"<code>run_only_for_repository_url</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again.</p> <p>With this variable the job only runs, when its value matches the CI_REPOSITORY_URL of the current repository.</p>"},{"location":"api/git.python/#script_hookoptional_1","title":"<code>script_hook</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul> <p>This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote.</p> <p>This hook is mostly meant to be for git configuration commands, required to push to the remote repository.</p>"},{"location":"api/git.python/#methods","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/git.python/#add_dependencies","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#dependenciesrequired","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/git.python/#add_needs","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#needsrequired","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/git.python/#add_parent","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/git.python/#parentrequired","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/git.python/#add_tags","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#tagsrequired","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/git.python/#add_variables","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#variablesrequired","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/git.python/#append_rules","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#rulesrequired","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/git.python/#append_scripts","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#scriptsrequired","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/git.python/#assign_allow_failure","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#allow_failurerequired","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/git.python/#assign_artifacts","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#artifactsrequired","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/git.python/#assign_cache","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#cacherequired","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/git.python/#assign_dependencies","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#dependenciesrequired_1","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/git.python/#assign_image","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/git.python/#imagerequired","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/git.python/#assign_needs","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#needsrequired_1","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/git.python/#assign_tags","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#tagsrequired_1","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/git.python/#copy","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/git.python/#extend_name","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/git.python/#namerequired","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/git.python/#extend_stage","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/git.python/#stagerequired","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/git.python/#extend_stage_value","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/git.python/#stagerequired_1","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/git.python/#get_all_instance_names","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/git.python/#childoptional","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/git.python/#is_equal","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/git.python/#comparablerequired","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/git.python/#prepend_rules","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#rulesrequired_1","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/git.python/#prepend_scripts","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/git.python/#scriptsrequired_1","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/git.python/#render","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/git.python/#properties_1","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>git_config_user_email</code> <code>str</code> The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL. <code>git_config_user_name</code> <code>str</code> The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME. <code>remote_repository</code> <code>str</code> The git repository the code of the pipelines repository should be mirrored to. <code>script_hook</code> <code>typing.List[str]</code> This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote. <code>private_key_variable</code> <code>str</code> DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project. <code>run_only_for_repository_url</code> <code>str</code> When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again."},{"location":"api/git.python/#tagsrequired_2","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/git.python/#allow_failurerequired_1","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/git.python/#namerequired_1","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/git.python/#ordered_tagsrequired","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/git.python/#parentsrequired","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/git.python/#scriptsrequired_2","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/git.python/#stagerequired_2","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/git.python/#artifactsoptional","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/git.python/#cacheoptional","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/git.python/#dependenciesoptional","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/git.python/#imageoptional","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/git.python/#needsoptional","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/git.python/#originaloptional","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/git.python/#rulesoptional","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/git.python/#variablesoptional","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/git.python/#git_config_user_emailrequired","title":"<code>git_config_user_email</code><sup>Required</sup>","text":"<pre><code>git_config_user_email: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL.</p>"},{"location":"api/git.python/#git_config_user_namerequired","title":"<code>git_config_user_name</code><sup>Required</sup>","text":"<pre><code>git_config_user_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME.</p>"},{"location":"api/git.python/#remote_repositoryrequired_2","title":"<code>remote_repository</code><sup>Required</sup>","text":"<pre><code>remote_repository: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The git repository the code of the pipelines repository should be mirrored to.</p>"},{"location":"api/git.python/#script_hookrequired","title":"<code>script_hook</code><sup>Required</sup>","text":"<pre><code>script_hook: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote.</p> <p>This hook is mostly meant to be for git configuration commands, required to push to the remote repository.</p>"},{"location":"api/git.python/#private_key_variableoptional_2","title":"<code>private_key_variable</code><sup>Optional</sup>","text":"<pre><code>private_key_variable: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project.</p>"},{"location":"api/git.python/#run_only_for_repository_urloptional_2","title":"<code>run_only_for_repository_url</code><sup>Optional</sup>","text":"<pre><code>run_only_for_repository_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again.</p> <p>With this variable the job only runs, when its value matches the CI_REPOSITORY_URL of the current repository.</p>"},{"location":"api/git.python/#protocols","title":"Protocols","text":""},{"location":"api/git.python/#igitmirror","title":"IGitMirror","text":"<ul> <li>Implemented By: gcix.aws.CdkMirrorToCodecommit, GitMirror, gcix.aws.ICdkMirrorToCodecommit, IGitMirror</li> </ul>"},{"location":"api/git.python/#properties_2","title":"Properties","text":"Name Type Description <code>git_config_user_email</code> <code>str</code> The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL. <code>git_config_user_name</code> <code>str</code> The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME. <code>remote_repository</code> <code>str</code> The git repository the code of the pipelines repository should be mirrored to. <code>script_hook</code> <code>typing.List[str]</code> This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote. <code>private_key_variable</code> <code>str</code> DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project. <code>run_only_for_repository_url</code> <code>str</code> When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again."},{"location":"api/git.python/#git_config_user_emailrequired_1","title":"<code>git_config_user_email</code><sup>Required</sup>","text":"<pre><code>git_config_user_email: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL.</p>"},{"location":"api/git.python/#git_config_user_namerequired_1","title":"<code>git_config_user_name</code><sup>Required</sup>","text":"<pre><code>git_config_user_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME.</p>"},{"location":"api/git.python/#remote_repositoryrequired_3","title":"<code>remote_repository</code><sup>Required</sup>","text":"<pre><code>remote_repository: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The git repository the code of the pipelines repository should be mirrored to.</p>"},{"location":"api/git.python/#script_hookrequired_1","title":"<code>script_hook</code><sup>Required</sup>","text":"<pre><code>script_hook: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote.</p> <p>This hook is mostly meant to be for git configuration commands, required to push to the remote repository.</p>"},{"location":"api/git.python/#private_key_variableoptional_3","title":"<code>private_key_variable</code><sup>Optional</sup>","text":"<pre><code>private_key_variable: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project.</p>"},{"location":"api/git.python/#run_only_for_repository_urloptional_3","title":"<code>run_only_for_repository_url</code><sup>Optional</sup>","text":"<pre><code>run_only_for_repository_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again.</p> <p>With this variable the job only runs, when its value matches the CI_REPOSITORY_URL of the current repository.</p>"},{"location":"api/git.typescript/","title":"<code>git</code> Submodule","text":""},{"location":"api/git.typescript/#structs","title":"Structs","text":""},{"location":"api/git.typescript/#gitmirrorprops","title":"GitMirrorProps","text":""},{"location":"api/git.typescript/#initializer","title":"Initializer","text":"<pre><code>import { git } from '@gcix/gcix'\nconst gitMirrorProps: git.GitMirrorProps = { ... }\n</code></pre>"},{"location":"api/git.typescript/#properties","title":"Properties","text":"Name Type Description <code>remoteRepository</code> <code>string</code> The git repository the code of the pipelines repository should be mirrored to. <code>gitConfigUserEmail</code> <code>string</code> The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL. <code>gitConfigUserName</code> <code>string</code> The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME. <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>privateKeyVariable</code> <code>string</code> DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project. <code>runOnlyForRepositoryUrl</code> <code>string</code> When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again. <code>scriptHook</code> <code>string[]</code> This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote."},{"location":"api/git.typescript/#remoterepositoryrequired","title":"<code>remoteRepository</code><sup>Required</sup>","text":"<pre><code>public readonly remoteRepository: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The git repository the code of the pipelines repository should be mirrored to.</p>"},{"location":"api/git.typescript/#gitconfiguseremailoptional","title":"<code>gitConfigUserEmail</code><sup>Optional</sup>","text":"<pre><code>public readonly gitConfigUserEmail: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL.</p>"},{"location":"api/git.typescript/#gitconfigusernameoptional","title":"<code>gitConfigUserName</code><sup>Optional</sup>","text":"<pre><code>public readonly gitConfigUserName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME.</p>"},{"location":"api/git.typescript/#jobnameoptional","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/git.typescript/#jobstageoptional","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/git.typescript/#privatekeyvariableoptional","title":"<code>privateKeyVariable</code><sup>Optional</sup>","text":"<pre><code>public readonly privateKeyVariable: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project.</p>"},{"location":"api/git.typescript/#runonlyforrepositoryurloptional","title":"<code>runOnlyForRepositoryUrl</code><sup>Optional</sup>","text":"<pre><code>public readonly runOnlyForRepositoryUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again.</p> <p>With this variable the job only runs, when its value matches the CI_REPOSITORY_URL of the current repository.</p>"},{"location":"api/git.typescript/#scripthookoptional","title":"<code>scriptHook</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptHook: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote.</p> <p>This hook is mostly meant to be for git configuration commands, required to push to the remote repository.</p>"},{"location":"api/git.typescript/#classes","title":"Classes","text":""},{"location":"api/git.typescript/#gitmirror","title":"GitMirror","text":"<ul> <li>Implements: IGitMirror</li> </ul> <p>This job clones the CI_COMMIT_REF_NAME of the current repository and forcefully pushes this REF to the <code>remote_repository</code>.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: git-mirror</li> <li>stage: deploy</li> <li>image: PredefinedImages.ALPINE_GIT</li> </ul>"},{"location":"api/git.typescript/#initializers","title":"Initializers","text":"<pre><code>import { git } from '@gcix/gcix'\nnew git.GitMirror(props: GitMirrorProps)\n</code></pre> Name Type Description <code>props</code> <code>GitMirrorProps</code> No description."},{"location":"api/git.typescript/#propsrequired","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: GitMirrorProps</li> </ul>"},{"location":"api/git.typescript/#methods","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/git.typescript/#adddependencies","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/git.typescript/#dependenciesrequired","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/git.typescript/#addneeds","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/git.typescript/#needsrequired","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/git.typescript/#addparent","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/git.typescript/#parentrequired","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/git.typescript/#addtags","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/git.typescript/#tagsrequired","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/git.typescript/#addvariables","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/git.typescript/#variablesrequired","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/git.typescript/#appendrules","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/git.typescript/#rulesrequired","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/git.typescript/#appendscripts","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/git.typescript/#scriptsrequired","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/git.typescript/#assignallowfailure","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/git.typescript/#allowfailurerequired","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/git.typescript/#assignartifacts","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/git.typescript/#artifactsrequired","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/git.typescript/#assigncache","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/git.typescript/#cacherequired","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/git.typescript/#assigndependencies","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/git.typescript/#dependenciesrequired_1","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/git.typescript/#assignimage","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/git.typescript/#imagerequired","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/git.typescript/#assignneeds","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/git.typescript/#needsrequired_1","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/git.typescript/#assigntags","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/git.typescript/#tagsrequired_1","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/git.typescript/#copy","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/git.typescript/#extendname","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/git.typescript/#namerequired","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/git.typescript/#extendstage","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/git.typescript/#stagerequired","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/git.typescript/#extendstagevalue","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/git.typescript/#stagerequired_1","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/git.typescript/#getallinstancenames","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/git.typescript/#childoptional","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/git.typescript/#isequal","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/git.typescript/#comparablerequired","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/git.typescript/#prependrules","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/git.typescript/#rulesrequired_1","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/git.typescript/#prependscripts","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/git.typescript/#scriptsrequired_1","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/git.typescript/#render","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/git.typescript/#properties_1","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>gitConfigUserEmail</code> <code>string</code> The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL. <code>gitConfigUserName</code> <code>string</code> The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME. <code>remoteRepository</code> <code>string</code> The git repository the code of the pipelines repository should be mirrored to. <code>scriptHook</code> <code>string[]</code> This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote. <code>privateKeyVariable</code> <code>string</code> DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project. <code>runOnlyForRepositoryUrl</code> <code>string</code> When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again."},{"location":"api/git.typescript/#tagsrequired_2","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/git.typescript/#allowfailurerequired_1","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/git.typescript/#namerequired_1","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/git.typescript/#orderedtagsrequired","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/git.typescript/#parentsrequired","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/git.typescript/#scriptsrequired_2","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/git.typescript/#stagerequired_2","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/git.typescript/#artifactsoptional","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/git.typescript/#cacheoptional","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/git.typescript/#dependenciesoptional","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/git.typescript/#imageoptional","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/git.typescript/#needsoptional","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/git.typescript/#originaloptional","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/git.typescript/#rulesoptional","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/git.typescript/#variablesoptional","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/git.typescript/#gitconfiguseremailrequired","title":"<code>gitConfigUserEmail</code><sup>Required</sup>","text":"<pre><code>public readonly gitConfigUserEmail: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL.</p>"},{"location":"api/git.typescript/#gitconfigusernamerequired","title":"<code>gitConfigUserName</code><sup>Required</sup>","text":"<pre><code>public readonly gitConfigUserName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME.</p>"},{"location":"api/git.typescript/#remoterepositoryrequired_1","title":"<code>remoteRepository</code><sup>Required</sup>","text":"<pre><code>public readonly remoteRepository: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The git repository the code of the pipelines repository should be mirrored to.</p>"},{"location":"api/git.typescript/#scripthookrequired","title":"<code>scriptHook</code><sup>Required</sup>","text":"<pre><code>public readonly scriptHook: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote.</p> <p>This hook is mostly meant to be for git configuration commands, required to push to the remote repository.</p>"},{"location":"api/git.typescript/#privatekeyvariableoptional_1","title":"<code>privateKeyVariable</code><sup>Optional</sup>","text":"<pre><code>public readonly privateKeyVariable: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project.</p>"},{"location":"api/git.typescript/#runonlyforrepositoryurloptional_1","title":"<code>runOnlyForRepositoryUrl</code><sup>Optional</sup>","text":"<pre><code>public readonly runOnlyForRepositoryUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again.</p> <p>With this variable the job only runs, when its value matches the CI_REPOSITORY_URL of the current repository.</p>"},{"location":"api/git.typescript/#protocols","title":"Protocols","text":""},{"location":"api/git.typescript/#igitmirror","title":"IGitMirror","text":"<ul> <li>Implemented By: @gcix/gcix.aws.CdkMirrorToCodecommit, GitMirror, @gcix/gcix.aws.ICdkMirrorToCodecommit, IGitMirror</li> </ul>"},{"location":"api/git.typescript/#properties_2","title":"Properties","text":"Name Type Description <code>gitConfigUserEmail</code> <code>string</code> The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL. <code>gitConfigUserName</code> <code>string</code> The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME. <code>remoteRepository</code> <code>string</code> The git repository the code of the pipelines repository should be mirrored to. <code>scriptHook</code> <code>string[]</code> This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote. <code>privateKeyVariable</code> <code>string</code> DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project. <code>runOnlyForRepositoryUrl</code> <code>string</code> When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again."},{"location":"api/git.typescript/#gitconfiguseremailrequired_1","title":"<code>gitConfigUserEmail</code><sup>Required</sup>","text":"<pre><code>public readonly gitConfigUserEmail: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The 'user.email' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_EMAIL.</p>"},{"location":"api/git.typescript/#gitconfigusernamerequired_1","title":"<code>gitConfigUserName</code><sup>Required</sup>","text":"<pre><code>public readonly gitConfigUserName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The 'user.name' with which the commits to the remote repository should be made. Defaults to GITLAB_USER_NAME.</p>"},{"location":"api/git.typescript/#remoterepositoryrequired_2","title":"<code>remoteRepository</code><sup>Required</sup>","text":"<pre><code>public readonly remoteRepository: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The git repository the code of the pipelines repository should be mirrored to.</p>"},{"location":"api/git.typescript/#scripthookrequired_1","title":"<code>scriptHook</code><sup>Required</sup>","text":"<pre><code>public readonly scriptHook: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>This list of strings could contain any commands that should be executed between pulling the current repository and pushing it to the remote.</p> <p>This hook is mostly meant to be for git configuration commands, required to push to the remote repository.</p>"},{"location":"api/git.typescript/#privatekeyvariableoptional_2","title":"<code>privateKeyVariable</code><sup>Optional</sup>","text":"<pre><code>public readonly privateKeyVariable: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>DO NOT PROVIDE YOUR PRIVATE SSH KEY HERE!!! This parameter takes the name of the Gitlab environment variable, which contains the private ssh key used to push to the remote repository. This one should be created as protected and masked variable in the 'CI/CD' settings of your project.</p>"},{"location":"api/git.typescript/#runonlyforrepositoryurloptional_2","title":"<code>runOnlyForRepositoryUrl</code><sup>Optional</sup>","text":"<pre><code>public readonly runOnlyForRepositoryUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>When mirroring to a remote Gitlab instance, you don't want to run this mirroring job there again.</p> <p>With this variable the job only runs, when its value matches the CI_REPOSITORY_URL of the current repository.</p>"},{"location":"api/gitlab.python/","title":"<code>gitlab</code> Submodule","text":""},{"location":"api/gitlab.python/#structs","title":"Structs","text":""},{"location":"api/gitlab.python/#pagesasciidoctorprops","title":"PagesAsciiDoctorProps","text":""},{"location":"api/gitlab.python/#initializer","title":"Initializer","text":"<pre><code>from gcix import gitlab\ngitlab.PagesAsciiDoctorProps(\nout_file: str,\nsource: str,\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre>"},{"location":"api/gitlab.python/#properties","title":"Properties","text":"Name Type Description <code>out_file</code> <code>str</code> Output HTML file. <code>source</code> <code>str</code> Source .adoc files to translate to HTML files. <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job."},{"location":"api/gitlab.python/#out_filerequired","title":"<code>out_file</code><sup>Required</sup>","text":"<pre><code>out_file: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Output HTML file.</p>"},{"location":"api/gitlab.python/#sourcerequired","title":"<code>source</code><sup>Required</sup>","text":"<pre><code>source: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Source .adoc files to translate to HTML files.</p>"},{"location":"api/gitlab.python/#job_nameoptional","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/gitlab.python/#job_stageoptional","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/gitlab.python/#pagespdoc3props","title":"PagesPdoc3Props","text":""},{"location":"api/gitlab.python/#initializer_1","title":"Initializer","text":"<pre><code>from gcix import gitlab\ngitlab.PagesPdoc3Props(\nmodule: str,\njob_name: str = None,\njob_stage: str = None,\noutput_path: str = None\n)\n</code></pre>"},{"location":"api/gitlab.python/#properties_1","title":"Properties","text":"Name Type Description <code>module</code> <code>str</code> The Python module name. <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job. <code>output_path</code> <code>str</code> A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to."},{"location":"api/gitlab.python/#modulerequired","title":"<code>module</code><sup>Required</sup>","text":"<pre><code>module: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The Python module name.</p> <p>This may be an import path resolvable in the current environment, or a file path to a Python module or package.</p>"},{"location":"api/gitlab.python/#job_nameoptional_1","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/gitlab.python/#job_stageoptional_1","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/gitlab.python/#output_pathoptional","title":"<code>output_path</code><sup>Optional</sup>","text":"<pre><code>output_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to.</p> <p>Defaults to \"/\".</p>"},{"location":"api/gitlab.python/#pagessphinxprops","title":"PagesSphinxProps","text":""},{"location":"api/gitlab.python/#initializer_2","title":"Initializer","text":"<pre><code>from gcix import gitlab\ngitlab.PagesSphinxProps(\njob_name: str = None,\njob_stage: str = None,\npip: PipInstallRequirementsProps = None\n)\n</code></pre>"},{"location":"api/gitlab.python/#properties_2","title":"Properties","text":"Name Type Description <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job. <code>pip</code> <code>gcix.python.PipInstallRequirementsProps</code> No description."},{"location":"api/gitlab.python/#job_nameoptional_2","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/gitlab.python/#job_stageoptional_2","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/gitlab.python/#pipoptional","title":"<code>pip</code><sup>Optional</sup>","text":"<pre><code>pip: PipInstallRequirementsProps\n</code></pre> <ul> <li>Type: gcix.python.PipInstallRequirementsProps</li> </ul>"},{"location":"api/gitlab.python/#classes","title":"Classes","text":""},{"location":"api/gitlab.python/#gitlabscripts","title":"GitlabScripts","text":"<p>GitlabScripts Class Documentation.</p> <p>The <code>GitlabScripts</code> class provides utility methods for performing various Git-related actions in the context of GitLab.</p>"},{"location":"api/gitlab.python/#static-functions","title":"Static Functions","text":"Name Description <code>clone_repository</code> Clones a repository from a remote Git server using the Git command."},{"location":"api/gitlab.python/#clone_repository","title":"<code>clone_repository</code>","text":"<pre><code>from gcix import gitlab\ngitlab.GitlabScripts.clone_repository(\npath: str,\nbranch: str = None\n)\n</code></pre> <p>Clones a repository from a remote Git server using the Git command.</p>"},{"location":"api/gitlab.python/#pathrequired","title":"<code>path</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The path of the repository to clone.</p> <p>Should start with a forward slash (\"/\").</p>"},{"location":"api/gitlab.python/#branchoptional","title":"<code>branch</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>(Optional) The branch name to clone from the remote repository.</p> <p>Currently, only \"main\" is supported.</p>"},{"location":"api/gitlab.python/#pagesasciidoctor","title":"PagesAsciiDoctor","text":"<ul> <li>Implements: IPagesAsciiDoctor</li> </ul> <p>Translate the AsciiDoc source FILE as Gitlab Pages HTML5 file.</p> <p>Runs <code>asciidoctor {source} -o public{out_file}</code>and stores the output as artifact under the <code>public</code> directory.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: asciidoctor-pages</li> <li>stage: build</li> <li>image: ruby:3-alpine</li> <li>artifacts: Path 'public'</li> </ul>"},{"location":"api/gitlab.python/#initializers","title":"Initializers","text":"<pre><code>from gcix import gitlab\ngitlab.PagesAsciiDoctor(\nout_file: str,\nsource: str,\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre> Name Type Description <code>out_file</code> <code>str</code> Output HTML file. <code>source</code> <code>str</code> Source .adoc files to translate to HTML files. <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job."},{"location":"api/gitlab.python/#out_filerequired_1","title":"<code>out_file</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Output HTML file.</p>"},{"location":"api/gitlab.python/#sourcerequired_1","title":"<code>source</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Source .adoc files to translate to HTML files.</p>"},{"location":"api/gitlab.python/#job_nameoptional_3","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/gitlab.python/#job_stageoptional_3","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/gitlab.python/#methods","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/gitlab.python/#add_dependencies","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#dependenciesrequired","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#add_needs","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#needsrequired","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#add_parent","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/gitlab.python/#parentrequired","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/gitlab.python/#add_tags","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#tagsrequired","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#add_variables","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#variablesrequired","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/gitlab.python/#append_rules","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#rulesrequired","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/gitlab.python/#append_scripts","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#scriptsrequired","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#assign_allow_failure","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#allow_failurerequired","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/gitlab.python/#assign_artifacts","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#artifactsrequired","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/gitlab.python/#assign_cache","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#cacherequired","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/gitlab.python/#assign_dependencies","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#dependenciesrequired_1","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#assign_image","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/gitlab.python/#imagerequired","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/gitlab.python/#assign_needs","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#needsrequired_1","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#assign_tags","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#tagsrequired_1","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#copy","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/gitlab.python/#extend_name","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/gitlab.python/#namerequired","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#extend_stage","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/gitlab.python/#stagerequired","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#extend_stage_value","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/gitlab.python/#stagerequired_1","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#get_all_instance_names","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/gitlab.python/#childoptional","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/gitlab.python/#is_equal","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/gitlab.python/#comparablerequired","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/gitlab.python/#prepend_rules","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#rulesrequired_1","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/gitlab.python/#prepend_scripts","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#scriptsrequired_1","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#render","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/gitlab.python/#properties_3","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>out_file</code> <code>str</code> Output HTML file. <code>source</code> <code>str</code> Source .adoc files to translate to HTML files."},{"location":"api/gitlab.python/#tagsrequired_2","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/gitlab.python/#allow_failurerequired_1","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/gitlab.python/#namerequired_1","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#ordered_tagsrequired","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/gitlab.python/#parentsrequired","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/gitlab.python/#scriptsrequired_2","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#stagerequired_2","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#artifactsoptional","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/gitlab.python/#cacheoptional","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/gitlab.python/#dependenciesoptional","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#imageoptional","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/gitlab.python/#needsoptional","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#originaloptional","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/gitlab.python/#rulesoptional","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/gitlab.python/#variablesoptional","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/gitlab.python/#out_filerequired_2","title":"<code>out_file</code><sup>Required</sup>","text":"<pre><code>out_file: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Output HTML file.</p>"},{"location":"api/gitlab.python/#sourcerequired_2","title":"<code>source</code><sup>Required</sup>","text":"<pre><code>source: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Source .adoc files to translate to HTML files.</p>"},{"location":"api/gitlab.python/#pagespdoc3","title":"PagesPdoc3","text":"<ul> <li>Implements: IPagesPdoc3</li> </ul> <p>Generate a HTML API documentation of you python code as Gitlab Pages.</p> <p>Runs <code>pdoc3 --html -f --skip-errors --output-dir public{path} {module}</code> and stores the output as artifact under the <code>public</code> directory.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: pdoc3-pages</li> <li>stage: build</li> <li>artifacts: Path 'public'</li> </ul>"},{"location":"api/gitlab.python/#initializers_1","title":"Initializers","text":"<pre><code>from gcix import gitlab\ngitlab.PagesPdoc3(\nmodule: str,\njob_name: str = None,\njob_stage: str = None,\noutput_path: str = None\n)\n</code></pre> Name Type Description <code>module</code> <code>str</code> The Python module name. <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job. <code>output_path</code> <code>str</code> A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to."},{"location":"api/gitlab.python/#modulerequired_1","title":"<code>module</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The Python module name.</p> <p>This may be an import path resolvable in the current environment, or a file path to a Python module or package.</p>"},{"location":"api/gitlab.python/#job_nameoptional_4","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/gitlab.python/#job_stageoptional_4","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/gitlab.python/#output_pathoptional_1","title":"<code>output_path</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to.</p> <p>Defaults to \"/\".</p>"},{"location":"api/gitlab.python/#methods_1","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/gitlab.python/#add_dependencies_1","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#dependenciesrequired_2","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#add_needs_1","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#needsrequired_2","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#add_parent_1","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/gitlab.python/#parentrequired_1","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/gitlab.python/#add_tags_1","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#tagsrequired_3","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#add_variables_1","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#variablesrequired_1","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/gitlab.python/#append_rules_1","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#rulesrequired_2","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/gitlab.python/#append_scripts_1","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#scriptsrequired_3","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#assign_allow_failure_1","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#allow_failurerequired_2","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/gitlab.python/#assign_artifacts_1","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#artifactsrequired_1","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/gitlab.python/#assign_cache_1","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#cacherequired_1","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/gitlab.python/#assign_dependencies_1","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#dependenciesrequired_3","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#assign_image_1","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/gitlab.python/#imagerequired_1","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/gitlab.python/#assign_needs_1","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#needsrequired_3","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#assign_tags_1","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#tagsrequired_4","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#copy_1","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/gitlab.python/#extend_name_1","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/gitlab.python/#namerequired_2","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#extend_stage_1","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/gitlab.python/#stagerequired_3","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#extend_stage_value_1","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/gitlab.python/#stagerequired_4","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#get_all_instance_names_1","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/gitlab.python/#childoptional_1","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/gitlab.python/#is_equal_1","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/gitlab.python/#comparablerequired_1","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/gitlab.python/#prepend_rules_1","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#rulesrequired_3","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/gitlab.python/#prepend_scripts_1","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#scriptsrequired_4","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#render_1","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/gitlab.python/#properties_4","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>module</code> <code>str</code> The Python module name. <code>output_path</code> <code>str</code> A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to."},{"location":"api/gitlab.python/#tagsrequired_5","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/gitlab.python/#allow_failurerequired_3","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/gitlab.python/#namerequired_3","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#ordered_tagsrequired_1","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/gitlab.python/#parentsrequired_1","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/gitlab.python/#scriptsrequired_5","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#stagerequired_5","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#artifactsoptional_1","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/gitlab.python/#cacheoptional_1","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/gitlab.python/#dependenciesoptional_1","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#imageoptional_1","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/gitlab.python/#needsoptional_1","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#originaloptional_1","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/gitlab.python/#rulesoptional_1","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/gitlab.python/#variablesoptional_1","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/gitlab.python/#modulerequired_2","title":"<code>module</code><sup>Required</sup>","text":"<pre><code>module: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The Python module name.</p> <p>This may be an import path resolvable in the current environment, or a file path to a Python module or package.</p>"},{"location":"api/gitlab.python/#output_pathrequired","title":"<code>output_path</code><sup>Required</sup>","text":"<pre><code>output_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to.</p> <p>Defaults to \"/\".</p>"},{"location":"api/gitlab.python/#pagessphinx","title":"PagesSphinx","text":"<ul> <li>Implements: IPagesSphinx</li> </ul> <p>Runs <code>sphinx-build -b html -E -a docs public/${CI_COMMIT_REF_NAME}</code> and installs project requirements. Uses: (<code>PythonScripts.PipInstallRequirements()</code>).</p> <ul> <li>Requires a <code>docs/requirements.txt</code> in your project folder<code>containing at least</code>sphinx`</li> <li>Creates artifacts for Gitlab Pages under <code>pages</code></li> </ul> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: sphinx-pages</li> <li>stage: build</li> <li>artifacts: Path 'public'</li> </ul>"},{"location":"api/gitlab.python/#initializers_2","title":"Initializers","text":"<pre><code>from gcix import gitlab\ngitlab.PagesSphinx(\njob_name: str = None,\njob_stage: str = None,\npip: PipInstallRequirementsProps = None\n)\n</code></pre> Name Type Description <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job. <code>pip</code> <code>gcix.python.PipInstallRequirementsProps</code> No description."},{"location":"api/gitlab.python/#job_nameoptional_5","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/gitlab.python/#job_stageoptional_5","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/gitlab.python/#pipoptional_1","title":"<code>pip</code><sup>Optional</sup>","text":"<ul> <li>Type: gcix.python.PipInstallRequirementsProps</li> </ul>"},{"location":"api/gitlab.python/#methods_2","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/gitlab.python/#add_dependencies_2","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#dependenciesrequired_4","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#add_needs_2","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#needsrequired_4","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#add_parent_2","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/gitlab.python/#parentrequired_2","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/gitlab.python/#add_tags_2","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#tagsrequired_6","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#add_variables_2","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#variablesrequired_2","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/gitlab.python/#append_rules_2","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#rulesrequired_4","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/gitlab.python/#append_scripts_2","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#scriptsrequired_6","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#assign_allow_failure_2","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#allow_failurerequired_4","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/gitlab.python/#assign_artifacts_2","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#artifactsrequired_2","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/gitlab.python/#assign_cache_2","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#cacherequired_2","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/gitlab.python/#assign_dependencies_2","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#dependenciesrequired_5","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#assign_image_2","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/gitlab.python/#imagerequired_2","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/gitlab.python/#assign_needs_2","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#needsrequired_5","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#assign_tags_2","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#tagsrequired_7","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#copy_2","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/gitlab.python/#extend_name_2","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/gitlab.python/#namerequired_4","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#extend_stage_2","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/gitlab.python/#stagerequired_6","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#extend_stage_value_2","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/gitlab.python/#stagerequired_7","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#get_all_instance_names_2","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/gitlab.python/#childoptional_2","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/gitlab.python/#is_equal_2","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/gitlab.python/#comparablerequired_2","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/gitlab.python/#prepend_rules_2","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#rulesrequired_5","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/gitlab.python/#prepend_scripts_2","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/gitlab.python/#scriptsrequired_7","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#render_2","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/gitlab.python/#properties_5","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>pip</code> <code>gcix.python.PipInstallRequirementsProps</code> No description."},{"location":"api/gitlab.python/#tagsrequired_8","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/gitlab.python/#allow_failurerequired_5","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/gitlab.python/#namerequired_5","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#ordered_tagsrequired_2","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/gitlab.python/#parentsrequired_2","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/gitlab.python/#scriptsrequired_8","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/gitlab.python/#stagerequired_8","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/gitlab.python/#artifactsoptional_2","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/gitlab.python/#cacheoptional_2","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/gitlab.python/#dependenciesoptional_2","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#imageoptional_2","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/gitlab.python/#needsoptional_2","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/gitlab.python/#originaloptional_2","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/gitlab.python/#rulesoptional_2","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/gitlab.python/#variablesoptional_2","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/gitlab.python/#pipoptional_2","title":"<code>pip</code><sup>Optional</sup>","text":"<pre><code>pip: PipInstallRequirementsProps\n</code></pre> <ul> <li>Type: gcix.python.PipInstallRequirementsProps</li> </ul>"},{"location":"api/gitlab.python/#protocols","title":"Protocols","text":""},{"location":"api/gitlab.python/#ipagesasciidoctor","title":"IPagesAsciiDoctor","text":"<ul> <li>Implemented By: PagesAsciiDoctor, IPagesAsciiDoctor</li> </ul>"},{"location":"api/gitlab.python/#properties_6","title":"Properties","text":"Name Type Description <code>out_file</code> <code>str</code> Output HTML file. <code>source</code> <code>str</code> Source .adoc files to translate to HTML files."},{"location":"api/gitlab.python/#out_filerequired_3","title":"<code>out_file</code><sup>Required</sup>","text":"<pre><code>out_file: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Output HTML file.</p>"},{"location":"api/gitlab.python/#sourcerequired_3","title":"<code>source</code><sup>Required</sup>","text":"<pre><code>source: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Source .adoc files to translate to HTML files.</p>"},{"location":"api/gitlab.python/#ipagespdoc3","title":"IPagesPdoc3","text":"<ul> <li>Implemented By: PagesPdoc3, IPagesPdoc3</li> </ul>"},{"location":"api/gitlab.python/#properties_7","title":"Properties","text":"Name Type Description <code>module</code> <code>str</code> The Python module name. <code>output_path</code> <code>str</code> A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to."},{"location":"api/gitlab.python/#modulerequired_3","title":"<code>module</code><sup>Required</sup>","text":"<pre><code>module: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The Python module name.</p> <p>This may be an import path resolvable in the current environment, or a file path to a Python module or package.</p>"},{"location":"api/gitlab.python/#output_pathrequired_1","title":"<code>output_path</code><sup>Required</sup>","text":"<pre><code>output_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to.</p> <p>Defaults to \"/\".</p>"},{"location":"api/gitlab.python/#ipagessphinx","title":"IPagesSphinx","text":"<ul> <li>Implemented By: PagesSphinx, IPagesSphinx</li> </ul>"},{"location":"api/gitlab.python/#properties_8","title":"Properties","text":"Name Type Description <code>pip</code> <code>gcix.python.PipInstallRequirementsProps</code> No description."},{"location":"api/gitlab.python/#pipoptional_3","title":"<code>pip</code><sup>Optional</sup>","text":"<pre><code>pip: PipInstallRequirementsProps\n</code></pre> <ul> <li>Type: gcix.python.PipInstallRequirementsProps</li> </ul>"},{"location":"api/gitlab.typescript/","title":"<code>gitlab</code> Submodule","text":""},{"location":"api/gitlab.typescript/#structs","title":"Structs","text":""},{"location":"api/gitlab.typescript/#pagesasciidoctorprops","title":"PagesAsciiDoctorProps","text":""},{"location":"api/gitlab.typescript/#initializer","title":"Initializer","text":"<pre><code>import { gitlab } from '@gcix/gcix'\nconst pagesAsciiDoctorProps: gitlab.PagesAsciiDoctorProps = { ... }\n</code></pre>"},{"location":"api/gitlab.typescript/#properties","title":"Properties","text":"Name Type Description <code>outFile</code> <code>string</code> Output HTML file. <code>source</code> <code>string</code> Source .adoc files to translate to HTML files. <code>jobName</code> <code>string</code> The name of the job. <code>jobStage</code> <code>string</code> The stage of the job."},{"location":"api/gitlab.typescript/#outfilerequired","title":"<code>outFile</code><sup>Required</sup>","text":"<pre><code>public readonly outFile: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Output HTML file.</p>"},{"location":"api/gitlab.typescript/#sourcerequired","title":"<code>source</code><sup>Required</sup>","text":"<pre><code>public readonly source: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Source .adoc files to translate to HTML files.</p>"},{"location":"api/gitlab.typescript/#jobnameoptional","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the job.</p>"},{"location":"api/gitlab.typescript/#jobstageoptional","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the job.</p>"},{"location":"api/gitlab.typescript/#pagespdoc3props","title":"PagesPdoc3Props","text":""},{"location":"api/gitlab.typescript/#initializer_1","title":"Initializer","text":"<pre><code>import { gitlab } from '@gcix/gcix'\nconst pagesPdoc3Props: gitlab.PagesPdoc3Props = { ... }\n</code></pre>"},{"location":"api/gitlab.typescript/#properties_1","title":"Properties","text":"Name Type Description <code>module</code> <code>string</code> The Python module name. <code>jobName</code> <code>string</code> The name of the job. <code>jobStage</code> <code>string</code> The stage of the job. <code>outputPath</code> <code>string</code> A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to."},{"location":"api/gitlab.typescript/#modulerequired","title":"<code>module</code><sup>Required</sup>","text":"<pre><code>public readonly module: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The Python module name.</p> <p>This may be an import path resolvable in the current environment, or a file path to a Python module or package.</p>"},{"location":"api/gitlab.typescript/#jobnameoptional_1","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the job.</p>"},{"location":"api/gitlab.typescript/#jobstageoptional_1","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the job.</p>"},{"location":"api/gitlab.typescript/#outputpathoptional","title":"<code>outputPath</code><sup>Optional</sup>","text":"<pre><code>public readonly outputPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to.</p> <p>Defaults to \"/\".</p>"},{"location":"api/gitlab.typescript/#pagessphinxprops","title":"PagesSphinxProps","text":""},{"location":"api/gitlab.typescript/#initializer_2","title":"Initializer","text":"<pre><code>import { gitlab } from '@gcix/gcix'\nconst pagesSphinxProps: gitlab.PagesSphinxProps = { ... }\n</code></pre>"},{"location":"api/gitlab.typescript/#properties_2","title":"Properties","text":"Name Type Description <code>jobName</code> <code>string</code> The name of the job. <code>jobStage</code> <code>string</code> The stage of the job. <code>pip</code> <code>@gcix/gcix.python.PipInstallRequirementsProps</code> No description."},{"location":"api/gitlab.typescript/#jobnameoptional_2","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the job.</p>"},{"location":"api/gitlab.typescript/#jobstageoptional_2","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the job.</p>"},{"location":"api/gitlab.typescript/#pipoptional","title":"<code>pip</code><sup>Optional</sup>","text":"<pre><code>public readonly pip: PipInstallRequirementsProps;\n</code></pre> <ul> <li>Type: @gcix/gcix.python.PipInstallRequirementsProps</li> </ul>"},{"location":"api/gitlab.typescript/#classes","title":"Classes","text":""},{"location":"api/gitlab.typescript/#gitlabscripts","title":"GitlabScripts","text":"<p>GitlabScripts Class Documentation.</p> <p>The <code>GitlabScripts</code> class provides utility methods for performing various Git-related actions in the context of GitLab.</p>"},{"location":"api/gitlab.typescript/#static-functions","title":"Static Functions","text":"Name Description <code>cloneRepository</code> Clones a repository from a remote Git server using the Git command."},{"location":"api/gitlab.typescript/#clonerepository","title":"<code>cloneRepository</code>","text":"<pre><code>import { gitlab } from '@gcix/gcix'\ngitlab.GitlabScripts.cloneRepository(path: string, branch?: string)\n</code></pre> <p>Clones a repository from a remote Git server using the Git command.</p>"},{"location":"api/gitlab.typescript/#pathrequired","title":"<code>path</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>The path of the repository to clone.</p> <p>Should start with a forward slash (\"/\").</p>"},{"location":"api/gitlab.typescript/#branchoptional","title":"<code>branch</code><sup>Optional</sup>","text":"<ul> <li>Type: string</li> </ul> <p>(Optional) The branch name to clone from the remote repository.</p> <p>Currently, only \"main\" is supported.</p>"},{"location":"api/gitlab.typescript/#pagesasciidoctor","title":"PagesAsciiDoctor","text":"<ul> <li>Implements: IPagesAsciiDoctor</li> </ul> <p>Translate the AsciiDoc source FILE as Gitlab Pages HTML5 file.</p> <p>Runs <code>asciidoctor {source} -o public{out_file}</code>and stores the output as artifact under the <code>public</code> directory.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: asciidoctor-pages</li> <li>stage: build</li> <li>image: ruby:3-alpine</li> <li>artifacts: Path 'public'</li> </ul>"},{"location":"api/gitlab.typescript/#initializers","title":"Initializers","text":"<pre><code>import { gitlab } from '@gcix/gcix'\nnew gitlab.PagesAsciiDoctor(props: PagesAsciiDoctorProps)\n</code></pre> Name Type Description <code>props</code> <code>PagesAsciiDoctorProps</code> No description."},{"location":"api/gitlab.typescript/#propsrequired","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: PagesAsciiDoctorProps</li> </ul>"},{"location":"api/gitlab.typescript/#methods","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/gitlab.typescript/#adddependencies","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#dependenciesrequired","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#addneeds","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#needsrequired","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#addparent","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/gitlab.typescript/#parentrequired","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/gitlab.typescript/#addtags","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#tagsrequired","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#addvariables","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#variablesrequired","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/gitlab.typescript/#appendrules","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#rulesrequired","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/gitlab.typescript/#appendscripts","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#scriptsrequired","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#assignallowfailure","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#allowfailurerequired","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/gitlab.typescript/#assignartifacts","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#artifactsrequired","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/gitlab.typescript/#assigncache","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#cacherequired","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/gitlab.typescript/#assigndependencies","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#dependenciesrequired_1","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#assignimage","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/gitlab.typescript/#imagerequired","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/gitlab.typescript/#assignneeds","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#needsrequired_1","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#assigntags","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#tagsrequired_1","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#copy","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/gitlab.typescript/#extendname","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/gitlab.typescript/#namerequired","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#extendstage","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/gitlab.typescript/#stagerequired","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#extendstagevalue","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/gitlab.typescript/#stagerequired_1","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#getallinstancenames","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/gitlab.typescript/#childoptional","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/gitlab.typescript/#isequal","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/gitlab.typescript/#comparablerequired","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/gitlab.typescript/#prependrules","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#rulesrequired_1","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/gitlab.typescript/#prependscripts","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#scriptsrequired_1","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#render","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/gitlab.typescript/#properties_3","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>outFile</code> <code>string</code> Output HTML file. <code>source</code> <code>string</code> Source .adoc files to translate to HTML files."},{"location":"api/gitlab.typescript/#tagsrequired_2","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/gitlab.typescript/#allowfailurerequired_1","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/gitlab.typescript/#namerequired_1","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#orderedtagsrequired","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/gitlab.typescript/#parentsrequired","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/gitlab.typescript/#scriptsrequired_2","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#stagerequired_2","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#artifactsoptional","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/gitlab.typescript/#cacheoptional","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/gitlab.typescript/#dependenciesoptional","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#imageoptional","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/gitlab.typescript/#needsoptional","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#originaloptional","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/gitlab.typescript/#rulesoptional","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/gitlab.typescript/#variablesoptional","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/gitlab.typescript/#outfilerequired_1","title":"<code>outFile</code><sup>Required</sup>","text":"<pre><code>public readonly outFile: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Output HTML file.</p>"},{"location":"api/gitlab.typescript/#sourcerequired_1","title":"<code>source</code><sup>Required</sup>","text":"<pre><code>public readonly source: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Source .adoc files to translate to HTML files.</p>"},{"location":"api/gitlab.typescript/#pagespdoc3","title":"PagesPdoc3","text":"<ul> <li>Implements: IPagesPdoc3</li> </ul> <p>Generate a HTML API documentation of you python code as Gitlab Pages.</p> <p>Runs <code>pdoc3 --html -f --skip-errors --output-dir public{path} {module}</code> and stores the output as artifact under the <code>public</code> directory.</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: pdoc3-pages</li> <li>stage: build</li> <li>artifacts: Path 'public'</li> </ul>"},{"location":"api/gitlab.typescript/#initializers_1","title":"Initializers","text":"<pre><code>import { gitlab } from '@gcix/gcix'\nnew gitlab.PagesPdoc3(props: PagesPdoc3Props)\n</code></pre> Name Type Description <code>props</code> <code>PagesPdoc3Props</code> No description."},{"location":"api/gitlab.typescript/#propsrequired_1","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: PagesPdoc3Props</li> </ul>"},{"location":"api/gitlab.typescript/#methods_1","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/gitlab.typescript/#adddependencies_1","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#dependenciesrequired_2","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#addneeds_1","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#needsrequired_2","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#addparent_1","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/gitlab.typescript/#parentrequired_1","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/gitlab.typescript/#addtags_1","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#tagsrequired_3","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#addvariables_1","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#variablesrequired_1","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/gitlab.typescript/#appendrules_1","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#rulesrequired_2","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/gitlab.typescript/#appendscripts_1","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#scriptsrequired_3","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#assignallowfailure_1","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#allowfailurerequired_2","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/gitlab.typescript/#assignartifacts_1","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#artifactsrequired_1","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/gitlab.typescript/#assigncache_1","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#cacherequired_1","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/gitlab.typescript/#assigndependencies_1","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#dependenciesrequired_3","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#assignimage_1","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/gitlab.typescript/#imagerequired_1","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/gitlab.typescript/#assignneeds_1","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#needsrequired_3","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#assigntags_1","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#tagsrequired_4","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#copy_1","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/gitlab.typescript/#extendname_1","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/gitlab.typescript/#namerequired_2","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#extendstage_1","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/gitlab.typescript/#stagerequired_3","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#extendstagevalue_1","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/gitlab.typescript/#stagerequired_4","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#getallinstancenames_1","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/gitlab.typescript/#childoptional_1","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/gitlab.typescript/#isequal_1","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/gitlab.typescript/#comparablerequired_1","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/gitlab.typescript/#prependrules_1","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#rulesrequired_3","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/gitlab.typescript/#prependscripts_1","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#scriptsrequired_4","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#render_1","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/gitlab.typescript/#properties_4","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>module</code> <code>string</code> The Python module name. <code>outputPath</code> <code>string</code> A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to."},{"location":"api/gitlab.typescript/#tagsrequired_5","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/gitlab.typescript/#allowfailurerequired_3","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/gitlab.typescript/#namerequired_3","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#orderedtagsrequired_1","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/gitlab.typescript/#parentsrequired_1","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/gitlab.typescript/#scriptsrequired_5","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#stagerequired_5","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#artifactsoptional_1","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/gitlab.typescript/#cacheoptional_1","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/gitlab.typescript/#dependenciesoptional_1","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#imageoptional_1","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/gitlab.typescript/#needsoptional_1","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#originaloptional_1","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/gitlab.typescript/#rulesoptional_1","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/gitlab.typescript/#variablesoptional_1","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/gitlab.typescript/#modulerequired_1","title":"<code>module</code><sup>Required</sup>","text":"<pre><code>public readonly module: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The Python module name.</p> <p>This may be an import path resolvable in the current environment, or a file path to a Python module or package.</p>"},{"location":"api/gitlab.typescript/#outputpathrequired","title":"<code>outputPath</code><sup>Required</sup>","text":"<pre><code>public readonly outputPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to.</p> <p>Defaults to \"/\".</p>"},{"location":"api/gitlab.typescript/#pagessphinx","title":"PagesSphinx","text":"<ul> <li>Implements: IPagesSphinx</li> </ul> <p>Runs <code>sphinx-build -b html -E -a docs public/${CI_COMMIT_REF_NAME}</code> and installs project requirements. Uses: (<code>PythonScripts.PipInstallRequirements()</code>).</p> <p>Requires a <code>docs/requirements.txt</code> in your project folder<code>containing   at least</code>sphinx<code>- Creates artifacts for Gitlab Pages under</code>pages`</p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: sphinx-pages</li> <li>stage: build</li> <li>artifacts: Path 'public'</li> </ul>"},{"location":"api/gitlab.typescript/#initializers_2","title":"Initializers","text":"<pre><code>import { gitlab } from '@gcix/gcix'\nnew gitlab.PagesSphinx(props: PagesSphinxProps)\n</code></pre> Name Type Description <code>props</code> <code>PagesSphinxProps</code> No description."},{"location":"api/gitlab.typescript/#propsrequired_2","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: PagesSphinxProps</li> </ul>"},{"location":"api/gitlab.typescript/#methods_2","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/gitlab.typescript/#adddependencies_2","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#dependenciesrequired_4","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#addneeds_2","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#needsrequired_4","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#addparent_2","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/gitlab.typescript/#parentrequired_2","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/gitlab.typescript/#addtags_2","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#tagsrequired_6","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#addvariables_2","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#variablesrequired_2","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/gitlab.typescript/#appendrules_2","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#rulesrequired_4","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/gitlab.typescript/#appendscripts_2","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#scriptsrequired_6","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#assignallowfailure_2","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#allowfailurerequired_4","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/gitlab.typescript/#assignartifacts_2","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#artifactsrequired_2","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/gitlab.typescript/#assigncache_2","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#cacherequired_2","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/gitlab.typescript/#assigndependencies_2","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#dependenciesrequired_5","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#assignimage_2","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/gitlab.typescript/#imagerequired_2","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/gitlab.typescript/#assignneeds_2","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#needsrequired_5","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#assigntags_2","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#tagsrequired_7","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#copy_2","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/gitlab.typescript/#extendname_2","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/gitlab.typescript/#namerequired_4","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#extendstage_2","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/gitlab.typescript/#stagerequired_6","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#extendstagevalue_2","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/gitlab.typescript/#stagerequired_7","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#getallinstancenames_2","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/gitlab.typescript/#childoptional_2","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/gitlab.typescript/#isequal_2","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/gitlab.typescript/#comparablerequired_2","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/gitlab.typescript/#prependrules_2","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#rulesrequired_5","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/gitlab.typescript/#prependscripts_2","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/gitlab.typescript/#scriptsrequired_7","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#render_2","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/gitlab.typescript/#properties_5","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>pip</code> <code>@gcix/gcix.python.PipInstallRequirementsProps</code> No description."},{"location":"api/gitlab.typescript/#tagsrequired_8","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/gitlab.typescript/#allowfailurerequired_5","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/gitlab.typescript/#namerequired_5","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#orderedtagsrequired_2","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/gitlab.typescript/#parentsrequired_2","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/gitlab.typescript/#scriptsrequired_8","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/gitlab.typescript/#stagerequired_8","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/gitlab.typescript/#artifactsoptional_2","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/gitlab.typescript/#cacheoptional_2","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/gitlab.typescript/#dependenciesoptional_2","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#imageoptional_2","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/gitlab.typescript/#needsoptional_2","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/gitlab.typescript/#originaloptional_2","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/gitlab.typescript/#rulesoptional_2","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/gitlab.typescript/#variablesoptional_2","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/gitlab.typescript/#pipoptional_1","title":"<code>pip</code><sup>Optional</sup>","text":"<pre><code>public readonly pip: PipInstallRequirementsProps;\n</code></pre> <ul> <li>Type: @gcix/gcix.python.PipInstallRequirementsProps</li> </ul>"},{"location":"api/gitlab.typescript/#protocols","title":"Protocols","text":""},{"location":"api/gitlab.typescript/#ipagesasciidoctor","title":"IPagesAsciiDoctor","text":"<ul> <li>Implemented By: PagesAsciiDoctor, IPagesAsciiDoctor</li> </ul>"},{"location":"api/gitlab.typescript/#properties_6","title":"Properties","text":"Name Type Description <code>outFile</code> <code>string</code> Output HTML file. <code>source</code> <code>string</code> Source .adoc files to translate to HTML files."},{"location":"api/gitlab.typescript/#outfilerequired_2","title":"<code>outFile</code><sup>Required</sup>","text":"<pre><code>public readonly outFile: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Output HTML file.</p>"},{"location":"api/gitlab.typescript/#sourcerequired_2","title":"<code>source</code><sup>Required</sup>","text":"<pre><code>public readonly source: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Source .adoc files to translate to HTML files.</p>"},{"location":"api/gitlab.typescript/#ipagespdoc3","title":"IPagesPdoc3","text":"<ul> <li>Implemented By: PagesPdoc3, IPagesPdoc3</li> </ul>"},{"location":"api/gitlab.typescript/#properties_7","title":"Properties","text":"Name Type Description <code>module</code> <code>string</code> The Python module name. <code>outputPath</code> <code>string</code> A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to."},{"location":"api/gitlab.typescript/#modulerequired_2","title":"<code>module</code><sup>Required</sup>","text":"<pre><code>public readonly module: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The Python module name.</p> <p>This may be an import path resolvable in the current environment, or a file path to a Python module or package.</p>"},{"location":"api/gitlab.typescript/#outputpathrequired_1","title":"<code>outputPath</code><sup>Required</sup>","text":"<pre><code>public readonly outputPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>A sub path of the Gitlab Pages <code>public</code> directory to output generated HTML/markdown files to.</p> <p>Defaults to \"/\".</p>"},{"location":"api/gitlab.typescript/#ipagessphinx","title":"IPagesSphinx","text":"<ul> <li>Implemented By: PagesSphinx, IPagesSphinx</li> </ul>"},{"location":"api/gitlab.typescript/#properties_8","title":"Properties","text":"Name Type Description <code>pip</code> <code>@gcix/gcix.python.PipInstallRequirementsProps</code> No description."},{"location":"api/gitlab.typescript/#pipoptional_2","title":"<code>pip</code><sup>Optional</sup>","text":"<pre><code>public readonly pip: PipInstallRequirementsProps;\n</code></pre> <ul> <li>Type: @gcix/gcix.python.PipInstallRequirementsProps</li> </ul>"},{"location":"api/linux.python/","title":"<code>linux</code> Submodule","text":""},{"location":"api/linux.python/#structs","title":"Structs","text":""},{"location":"api/linux.python/#linuxinstallpackageprops","title":"LinuxInstallPackageProps","text":""},{"location":"api/linux.python/#initializer","title":"Initializer","text":"<pre><code>from gcix import linux\nlinux.LinuxInstallPackageProps(\npackages: typing.List[str],\nsudo: bool = None\n)\n</code></pre>"},{"location":"api/linux.python/#properties","title":"Properties","text":"Name Type Description <code>packages</code> <code>typing.List[str]</code> A string listing all the packages to be installed, separated by spaces. <code>sudo</code> <code>bool</code> Specifies whether the command(s) should be executed with sudo."},{"location":"api/linux.python/#packagesrequired","title":"<code>packages</code><sup>Required</sup>","text":"<pre><code>packages: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>A string listing all the packages to be installed, separated by spaces.</p>"},{"location":"api/linux.python/#sudooptional","title":"<code>sudo</code><sup>Optional</sup>","text":"<pre><code>sudo: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: false</li> </ul> <p>Specifies whether the command(s) should be executed with sudo.</p>"},{"location":"api/linux.python/#classes","title":"Classes","text":""},{"location":"api/linux.python/#linuxscripts","title":"LinuxScripts","text":""},{"location":"api/linux.python/#static-functions","title":"Static Functions","text":"Name Description <code>install_packages</code> Returns a shell command to check and install a Linux package using the available package manager."},{"location":"api/linux.python/#install_packages","title":"<code>install_packages</code>","text":"<pre><code>from gcix import linux\nlinux.LinuxScripts.install_packages(\npackages: typing.List[str],\nsudo: bool = None\n)\n</code></pre> <p>Returns a shell command to check and install a Linux package using the available package manager.</p> <p>This function is useful for installing packages within a GitLab job when the system's package manager is uncertain. Currently supported package managers are: apk, apt-get, yum, dnf, and zypper.</p> <p>Keep in mind that this function supports installing only one package name. If different package managers have different names for the same package, this script might fail.</p> <p>Source: https://unix.stackexchange.com/a/571192/139685</p>"},{"location":"api/linux.python/#packagesrequired_1","title":"<code>packages</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul> <p>A string listing all the packages to be installed, separated by spaces.</p>"},{"location":"api/linux.python/#sudooptional_1","title":"<code>sudo</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: false</li> </ul> <p>Specifies whether the command(s) should be executed with sudo.</p>"},{"location":"api/linux.typescript/","title":"<code>linux</code> Submodule","text":""},{"location":"api/linux.typescript/#structs","title":"Structs","text":""},{"location":"api/linux.typescript/#linuxinstallpackageprops","title":"LinuxInstallPackageProps","text":""},{"location":"api/linux.typescript/#initializer","title":"Initializer","text":"<pre><code>import { linux } from '@gcix/gcix'\nconst linuxInstallPackageProps: linux.LinuxInstallPackageProps = { ... }\n</code></pre>"},{"location":"api/linux.typescript/#properties","title":"Properties","text":"Name Type Description <code>packages</code> <code>string[]</code> A string listing all the packages to be installed, separated by spaces. <code>sudo</code> <code>boolean</code> Specifies whether the command(s) should be executed with sudo."},{"location":"api/linux.typescript/#packagesrequired","title":"<code>packages</code><sup>Required</sup>","text":"<pre><code>public readonly packages: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>A string listing all the packages to be installed, separated by spaces.</p>"},{"location":"api/linux.typescript/#sudooptional","title":"<code>sudo</code><sup>Optional</sup>","text":"<pre><code>public readonly sudo: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: false</li> </ul> <p>Specifies whether the command(s) should be executed with sudo.</p>"},{"location":"api/linux.typescript/#classes","title":"Classes","text":""},{"location":"api/linux.typescript/#linuxscripts","title":"LinuxScripts","text":""},{"location":"api/linux.typescript/#static-functions","title":"Static Functions","text":"Name Description <code>installPackages</code> Returns a shell command to check and install a Linux package using the available package manager."},{"location":"api/linux.typescript/#installpackages","title":"<code>installPackages</code>","text":"<pre><code>import { linux } from '@gcix/gcix'\nlinux.LinuxScripts.installPackages(props: LinuxInstallPackageProps)\n</code></pre> <p>Returns a shell command to check and install a Linux package using the available package manager.</p> <p>This function is useful for installing packages within a GitLab job when the system's package manager is uncertain. Currently supported package managers are: apk, apt-get, yum, dnf, and zypper.</p> <p>Keep in mind that this function supports installing only one package name. If different package managers have different names for the same package, this script might fail.</p> <p>Source: https://unix.stackexchange.com/a/571192/139685</p>"},{"location":"api/linux.typescript/#propsrequired","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: LinuxInstallPackageProps</li> </ul>"},{"location":"api/python.python/","title":"<code>python</code> Submodule","text":""},{"location":"api/python.python/#structs","title":"Structs","text":""},{"location":"api/python.python/#pipinstallrequirementsprops","title":"PipInstallRequirementsProps","text":"<p>Represents the properties for the <code>pipInstallRequirements</code> static method.</p>"},{"location":"api/python.python/#initializer","title":"Initializer","text":"<pre><code>from gcix import python\npython.PipInstallRequirementsProps(\npipenv_version_specifier: str = None,\nrequirements_file: str = None\n)\n</code></pre>"},{"location":"api/python.python/#properties","title":"Properties","text":"Name Type Description <code>pipenv_version_specifier</code> <code>str</code> The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to an empty string, indicating installation of the latest version. <code>requirements_file</code> <code>str</code> The location and name of the requirements file."},{"location":"api/python.python/#pipenv_version_specifieroptional","title":"<code>pipenv_version_specifier</code><sup>Optional</sup>","text":"<pre><code>pipenv_version_specifier: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"\"</li> </ul> <p>The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to an empty string, indicating installation of the latest version.</p>"},{"location":"api/python.python/#requirements_fileoptional","title":"<code>requirements_file</code><sup>Optional</sup>","text":"<pre><code>requirements_file: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: \"requirements.txt\"</li> </ul> <p>The location and name of the requirements file.</p>"},{"location":"api/python.python/#pythonbuildbdistwheelprops","title":"PythonBuildBdistWheelProps","text":""},{"location":"api/python.python/#initializer_1","title":"Initializer","text":"<pre><code>from gcix import python\npython.PythonBuildBdistWheelProps(\njob_name: str = None,\njob_stage: str = None,\npip_requirements: PipInstallRequirementsProps = None\n)\n</code></pre>"},{"location":"api/python.python/#properties_1","title":"Properties","text":"Name Type Description <code>job_name</code> <code>str</code> No description. <code>job_stage</code> <code>str</code> No description. <code>pip_requirements</code> <code>PipInstallRequirementsProps</code> No description."},{"location":"api/python.python/#job_nameoptional","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#job_stageoptional","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#pip_requirementsoptional","title":"<code>pip_requirements</code><sup>Optional</sup>","text":"<pre><code>pip_requirements: PipInstallRequirementsProps\n</code></pre> <ul> <li>Type: PipInstallRequirementsProps</li> </ul>"},{"location":"api/python.python/#pythondeploytwineuploadprops","title":"PythonDeployTwineUploadProps","text":"<p>Represents the properties for the <code>TwineUpload</code> class.</p>"},{"location":"api/python.python/#initializer_2","title":"Initializer","text":"<pre><code>from gcix import python\npython.PythonDeployTwineUploadProps(\njob_name: str = None,\njob_stage: str = None,\ntwine_password_env_var: str = None,\ntwine_repository_url: str = None,\ntwine_username_env_var: str = None\n)\n</code></pre>"},{"location":"api/python.python/#properties_2","title":"Properties","text":"Name Type Description <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job. <code>twine_password_env_var</code> <code>str</code> The name of the environment variable containing the password. <code>twine_repository_url</code> <code>str</code> The URL to the PyPI repository to which the Python artifacts will be deployed. <code>twine_username_env_var</code> <code>str</code> The name of the environment variable containing the username value."},{"location":"api/python.python/#job_nameoptional_1","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/python.python/#job_stageoptional_1","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/python.python/#twine_password_env_varoptional","title":"<code>twine_password_env_var</code><sup>Optional</sup>","text":"<pre><code>twine_password_env_var: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the environment variable containing the password.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_PASSWORD'.</p>"},{"location":"api/python.python/#twine_repository_urloptional","title":"<code>twine_repository_url</code><sup>Optional</sup>","text":"<pre><code>twine_repository_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The URL to the PyPI repository to which the Python artifacts will be deployed.</p> <p>If <code>undefined</code> the package is published to <code>https://pypi.org</code>.</p>"},{"location":"api/python.python/#twine_username_env_varoptional","title":"<code>twine_username_env_var</code><sup>Optional</sup>","text":"<pre><code>twine_username_env_var: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the environment variable containing the username value.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_USERNAME'.</p>"},{"location":"api/python.python/#pythonfullstackprops","title":"PythonFullStackProps","text":""},{"location":"api/python.python/#initializer_3","title":"Initializer","text":"<pre><code>from gcix import python\npython.PythonFullStackProps(\ntwine_prod_job_props: PythonDeployTwineUploadProps,\nb_dist_wheel_job_props: PythonBuildBdistWheelProps = None,\nevaluate_git_tag_pep440_conformity_job_props: PythonTestEvaluateGitTagPep440ConformityProps = None,\nflake8_job_props: PythonLintFlake8Props = None,\nisort_job_props: PythonLintIsortProps = None,\nmypy_job_props: PythonLintMyPyProps = None,\npytest_job_props: PythonTestPytestProps = None,\nsphinx_props_job_props: PagesSphinxProps = None,\ntwine_dev_job_props: PythonDeployTwineUploadProps = None\n)\n</code></pre>"},{"location":"api/python.python/#properties_3","title":"Properties","text":"Name Type Description <code>twine_prod_job_props</code> <code>PythonDeployTwineUploadProps</code> No description. <code>b_dist_wheel_job_props</code> <code>PythonBuildBdistWheelProps</code> No description. <code>evaluate_git_tag_pep440_conformity_job_props</code> <code>PythonTestEvaluateGitTagPep440ConformityProps</code> No description. <code>flake8_job_props</code> <code>PythonLintFlake8Props</code> No description. <code>isort_job_props</code> <code>PythonLintIsortProps</code> No description. <code>mypy_job_props</code> <code>PythonLintMyPyProps</code> No description. <code>pytest_job_props</code> <code>PythonTestPytestProps</code> No description. <code>sphinx_props_job_props</code> <code>gcix.gitlab.PagesSphinxProps</code> No description. <code>twine_dev_job_props</code> <code>PythonDeployTwineUploadProps</code> No description."},{"location":"api/python.python/#twine_prod_job_propsrequired","title":"<code>twine_prod_job_props</code><sup>Required</sup>","text":"<pre><code>twine_prod_job_props: PythonDeployTwineUploadProps\n</code></pre> <ul> <li>Type: PythonDeployTwineUploadProps</li> </ul>"},{"location":"api/python.python/#b_dist_wheel_job_propsoptional","title":"<code>b_dist_wheel_job_props</code><sup>Optional</sup>","text":"<pre><code>b_dist_wheel_job_props: PythonBuildBdistWheelProps\n</code></pre> <ul> <li>Type: PythonBuildBdistWheelProps</li> </ul>"},{"location":"api/python.python/#evaluate_git_tag_pep440_conformity_job_propsoptional","title":"<code>evaluate_git_tag_pep440_conformity_job_props</code><sup>Optional</sup>","text":"<pre><code>evaluate_git_tag_pep440_conformity_job_props: PythonTestEvaluateGitTagPep440ConformityProps\n</code></pre> <ul> <li>Type: PythonTestEvaluateGitTagPep440ConformityProps</li> </ul>"},{"location":"api/python.python/#flake8_job_propsoptional","title":"<code>flake8_job_props</code><sup>Optional</sup>","text":"<pre><code>flake8_job_props: PythonLintFlake8Props\n</code></pre> <ul> <li>Type: PythonLintFlake8Props</li> </ul>"},{"location":"api/python.python/#isort_job_propsoptional","title":"<code>isort_job_props</code><sup>Optional</sup>","text":"<pre><code>isort_job_props: PythonLintIsortProps\n</code></pre> <ul> <li>Type: PythonLintIsortProps</li> </ul>"},{"location":"api/python.python/#mypy_job_propsoptional","title":"<code>mypy_job_props</code><sup>Optional</sup>","text":"<pre><code>mypy_job_props: PythonLintMyPyProps\n</code></pre> <ul> <li>Type: PythonLintMyPyProps</li> </ul>"},{"location":"api/python.python/#pytest_job_propsoptional","title":"<code>pytest_job_props</code><sup>Optional</sup>","text":"<pre><code>pytest_job_props: PythonTestPytestProps\n</code></pre> <ul> <li>Type: PythonTestPytestProps</li> </ul>"},{"location":"api/python.python/#sphinx_props_job_propsoptional","title":"<code>sphinx_props_job_props</code><sup>Optional</sup>","text":"<pre><code>sphinx_props_job_props: PagesSphinxProps\n</code></pre> <ul> <li>Type: gcix.gitlab.PagesSphinxProps</li> </ul>"},{"location":"api/python.python/#twine_dev_job_propsoptional","title":"<code>twine_dev_job_props</code><sup>Optional</sup>","text":"<pre><code>twine_dev_job_props: PythonDeployTwineUploadProps\n</code></pre> <ul> <li>Type: PythonDeployTwineUploadProps</li> </ul>"},{"location":"api/python.python/#pythonlintflake8props","title":"PythonLintFlake8Props","text":""},{"location":"api/python.python/#initializer_4","title":"Initializer","text":"<pre><code>from gcix import python\npython.PythonLintFlake8Props(\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre>"},{"location":"api/python.python/#properties_4","title":"Properties","text":"Name Type Description <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job."},{"location":"api/python.python/#job_nameoptional_2","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/python.python/#job_stageoptional_2","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/python.python/#pythonlintisortprops","title":"PythonLintIsortProps","text":""},{"location":"api/python.python/#initializer_5","title":"Initializer","text":"<pre><code>from gcix import python\npython.PythonLintIsortProps(\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre>"},{"location":"api/python.python/#properties_5","title":"Properties","text":"Name Type Description <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job."},{"location":"api/python.python/#job_nameoptional_3","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/python.python/#job_stageoptional_3","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/python.python/#pythonlintmypyprops","title":"PythonLintMyPyProps","text":""},{"location":"api/python.python/#initializer_6","title":"Initializer","text":"<pre><code>from gcix import python\npython.PythonLintMyPyProps(\npackage_dir: str,\njob_name: str = None,\njob_stage: str = None,\nmy_py_options: str = None,\nmy_py_version: str = None\n)\n</code></pre>"},{"location":"api/python.python/#properties_6","title":"Properties","text":"Name Type Description <code>package_dir</code> <code>str</code> Package directory to type check. <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job. <code>my_py_options</code> <code>str</code> Adds arguments to mypy execution. <code>my_py_version</code> <code>str</code> If <code>mypy</code> is not already installed, this version will be installed."},{"location":"api/python.python/#package_dirrequired","title":"<code>package_dir</code><sup>Required</sup>","text":"<pre><code>package_dir: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Package directory to type check.</p>"},{"location":"api/python.python/#job_nameoptional_4","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/python.python/#job_stageoptional_4","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/python.python/#my_py_optionsoptional","title":"<code>my_py_options</code><sup>Optional</sup>","text":"<pre><code>my_py_options: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Adds arguments to mypy execution.</p>"},{"location":"api/python.python/#my_py_versionoptional","title":"<code>my_py_version</code><sup>Optional</sup>","text":"<pre><code>my_py_version: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>If <code>mypy</code> is not already installed, this version will be installed.</p> <p>Installs latest version if <code>undefined</code>.</p>"},{"location":"api/python.python/#pythontestevaluategittagpep440conformityprops","title":"PythonTestEvaluateGitTagPep440ConformityProps","text":""},{"location":"api/python.python/#initializer_7","title":"Initializer","text":"<pre><code>from gcix import python\npython.PythonTestEvaluateGitTagPep440ConformityProps(\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre>"},{"location":"api/python.python/#properties_7","title":"Properties","text":"Name Type Description <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job."},{"location":"api/python.python/#job_nameoptional_5","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/python.python/#job_stageoptional_5","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/python.python/#pythontestpytestprops","title":"PythonTestPytestProps","text":""},{"location":"api/python.python/#initializer_8","title":"Initializer","text":"<pre><code>from gcix import python\npython.PythonTestPytestProps(\njob_name: str = None,\njob_stage: str = None,\npipenv_version_specifier: str = None,\npytest_command: str = None\n)\n</code></pre>"},{"location":"api/python.python/#properties_8","title":"Properties","text":"Name Type Description <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>pipenv_version_specifier</code> <code>str</code> The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version. <code>pytest_command</code> <code>str</code> This argument is only required if you have a custom command to call pytest."},{"location":"api/python.python/#job_nameoptional_6","title":"<code>job_name</code><sup>Optional</sup>","text":"<pre><code>job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/python.python/#job_stageoptional_6","title":"<code>job_stage</code><sup>Optional</sup>","text":"<pre><code>job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/python.python/#pipenv_version_specifieroptional_1","title":"<code>pipenv_version_specifier</code><sup>Optional</sup>","text":"<pre><code>pipenv_version_specifier: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version.</p>"},{"location":"api/python.python/#pytest_commandoptional","title":"<code>pytest_command</code><sup>Optional</sup>","text":"<pre><code>pytest_command: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>This argument is only required if you have a custom command to call pytest.</p>"},{"location":"api/python.python/#classes","title":"Classes","text":""},{"location":"api/python.python/#pythonbuildbdistwheel","title":"PythonBuildBdistWheel","text":"<ul> <li>Implements: IPythonBuildBdistWheel</li> </ul> <p>Runs <code>python3 setup.py bdist_wheel</code> and installs project requirements Requirements are installed by <code>LinuxScripts.pipInstallRequirements()</code>.</p> <p>This subclass of <code>Job</code> configures the following defaults for the superclass:</p> <ul> <li>name: bdist_wheel</li> <li>stage: build</li> <li>artifacts: Path 'dist/'</li> </ul> <p>Requires a <code>Pipfile.lock</code> or <code>requirements.txt</code> in your project folder containing at least <code>setuptools</code>. Creates artifacts under the path 'dist/'.</p>"},{"location":"api/python.python/#initializers","title":"Initializers","text":"<pre><code>from gcix import python\npython.PythonBuildBdistWheel(\njob_name: str = None,\njob_stage: str = None,\npip_requirements: PipInstallRequirementsProps = None\n)\n</code></pre> Name Type Description <code>job_name</code> <code>str</code> No description. <code>job_stage</code> <code>str</code> No description. <code>pip_requirements</code> <code>PipInstallRequirementsProps</code> No description."},{"location":"api/python.python/#job_nameoptional_7","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#job_stageoptional_7","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#pip_requirementsoptional_1","title":"<code>pip_requirements</code><sup>Optional</sup>","text":"<ul> <li>Type: PipInstallRequirementsProps</li> </ul>"},{"location":"api/python.python/#methods","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.python/#add_dependencies","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_needs","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_parent","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.python/#parentrequired","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#add_tags","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#add_variables","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#variablesrequired","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#append_rules","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#append_scripts","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#assign_allow_failure","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#allow_failurerequired","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#assign_artifacts","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#artifactsrequired","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#assign_cache","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#cacherequired","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#assign_dependencies","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_1","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_image","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.python/#imagerequired","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/python.python/#assign_needs","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_1","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_tags","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_1","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#copy","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.python/#extend_name","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.python/#namerequired","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.python/#stagerequired","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_value","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.python/#stagerequired_1","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#get_all_instance_names","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.python/#childoptional","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#is_equal","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.python/#comparablerequired","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/python.python/#prepend_rules","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_1","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#prepend_scripts","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_1","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#render","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.python/#properties_9","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>pipenv_version_specifier</code> <code>str</code> No description. <code>requirements_file</code> <code>str</code> No description."},{"location":"api/python.python/#tagsrequired_2","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.python/#allow_failurerequired_1","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#namerequired_1","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#ordered_tagsrequired","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.python/#parentsrequired","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/python.python/#scriptsrequired_2","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#stagerequired_2","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#artifactsoptional","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#cacheoptional","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#dependenciesoptional","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#imageoptional","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/python.python/#needsoptional","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#originaloptional","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/python.python/#rulesoptional","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#variablesoptional","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#pipenv_version_specifieroptional_2","title":"<code>pipenv_version_specifier</code><sup>Optional</sup>","text":"<pre><code>pipenv_version_specifier: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#requirements_fileoptional_1","title":"<code>requirements_file</code><sup>Optional</sup>","text":"<pre><code>requirements_file: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#pythondeploytwineupload","title":"PythonDeployTwineUpload","text":"<ul> <li>Implements: IPythonDeployTwineUpload</li> </ul> <p>Runs:.</p> <pre><code>pip3 install --upgrade twine\npython3 -m twine upload --non-interactive --disable-progress-bar dist/*\n</code></pre> <p>Requires artifacts from a build job under <code>dist/</code> (e.g. from <code>BdistWheel()</code>)</p> <p>This subclass of <code>Job</code> configures the following defaults for the superclass:</p> <ul> <li>name: twine</li> <li>stage: deploy</li> </ul>"},{"location":"api/python.python/#initializers_1","title":"Initializers","text":"<pre><code>from gcix import python\npython.PythonDeployTwineUpload(\njob_name: str = None,\njob_stage: str = None,\ntwine_password_env_var: str = None,\ntwine_repository_url: str = None,\ntwine_username_env_var: str = None\n)\n</code></pre> Name Type Description <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job. <code>twine_password_env_var</code> <code>str</code> The name of the environment variable containing the password. <code>twine_repository_url</code> <code>str</code> The URL to the PyPI repository to which the Python artifacts will be deployed. <code>twine_username_env_var</code> <code>str</code> The name of the environment variable containing the username value."},{"location":"api/python.python/#job_nameoptional_8","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/python.python/#job_stageoptional_8","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/python.python/#twine_password_env_varoptional_1","title":"<code>twine_password_env_var</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the environment variable containing the password.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_PASSWORD'.</p>"},{"location":"api/python.python/#twine_repository_urloptional_1","title":"<code>twine_repository_url</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The URL to the PyPI repository to which the Python artifacts will be deployed.</p> <p>If <code>undefined</code> the package is published to <code>https://pypi.org</code>.</p>"},{"location":"api/python.python/#twine_username_env_varoptional_1","title":"<code>twine_username_env_var</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the environment variable containing the username value.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_USERNAME'.</p>"},{"location":"api/python.python/#methods_1","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.python/#add_dependencies_1","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_2","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_needs_1","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_2","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_parent_1","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.python/#parentrequired_1","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#add_tags_1","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_3","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#add_variables_1","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#variablesrequired_1","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#append_rules_1","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_2","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#append_scripts_1","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_3","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#assign_allow_failure_1","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#allow_failurerequired_2","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#assign_artifacts_1","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#artifactsrequired_1","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#assign_cache_1","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#cacherequired_1","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#assign_dependencies_1","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_3","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_image_1","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.python/#imagerequired_1","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/python.python/#assign_needs_1","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_3","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_tags_1","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_4","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#copy_1","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.python/#extend_name_1","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.python/#namerequired_2","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_1","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.python/#stagerequired_3","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_value_1","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.python/#stagerequired_4","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#get_all_instance_names_1","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.python/#childoptional_1","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#is_equal_1","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.python/#comparablerequired_1","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/python.python/#prepend_rules_1","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_3","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#prepend_scripts_1","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_4","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#render_1","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.python/#properties_10","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>twine_password_env_var</code> <code>str</code> The name of the environment variable containing the password. <code>twine_username_env_var</code> <code>str</code> The name of the environment variable containing the username value. <code>twine_repository_url</code> <code>str</code> The URL to the PyPI repository to which the Python artifacts will be deployed."},{"location":"api/python.python/#tagsrequired_5","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.python/#allow_failurerequired_3","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#namerequired_3","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#ordered_tagsrequired_1","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.python/#parentsrequired_1","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/python.python/#scriptsrequired_5","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#stagerequired_5","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#artifactsoptional_1","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#cacheoptional_1","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#dependenciesoptional_1","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#imageoptional_1","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/python.python/#needsoptional_1","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#originaloptional_1","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/python.python/#rulesoptional_1","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#variablesoptional_1","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#twine_password_env_varrequired","title":"<code>twine_password_env_var</code><sup>Required</sup>","text":"<pre><code>twine_password_env_var: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the environment variable containing the password.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_PASSWORD'.</p>"},{"location":"api/python.python/#twine_username_env_varrequired","title":"<code>twine_username_env_var</code><sup>Required</sup>","text":"<pre><code>twine_username_env_var: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the environment variable containing the username value.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_USERNAME'.</p>"},{"location":"api/python.python/#twine_repository_urloptional_2","title":"<code>twine_repository_url</code><sup>Optional</sup>","text":"<pre><code>twine_repository_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The URL to the PyPI repository to which the Python artifacts will be deployed.</p> <p>If <code>undefined</code> the package is published to <code>https://pypi.org</code>.</p>"},{"location":"api/python.python/#pythonfullstack","title":"PythonFullStack","text":"<ul> <li>Implements: IPythonFullStack</li> </ul> <p>Returns a sequence containing following jobs: - isort - flake8 - pytest - evaluating CI_COMMIT_TAG as valid PyPI version string (if exists) - bdist_wheel - Gitlab Pages sphinx - twine upload  Optional jobs: - mypy  The <code>varname_dev_password</code> and <code>varname_stable_password</code> arguments are only used to specify the variable name and not the actuall password.</p> <p>The variable name has to be set outside of the pipeline itself, if you set it within the pipline, that would be a security risk.</p>"},{"location":"api/python.python/#initializers_2","title":"Initializers","text":"<pre><code>from gcix import python\npython.PythonFullStack(\ntwine_prod_job_props: PythonDeployTwineUploadProps,\nb_dist_wheel_job_props: PythonBuildBdistWheelProps = None,\nevaluate_git_tag_pep440_conformity_job_props: PythonTestEvaluateGitTagPep440ConformityProps = None,\nflake8_job_props: PythonLintFlake8Props = None,\nisort_job_props: PythonLintIsortProps = None,\nmypy_job_props: PythonLintMyPyProps = None,\npytest_job_props: PythonTestPytestProps = None,\nsphinx_props_job_props: PagesSphinxProps = None,\ntwine_dev_job_props: PythonDeployTwineUploadProps = None\n)\n</code></pre> Name Type Description <code>twine_prod_job_props</code> <code>PythonDeployTwineUploadProps</code> No description. <code>b_dist_wheel_job_props</code> <code>PythonBuildBdistWheelProps</code> No description. <code>evaluate_git_tag_pep440_conformity_job_props</code> <code>PythonTestEvaluateGitTagPep440ConformityProps</code> No description. <code>flake8_job_props</code> <code>PythonLintFlake8Props</code> No description. <code>isort_job_props</code> <code>PythonLintIsortProps</code> No description. <code>mypy_job_props</code> <code>PythonLintMyPyProps</code> No description. <code>pytest_job_props</code> <code>PythonTestPytestProps</code> No description. <code>sphinx_props_job_props</code> <code>gcix.gitlab.PagesSphinxProps</code> No description. <code>twine_dev_job_props</code> <code>PythonDeployTwineUploadProps</code> No description."},{"location":"api/python.python/#twine_prod_job_propsrequired_1","title":"<code>twine_prod_job_props</code><sup>Required</sup>","text":"<ul> <li>Type: PythonDeployTwineUploadProps</li> </ul>"},{"location":"api/python.python/#b_dist_wheel_job_propsoptional_1","title":"<code>b_dist_wheel_job_props</code><sup>Optional</sup>","text":"<ul> <li>Type: PythonBuildBdistWheelProps</li> </ul>"},{"location":"api/python.python/#evaluate_git_tag_pep440_conformity_job_propsoptional_1","title":"<code>evaluate_git_tag_pep440_conformity_job_props</code><sup>Optional</sup>","text":"<ul> <li>Type: PythonTestEvaluateGitTagPep440ConformityProps</li> </ul>"},{"location":"api/python.python/#flake8_job_propsoptional_1","title":"<code>flake8_job_props</code><sup>Optional</sup>","text":"<ul> <li>Type: PythonLintFlake8Props</li> </ul>"},{"location":"api/python.python/#isort_job_propsoptional_1","title":"<code>isort_job_props</code><sup>Optional</sup>","text":"<ul> <li>Type: PythonLintIsortProps</li> </ul>"},{"location":"api/python.python/#mypy_job_propsoptional_1","title":"<code>mypy_job_props</code><sup>Optional</sup>","text":"<ul> <li>Type: PythonLintMyPyProps</li> </ul>"},{"location":"api/python.python/#pytest_job_propsoptional_1","title":"<code>pytest_job_props</code><sup>Optional</sup>","text":"<ul> <li>Type: PythonTestPytestProps</li> </ul>"},{"location":"api/python.python/#sphinx_props_job_propsoptional_1","title":"<code>sphinx_props_job_props</code><sup>Optional</sup>","text":"<ul> <li>Type: gcix.gitlab.PagesSphinxProps</li> </ul>"},{"location":"api/python.python/#twine_dev_job_propsoptional_1","title":"<code>twine_dev_job_props</code><sup>Optional</sup>","text":"<ul> <li>Type: PythonDeployTwineUploadProps</li> </ul>"},{"location":"api/python.python/#methods_2","title":"Methods","text":"Name Description <code>add_children</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> No description. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>get_all_instance_names</code> Return all instance names from the given child. <code>initialize_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initialize_artifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initialize_cache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initialize_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initialize_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initialize_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initialize_rules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initialize_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initialize_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>override_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>override_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>override_rules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>override_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>override_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.python/#add_children","title":"<code>add_children</code>","text":"<pre><code>def add_children(\njobs_or_job_collections: typing.List[typing.Union[Job, JobCollection]],\nname: str = None,\nstage: str = None\n) -&gt; JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/python.python/#jobs_or_job_collectionsrequired","title":"<code>jobs_or_job_collections</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/python.python/#nameoptional","title":"<code>name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#stageoptional","title":"<code>stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#add_dependencies_2","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_4","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_needs_2","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/python.python/#needsrequired_4","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_parent_2","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: JobCollection\n) -&gt; None\n</code></pre>"},{"location":"api/python.python/#parentrequired_2","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.JobCollection</li> </ul>"},{"location":"api/python.python/#add_tags_2","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/python.python/#tagsrequired_6","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#add_variables_2","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/python.python/#variablesrequired_2","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#append_rules_2","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/python.python/#rulesrequired_4","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#append_scripts_2","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_6","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#assign_artifacts_2","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/python.python/#artifactsrequired_2","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#assign_cache_2","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/python.python/#cacherequired_2","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#get_all_instance_names_2","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/python.python/#childoptional_2","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#initialize_allow_failure","title":"<code>initialize_allow_failure</code>","text":"<pre><code>def initialize_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/python.python/#allow_failurerequired_4","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#initialize_artifacts","title":"<code>initialize_artifacts</code>","text":"<pre><code>def initialize_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/python.python/#artifactsrequired_3","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#initialize_cache","title":"<code>initialize_cache</code>","text":"<pre><code>def initialize_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/python.python/#cacherequired_3","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#initialize_dependencies","title":"<code>initialize_dependencies</code>","text":"<pre><code>def initialize_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/python.python/#dependenciesrequired_5","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#initialize_image","title":"<code>initialize_image</code>","text":"<pre><code>def initialize_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/python.python/#imagerequired_2","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/python.python/#initialize_needs","title":"<code>initialize_needs</code>","text":"<pre><code>def initialize_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/python.python/#needsrequired_5","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#initialize_rules","title":"<code>initialize_rules</code>","text":"<pre><code>def initialize_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/python.python/#rulesrequired_5","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#initialize_tags","title":"<code>initialize_tags</code>","text":"<pre><code>def initialize_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/python.python/#tagsrequired_7","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#initialize_variables","title":"<code>initialize_variables</code>","text":"<pre><code>def initialize_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/python.python/#variablesrequired_3","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#is_equal_2","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.python/#comparablerequired_2","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/python.python/#override_allow_failure","title":"<code>override_allow_failure</code>","text":"<pre><code>def override_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/python.python/#allow_failurerequired_5","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#override_dependencies","title":"<code>override_dependencies</code>","text":"<pre><code>def override_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/python.python/#dependenciesrequired_6","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#override_image","title":"<code>override_image</code>","text":"<pre><code>def override_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/python.python/#imagerequired_3","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/python.python/#override_needs","title":"<code>override_needs</code>","text":"<pre><code>def override_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/python.python/#needsrequired_6","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#override_rules","title":"<code>override_rules</code>","text":"<pre><code>def override_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/python.python/#rulesrequired_6","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#override_tags","title":"<code>override_tags</code>","text":"<pre><code>def override_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/python.python/#tagsrequired_8","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#override_variables","title":"<code>override_variables</code>","text":"<pre><code>def override_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/python.python/#variablesrequired_4","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#prepend_rules_2","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/python.python/#rulesrequired_7","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#prepend_scripts_2","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_7","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#render_2","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.python/#properties_11","title":"Properties","text":"Name Type Description <code>last_jobs_executed</code> <code>typing.List[gcix.Job]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nested_jobs</code> <code>typing.List[gcix.Job]</code> No description. <code>populated_jobs</code> <code>typing.List[gcix.Job]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>typing.List[gcix.ChildDict]</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>ordered_tags_for_initialization</code> <code>gcix.OrderedStringSet</code> No description. <code>ordered_tags_for_replacement</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>allow_failure_for_initialization</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>allow_failure_for_replacement</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>artifacts_for_initialization</code> <code>gcix.Artifacts</code> No description. <code>artifacts_for_replacement</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>cache_for_initialization</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>dependencies_for_initialization</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>dependencies_for_replacement</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image_for_initialization</code> <code>typing.Union[str, gcix.Image]</code> No description. <code>image_for_replacement</code> <code>typing.Union[str, gcix.Image]</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>needs_for_initialization</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>needs_for_replacement</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>rules_for_initialization</code> <code>typing.List[gcix.Rule]</code> No description. <code>rules_for_replacement</code> <code>typing.List[gcix.Rule]</code> No description. <code>rules_to_append</code> <code>typing.List[gcix.Rule]</code> No description. <code>rules_to_prepend</code> <code>typing.List[gcix.Rule]</code> No description. <code>scripts_to_append</code> <code>typing.List[str]</code> No description. <code>scripts_to_prepend</code> <code>typing.List[str]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_initialization</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_replacement</code> <code>typing.Mapping[str]</code> No description. <code>b_dist_wheel_job</code> <code>PythonBuildBdistWheel</code> No description. <code>evaluate_git_tag_pep440_conformity_job</code> <code>PythonTestEvaluateGitTagPep440Conformity</code> No description. <code>flake8_job</code> <code>PythonLintFlake8</code> No description. <code>isort_job</code> <code>PythonLintIsort</code> No description. <code>pytest_job</code> <code>PythonTestPytest</code> No description. <code>twine_prod_job</code> <code>PythonDeployTwineUpload</code> No description. <code>mypy_job</code> <code>PythonLintMyPy</code> No description. <code>sphinx_job</code> <code>gcix.gitlab.PagesSphinx</code> No description. <code>twine_dev_job</code> <code>PythonDeployTwineUpload</code> No description."},{"location":"api/python.python/#last_jobs_executedrequired","title":"<code>last_jobs_executed</code><sup>Required</sup>","text":"<pre><code>last_jobs_executed: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[gcix.Job]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/python.python/#nested_jobsrequired","title":"<code>nested_jobs</code><sup>Required</sup>","text":"<pre><code>nested_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[gcix.Job]</li> </ul>"},{"location":"api/python.python/#populated_jobsrequired","title":"<code>populated_jobs</code><sup>Required</sup>","text":"<pre><code>populated_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[gcix.Job]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/python.python/#childrenrequired","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>children: typing.List[ChildDict]\n</code></pre> <ul> <li>Type: typing.List[gcix.ChildDict]</li> </ul>"},{"location":"api/python.python/#ordered_tagsrequired_2","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.python/#ordered_tags_for_initializationrequired","title":"<code>ordered_tags_for_initialization</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_initialization: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.python/#ordered_tags_for_replacementrequired","title":"<code>ordered_tags_for_replacement</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_replacement: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.python/#parentsrequired_2","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/python.python/#allow_failure_for_initializationoptional","title":"<code>allow_failure_for_initialization</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_initialization: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#allow_failure_for_replacementoptional","title":"<code>allow_failure_for_replacement</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_replacement: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#artifactsoptional_2","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#artifacts_for_initializationoptional","title":"<code>artifacts_for_initialization</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_initialization: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#artifacts_for_replacementoptional","title":"<code>artifacts_for_replacement</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_replacement: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#cacheoptional_2","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#cache_for_initializationoptional","title":"<code>cache_for_initialization</code><sup>Optional</sup>","text":"<pre><code>cache_for_initialization: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#dependenciesoptional_2","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#dependencies_for_initializationoptional","title":"<code>dependencies_for_initialization</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#dependencies_for_replacementoptional","title":"<code>dependencies_for_replacement</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#image_for_initializationoptional","title":"<code>image_for_initialization</code><sup>Optional</sup>","text":"<pre><code>image_for_initialization: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/python.python/#image_for_replacementoptional","title":"<code>image_for_replacement</code><sup>Optional</sup>","text":"<pre><code>image_for_replacement: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/python.python/#needsoptional_2","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#needs_for_initializationoptional","title":"<code>needs_for_initialization</code><sup>Optional</sup>","text":"<pre><code>needs_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#needs_for_replacementoptional","title":"<code>needs_for_replacement</code><sup>Optional</sup>","text":"<pre><code>needs_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#rules_for_initializationoptional","title":"<code>rules_for_initialization</code><sup>Optional</sup>","text":"<pre><code>rules_for_initialization: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#rules_for_replacementoptional","title":"<code>rules_for_replacement</code><sup>Optional</sup>","text":"<pre><code>rules_for_replacement: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#rules_to_appendoptional","title":"<code>rules_to_append</code><sup>Optional</sup>","text":"<pre><code>rules_to_append: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#rules_to_prependoptional","title":"<code>rules_to_prepend</code><sup>Optional</sup>","text":"<pre><code>rules_to_prepend: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#scripts_to_appendoptional","title":"<code>scripts_to_append</code><sup>Optional</sup>","text":"<pre><code>scripts_to_append: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#scripts_to_prependoptional","title":"<code>scripts_to_prepend</code><sup>Optional</sup>","text":"<pre><code>scripts_to_prepend: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#variablesoptional_2","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#variables_for_initializationoptional","title":"<code>variables_for_initialization</code><sup>Optional</sup>","text":"<pre><code>variables_for_initialization: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#variables_for_replacementoptional","title":"<code>variables_for_replacement</code><sup>Optional</sup>","text":"<pre><code>variables_for_replacement: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#b_dist_wheel_jobrequired","title":"<code>b_dist_wheel_job</code><sup>Required</sup>","text":"<pre><code>b_dist_wheel_job: PythonBuildBdistWheel\n</code></pre> <ul> <li>Type: PythonBuildBdistWheel</li> </ul>"},{"location":"api/python.python/#evaluate_git_tag_pep440_conformity_jobrequired","title":"<code>evaluate_git_tag_pep440_conformity_job</code><sup>Required</sup>","text":"<pre><code>evaluate_git_tag_pep440_conformity_job: PythonTestEvaluateGitTagPep440Conformity\n</code></pre> <ul> <li>Type: PythonTestEvaluateGitTagPep440Conformity</li> </ul>"},{"location":"api/python.python/#flake8_jobrequired","title":"<code>flake8_job</code><sup>Required</sup>","text":"<pre><code>flake8_job: PythonLintFlake8\n</code></pre> <ul> <li>Type: PythonLintFlake8</li> </ul>"},{"location":"api/python.python/#isort_jobrequired","title":"<code>isort_job</code><sup>Required</sup>","text":"<pre><code>isort_job: PythonLintIsort\n</code></pre> <ul> <li>Type: PythonLintIsort</li> </ul>"},{"location":"api/python.python/#pytest_jobrequired","title":"<code>pytest_job</code><sup>Required</sup>","text":"<pre><code>pytest_job: PythonTestPytest\n</code></pre> <ul> <li>Type: PythonTestPytest</li> </ul>"},{"location":"api/python.python/#twine_prod_jobrequired","title":"<code>twine_prod_job</code><sup>Required</sup>","text":"<pre><code>twine_prod_job: PythonDeployTwineUpload\n</code></pre> <ul> <li>Type: PythonDeployTwineUpload</li> </ul>"},{"location":"api/python.python/#mypy_joboptional","title":"<code>mypy_job</code><sup>Optional</sup>","text":"<pre><code>mypy_job: PythonLintMyPy\n</code></pre> <ul> <li>Type: PythonLintMyPy</li> </ul>"},{"location":"api/python.python/#sphinx_joboptional","title":"<code>sphinx_job</code><sup>Optional</sup>","text":"<pre><code>sphinx_job: PagesSphinx\n</code></pre> <ul> <li>Type: gcix.gitlab.PagesSphinx</li> </ul>"},{"location":"api/python.python/#twine_dev_joboptional","title":"<code>twine_dev_job</code><sup>Optional</sup>","text":"<pre><code>twine_dev_job: PythonDeployTwineUpload\n</code></pre> <ul> <li>Type: PythonDeployTwineUpload</li> </ul>"},{"location":"api/python.python/#pythonlintflake8","title":"PythonLintFlake8","text":"<ul> <li>Implements: IPythonLintFlake8</li> </ul> <p>Runs:.</p> <pre><code>pip3 install --upgrade flake8\nflake8\n</code></pre> <p>This subclass of <code>Job</code> configures the following defaults for the superclass:</p> <ul> <li>name: flake8</li> <li>stage: lint</li> </ul>"},{"location":"api/python.python/#initializers_3","title":"Initializers","text":"<pre><code>from gcix import python\npython.PythonLintFlake8(\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre> Name Type Description <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job."},{"location":"api/python.python/#job_nameoptional_9","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/python.python/#job_stageoptional_9","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/python.python/#methods_3","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.python/#add_dependencies_3","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_7","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_needs_3","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_7","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_parent_3","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.python/#parentrequired_3","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#add_tags_3","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_9","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#add_variables_3","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#variablesrequired_5","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#append_rules_3","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_8","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#append_scripts_3","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_8","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#assign_allow_failure_2","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#allow_failurerequired_6","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#assign_artifacts_3","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#artifactsrequired_4","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#assign_cache_3","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#cacherequired_4","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#assign_dependencies_2","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_8","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_image_2","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.python/#imagerequired_4","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/python.python/#assign_needs_2","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_8","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_tags_2","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_10","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#copy_2","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.python/#extend_name_2","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.python/#namerequired_4","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_2","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.python/#stagerequired_6","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_value_2","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.python/#stagerequired_7","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#get_all_instance_names_3","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.python/#childoptional_3","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#is_equal_3","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.python/#comparablerequired_3","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/python.python/#prepend_rules_3","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_9","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#prepend_scripts_3","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_9","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#render_3","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.python/#properties_12","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description."},{"location":"api/python.python/#tagsrequired_11","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.python/#allow_failurerequired_7","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#namerequired_5","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#ordered_tagsrequired_3","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.python/#parentsrequired_3","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/python.python/#scriptsrequired_10","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#stagerequired_8","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#artifactsoptional_3","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#cacheoptional_3","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#dependenciesoptional_3","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#imageoptional_2","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/python.python/#needsoptional_3","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#originaloptional_2","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/python.python/#rulesoptional_2","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#variablesoptional_3","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#pythonlintisort","title":"PythonLintIsort","text":"<ul> <li>Implements: IPythonLintIsort</li> </ul> <p>Runs:.</p> <pre><code>pip3 install --upgrade isort\nisort --check .\n</code></pre> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: isort</li> <li>stage: lint</li> </ul>"},{"location":"api/python.python/#initializers_4","title":"Initializers","text":"<pre><code>from gcix import python\npython.PythonLintIsort(\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre> Name Type Description <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job."},{"location":"api/python.python/#job_nameoptional_10","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/python.python/#job_stageoptional_10","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/python.python/#methods_4","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.python/#add_dependencies_4","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_9","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_needs_4","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_9","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_parent_4","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.python/#parentrequired_4","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#add_tags_4","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_12","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#add_variables_4","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#variablesrequired_6","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#append_rules_4","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_10","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#append_scripts_4","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_11","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#assign_allow_failure_3","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#allow_failurerequired_8","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#assign_artifacts_4","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#artifactsrequired_5","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#assign_cache_4","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#cacherequired_5","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#assign_dependencies_3","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_10","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_image_3","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.python/#imagerequired_5","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/python.python/#assign_needs_3","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_10","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_tags_3","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_13","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#copy_3","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.python/#extend_name_3","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.python/#namerequired_6","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_3","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.python/#stagerequired_9","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_value_3","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.python/#stagerequired_10","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#get_all_instance_names_4","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.python/#childoptional_4","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#is_equal_4","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.python/#comparablerequired_4","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/python.python/#prepend_rules_4","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_11","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#prepend_scripts_4","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_12","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#render_4","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.python/#properties_13","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description."},{"location":"api/python.python/#tagsrequired_14","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.python/#allow_failurerequired_9","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#namerequired_7","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#ordered_tagsrequired_4","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.python/#parentsrequired_4","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/python.python/#scriptsrequired_13","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#stagerequired_11","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#artifactsoptional_4","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#cacheoptional_4","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#dependenciesoptional_4","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#imageoptional_3","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/python.python/#needsoptional_4","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#originaloptional_3","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/python.python/#rulesoptional_3","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#variablesoptional_4","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#pythonlintmypy","title":"PythonLintMyPy","text":"<ul> <li>Implements: IPythonLintMyPy</li> </ul> <p>Install mypy if not already installed. Execute mypy for <code>packageDir</code>.</p> <p>This subclass of <code>Job</code> configures the following defaults for the superclass:</p> <ul> <li>name: mypy</li> <li>stage: lint</li> </ul>"},{"location":"api/python.python/#initializers_5","title":"Initializers","text":"<pre><code>from gcix import python\npython.PythonLintMyPy(\npackage_dir: str,\njob_name: str = None,\njob_stage: str = None,\nmy_py_options: str = None,\nmy_py_version: str = None\n)\n</code></pre> Name Type Description <code>package_dir</code> <code>str</code> Package directory to type check. <code>job_name</code> <code>str</code> The name of the job. <code>job_stage</code> <code>str</code> The stage of the job. <code>my_py_options</code> <code>str</code> Adds arguments to mypy execution. <code>my_py_version</code> <code>str</code> If <code>mypy</code> is not already installed, this version will be installed."},{"location":"api/python.python/#package_dirrequired_1","title":"<code>package_dir</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Package directory to type check.</p>"},{"location":"api/python.python/#job_nameoptional_11","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the job.</p>"},{"location":"api/python.python/#job_stageoptional_11","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the job.</p>"},{"location":"api/python.python/#my_py_optionsoptional_1","title":"<code>my_py_options</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Adds arguments to mypy execution.</p>"},{"location":"api/python.python/#my_py_versionoptional_1","title":"<code>my_py_version</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>If <code>mypy</code> is not already installed, this version will be installed.</p> <p>Installs latest version if <code>undefined</code>.</p>"},{"location":"api/python.python/#methods_5","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.python/#add_dependencies_5","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_11","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_needs_5","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_11","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_parent_5","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.python/#parentrequired_5","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#add_tags_5","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_15","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#add_variables_5","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#variablesrequired_7","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#append_rules_5","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_12","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#append_scripts_5","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_14","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#assign_allow_failure_4","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#allow_failurerequired_10","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#assign_artifacts_5","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#artifactsrequired_6","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#assign_cache_5","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#cacherequired_6","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#assign_dependencies_4","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_12","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_image_4","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.python/#imagerequired_6","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/python.python/#assign_needs_4","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_12","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_tags_4","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_16","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#copy_4","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.python/#extend_name_4","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.python/#namerequired_8","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_4","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.python/#stagerequired_12","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_value_4","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.python/#stagerequired_13","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#get_all_instance_names_5","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.python/#childoptional_5","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#is_equal_5","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.python/#comparablerequired_5","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/python.python/#prepend_rules_5","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_13","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#prepend_scripts_5","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_15","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#render_5","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.python/#properties_14","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>package_dir</code> <code>str</code> Package directory to type check. <code>my_py_options</code> <code>str</code> Adds arguments to mypy execution. <code>my_py_version</code> <code>str</code> If <code>mypy</code> is not already installed, this version will be installed."},{"location":"api/python.python/#tagsrequired_17","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.python/#allow_failurerequired_11","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#namerequired_9","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#ordered_tagsrequired_5","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.python/#parentsrequired_5","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/python.python/#scriptsrequired_16","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#stagerequired_14","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#artifactsoptional_5","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#cacheoptional_5","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#dependenciesoptional_5","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#imageoptional_4","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/python.python/#needsoptional_5","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#originaloptional_4","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/python.python/#rulesoptional_4","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#variablesoptional_5","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#package_dirrequired_2","title":"<code>package_dir</code><sup>Required</sup>","text":"<pre><code>package_dir: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Package directory to type check.</p>"},{"location":"api/python.python/#my_py_optionsoptional_2","title":"<code>my_py_options</code><sup>Optional</sup>","text":"<pre><code>my_py_options: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Adds arguments to mypy execution.</p>"},{"location":"api/python.python/#my_py_versionoptional_2","title":"<code>my_py_version</code><sup>Optional</sup>","text":"<pre><code>my_py_version: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>If <code>mypy</code> is not already installed, this version will be installed.</p> <p>Installs latest version if <code>undefined</code>.</p>"},{"location":"api/python.python/#pythonscripts","title":"PythonScripts","text":"<p>Represents a collection of utility functions for scripting tasks.</p>"},{"location":"api/python.python/#static-functions","title":"Static Functions","text":"Name Description <code>pip_install_requirements</code> Generates a shell command to install project requirements using <code>pipenv</code> and <code>pip</code> based on the presence of a <code>Pipfile.lock</code> or <code>requirements.txt</code>."},{"location":"api/python.python/#pip_install_requirements","title":"<code>pip_install_requirements</code>","text":"<pre><code>from gcix import python\npython.PythonScripts.pip_install_requirements(\npipenv_version_specifier: str = None,\nrequirements_file: str = None\n)\n</code></pre> <p>Generates a shell command to install project requirements using <code>pipenv</code> and <code>pip</code> based on the presence of a <code>Pipfile.lock</code> or <code>requirements.txt</code>.</p>"},{"location":"api/python.python/#pipenv_version_specifieroptional_3","title":"<code>pipenv_version_specifier</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: \"\"</li> </ul> <p>The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to an empty string, indicating installation of the latest version.</p>"},{"location":"api/python.python/#requirements_fileoptional_2","title":"<code>requirements_file</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: \"requirements.txt\"</li> </ul> <p>The location and name of the requirements file.</p>"},{"location":"api/python.python/#pythontestevaluategittagpep440conformity","title":"PythonTestEvaluateGitTagPep440Conformity","text":"<ul> <li>Implements: IPythonTestEvaluateGitTagPep440Conformity</li> </ul> <p>Checks if the current pipelines <code>$CI_COMMIT_TAG</code> validates to a valid Python package version according to https://www.python.org/dev/peps/pep-0440.</p> <p>This job already contains a rule to only run when a <code>$CI_COMMIT_TAG</code> is present (<code>rules.only_tags()</code>).</p> <p>Runs <code>pytest</code> and installs project requirements before <code>PythonScripts.pipInstallRequirements</code></p> <ul> <li>Requires a <code>requirements.txt</code> in your project folder containing   at least <code>pytest</code></li> </ul> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: tag-pep440-conformity</li> <li>stage: test</li> <li>image: PredefinedImages.GCIP</li> <li>rules: on_tagsg</li> </ul>"},{"location":"api/python.python/#initializers_6","title":"Initializers","text":"<pre><code>from gcix import python\npython.PythonTestEvaluateGitTagPep440Conformity(\njob_name: str = None,\njob_stage: str = None\n)\n</code></pre> Name Type Description <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job."},{"location":"api/python.python/#job_nameoptional_12","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/python.python/#job_stageoptional_12","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/python.python/#methods_6","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.python/#add_dependencies_6","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_13","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_needs_6","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_13","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_parent_6","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.python/#parentrequired_6","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#add_tags_6","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_18","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#add_variables_6","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#variablesrequired_8","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#append_rules_6","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_14","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#append_scripts_6","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_17","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#assign_allow_failure_5","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#allow_failurerequired_12","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#assign_artifacts_6","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#artifactsrequired_7","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#assign_cache_6","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#cacherequired_7","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#assign_dependencies_5","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_14","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_image_5","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.python/#imagerequired_7","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/python.python/#assign_needs_5","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_14","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_tags_5","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_19","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#copy_5","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.python/#extend_name_5","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.python/#namerequired_10","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_5","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.python/#stagerequired_15","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_value_5","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.python/#stagerequired_16","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#get_all_instance_names_6","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.python/#childoptional_6","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#is_equal_6","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.python/#comparablerequired_6","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/python.python/#prepend_rules_6","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_15","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#prepend_scripts_6","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_18","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#render_6","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.python/#properties_15","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description."},{"location":"api/python.python/#tagsrequired_20","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.python/#allow_failurerequired_13","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#namerequired_11","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#ordered_tagsrequired_6","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.python/#parentsrequired_6","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/python.python/#scriptsrequired_19","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#stagerequired_17","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#artifactsoptional_6","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#cacheoptional_6","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#dependenciesoptional_6","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#imageoptional_5","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/python.python/#needsoptional_6","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#originaloptional_5","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/python.python/#rulesoptional_5","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#variablesoptional_6","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#pythontestpytest","title":"PythonTestPytest","text":"<ul> <li>Implements: IPythonTestPytest</li> </ul> <p>Runs <code>pytest</code> and installs project requirements before <code>PythonScripts.pipInstallRequirements</code>.</p> <ul> <li>Requires a <code>Pipfile.lock</code> or <code>requirements.txt</code> in your project folder   containing at least <code>pytest</code></li> </ul> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: pytest</li> <li>stage: test</li> </ul>"},{"location":"api/python.python/#initializers_7","title":"Initializers","text":"<pre><code>from gcix import python\npython.PythonTestPytest(\njob_name: str = None,\njob_stage: str = None,\npipenv_version_specifier: str = None,\npytest_command: str = None\n)\n</code></pre> Name Type Description <code>job_name</code> <code>str</code> The name of the Bootstrap job. <code>job_stage</code> <code>str</code> The stage of the Bootstrap job. <code>pipenv_version_specifier</code> <code>str</code> The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version. <code>pytest_command</code> <code>str</code> This argument is only required if you have a custom command to call pytest."},{"location":"api/python.python/#job_nameoptional_13","title":"<code>job_name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/python.python/#job_stageoptional_13","title":"<code>job_stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/python.python/#pipenv_version_specifieroptional_4","title":"<code>pipenv_version_specifier</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version.</p>"},{"location":"api/python.python/#pytest_commandoptional_1","title":"<code>pytest_command</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>This argument is only required if you have a custom command to call pytest.</p>"},{"location":"api/python.python/#methods_7","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.python/#add_dependencies_7","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_15","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_needs_7","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_15","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#add_parent_7","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.python/#parentrequired_7","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#add_tags_7","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_21","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#add_variables_7","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#variablesrequired_9","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#append_rules_7","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_16","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#append_scripts_7","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_20","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#assign_allow_failure_6","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#allow_failurerequired_14","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#assign_artifacts_7","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#artifactsrequired_8","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#assign_cache_7","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#cacherequired_8","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#assign_dependencies_6","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#dependenciesrequired_16","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_image_6","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.python/#imagerequired_8","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, gcix.Image]</li> </ul>"},{"location":"api/python.python/#assign_needs_6","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#needsrequired_16","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#assign_tags_6","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#tagsrequired_22","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#copy_6","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.python/#extend_name_6","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.python/#namerequired_12","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_6","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.python/#stagerequired_18","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#extend_stage_value_6","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.python/#stagerequired_19","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#get_all_instance_names_7","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.python/#childoptional_7","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[gcix.Job, gcix.JobCollection]</li> </ul>"},{"location":"api/python.python/#is_equal_7","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.python/#comparablerequired_7","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: gcix.IBase</li> </ul>"},{"location":"api/python.python/#prepend_rules_7","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#rulesrequired_17","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#prepend_scripts_7","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/python.python/#scriptsrequired_21","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#render_7","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.python/#properties_16","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>gcix.OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>gcix.Artifacts</code> No description. <code>cache</code> <code>gcix.Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>image</code> <code>gcix.Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</code> No description. <code>original</code> <code>gcix.Job</code> No description. <code>rules</code> <code>typing.List[gcix.Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>pipenv_version_specifier</code> <code>str</code> The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version. <code>pytest_command</code> <code>str</code> This argument is only required if you have a custom command to call pytest."},{"location":"api/python.python/#tagsrequired_23","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.python/#allow_failurerequired_15","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/python.python/#namerequired_13","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#ordered_tagsrequired_7","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.python/#parentsrequired_7","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection]]</li> </ul>"},{"location":"api/python.python/#scriptsrequired_22","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/python.python/#stagerequired_20","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#artifactsoptional_7","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: gcix.Artifacts</li> </ul>"},{"location":"api/python.python/#cacheoptional_7","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: gcix.Cache</li> </ul>"},{"location":"api/python.python/#dependenciesoptional_7","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#imageoptional_6","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: gcix.Image</li> </ul>"},{"location":"api/python.python/#needsoptional_7","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[gcix.Job, gcix.JobCollection, gcix.Need]]</li> </ul>"},{"location":"api/python.python/#originaloptional_6","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: gcix.Job</li> </ul>"},{"location":"api/python.python/#rulesoptional_6","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[gcix.Rule]</li> </ul>"},{"location":"api/python.python/#variablesoptional_7","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/python.python/#pipenv_version_specifierrequired","title":"<code>pipenv_version_specifier</code><sup>Required</sup>","text":"<pre><code>pipenv_version_specifier: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version.</p>"},{"location":"api/python.python/#pytest_commandrequired","title":"<code>pytest_command</code><sup>Required</sup>","text":"<pre><code>pytest_command: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>This argument is only required if you have a custom command to call pytest.</p>"},{"location":"api/python.python/#protocols","title":"Protocols","text":""},{"location":"api/python.python/#ipythonbuildbdistwheel","title":"IPythonBuildBdistWheel","text":"<ul> <li>Implemented By: PythonBuildBdistWheel, IPythonBuildBdistWheel</li> </ul>"},{"location":"api/python.python/#properties_17","title":"Properties","text":"Name Type Description <code>pipenv_version_specifier</code> <code>str</code> No description. <code>requirements_file</code> <code>str</code> No description."},{"location":"api/python.python/#pipenv_version_specifieroptional_5","title":"<code>pipenv_version_specifier</code><sup>Optional</sup>","text":"<pre><code>pipenv_version_specifier: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#requirements_fileoptional_3","title":"<code>requirements_file</code><sup>Optional</sup>","text":"<pre><code>requirements_file: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/python.python/#ipythondeploytwineupload","title":"IPythonDeployTwineUpload","text":"<ul> <li>Implemented By: PythonDeployTwineUpload, IPythonDeployTwineUpload</li> </ul>"},{"location":"api/python.python/#properties_18","title":"Properties","text":"Name Type Description <code>twine_password_env_var</code> <code>str</code> The name of the environment variable containing the password. <code>twine_username_env_var</code> <code>str</code> The name of the environment variable containing the username value. <code>twine_repository_url</code> <code>str</code> The URL to the PyPI repository to which the Python artifacts will be deployed."},{"location":"api/python.python/#twine_password_env_varrequired_1","title":"<code>twine_password_env_var</code><sup>Required</sup>","text":"<pre><code>twine_password_env_var: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the environment variable containing the password.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_PASSWORD'.</p>"},{"location":"api/python.python/#twine_username_env_varrequired_1","title":"<code>twine_username_env_var</code><sup>Required</sup>","text":"<pre><code>twine_username_env_var: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the environment variable containing the username value.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_USERNAME'.</p>"},{"location":"api/python.python/#twine_repository_urloptional_3","title":"<code>twine_repository_url</code><sup>Optional</sup>","text":"<pre><code>twine_repository_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The URL to the PyPI repository to which the Python artifacts will be deployed.</p> <p>If <code>undefined</code> the package is published to <code>https://pypi.org</code>.</p>"},{"location":"api/python.python/#ipythonfullstack","title":"IPythonFullStack","text":"<ul> <li>Implemented By: PythonFullStack, IPythonFullStack</li> </ul>"},{"location":"api/python.python/#properties_19","title":"Properties","text":"Name Type Description <code>b_dist_wheel_job</code> <code>PythonBuildBdistWheel</code> No description. <code>evaluate_git_tag_pep440_conformity_job</code> <code>PythonTestEvaluateGitTagPep440Conformity</code> No description. <code>flake8_job</code> <code>PythonLintFlake8</code> No description. <code>isort_job</code> <code>PythonLintIsort</code> No description. <code>pytest_job</code> <code>PythonTestPytest</code> No description. <code>twine_prod_job</code> <code>PythonDeployTwineUpload</code> No description. <code>mypy_job</code> <code>PythonLintMyPy</code> No description. <code>sphinx_job</code> <code>gcix.gitlab.PagesSphinx</code> No description. <code>twine_dev_job</code> <code>PythonDeployTwineUpload</code> No description."},{"location":"api/python.python/#b_dist_wheel_jobrequired_1","title":"<code>b_dist_wheel_job</code><sup>Required</sup>","text":"<pre><code>b_dist_wheel_job: PythonBuildBdistWheel\n</code></pre> <ul> <li>Type: PythonBuildBdistWheel</li> </ul>"},{"location":"api/python.python/#evaluate_git_tag_pep440_conformity_jobrequired_1","title":"<code>evaluate_git_tag_pep440_conformity_job</code><sup>Required</sup>","text":"<pre><code>evaluate_git_tag_pep440_conformity_job: PythonTestEvaluateGitTagPep440Conformity\n</code></pre> <ul> <li>Type: PythonTestEvaluateGitTagPep440Conformity</li> </ul>"},{"location":"api/python.python/#flake8_jobrequired_1","title":"<code>flake8_job</code><sup>Required</sup>","text":"<pre><code>flake8_job: PythonLintFlake8\n</code></pre> <ul> <li>Type: PythonLintFlake8</li> </ul>"},{"location":"api/python.python/#isort_jobrequired_1","title":"<code>isort_job</code><sup>Required</sup>","text":"<pre><code>isort_job: PythonLintIsort\n</code></pre> <ul> <li>Type: PythonLintIsort</li> </ul>"},{"location":"api/python.python/#pytest_jobrequired_1","title":"<code>pytest_job</code><sup>Required</sup>","text":"<pre><code>pytest_job: PythonTestPytest\n</code></pre> <ul> <li>Type: PythonTestPytest</li> </ul>"},{"location":"api/python.python/#twine_prod_jobrequired_1","title":"<code>twine_prod_job</code><sup>Required</sup>","text":"<pre><code>twine_prod_job: PythonDeployTwineUpload\n</code></pre> <ul> <li>Type: PythonDeployTwineUpload</li> </ul>"},{"location":"api/python.python/#mypy_joboptional_1","title":"<code>mypy_job</code><sup>Optional</sup>","text":"<pre><code>mypy_job: PythonLintMyPy\n</code></pre> <ul> <li>Type: PythonLintMyPy</li> </ul>"},{"location":"api/python.python/#sphinx_joboptional_1","title":"<code>sphinx_job</code><sup>Optional</sup>","text":"<pre><code>sphinx_job: PagesSphinx\n</code></pre> <ul> <li>Type: gcix.gitlab.PagesSphinx</li> </ul>"},{"location":"api/python.python/#twine_dev_joboptional_1","title":"<code>twine_dev_job</code><sup>Optional</sup>","text":"<pre><code>twine_dev_job: PythonDeployTwineUpload\n</code></pre> <ul> <li>Type: PythonDeployTwineUpload</li> </ul>"},{"location":"api/python.python/#ipythonlintflake8","title":"IPythonLintFlake8","text":"<ul> <li>Implemented By: PythonLintFlake8, IPythonLintFlake8</li> </ul>"},{"location":"api/python.python/#ipythonlintisort","title":"IPythonLintIsort","text":"<ul> <li>Implemented By: PythonLintIsort, IPythonLintIsort</li> </ul>"},{"location":"api/python.python/#ipythonlintmypy","title":"IPythonLintMyPy","text":"<ul> <li>Implemented By: PythonLintMyPy, IPythonLintMyPy</li> </ul>"},{"location":"api/python.python/#properties_20","title":"Properties","text":"Name Type Description <code>package_dir</code> <code>str</code> Package directory to type check. <code>my_py_options</code> <code>str</code> Adds arguments to mypy execution. <code>my_py_version</code> <code>str</code> If <code>mypy</code> is not already installed, this version will be installed."},{"location":"api/python.python/#package_dirrequired_3","title":"<code>package_dir</code><sup>Required</sup>","text":"<pre><code>package_dir: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Package directory to type check.</p>"},{"location":"api/python.python/#my_py_optionsoptional_3","title":"<code>my_py_options</code><sup>Optional</sup>","text":"<pre><code>my_py_options: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Adds arguments to mypy execution.</p>"},{"location":"api/python.python/#my_py_versionoptional_3","title":"<code>my_py_version</code><sup>Optional</sup>","text":"<pre><code>my_py_version: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>If <code>mypy</code> is not already installed, this version will be installed.</p> <p>Installs latest version if <code>undefined</code>.</p>"},{"location":"api/python.python/#ipythontestevaluategittagpep440conformity","title":"IPythonTestEvaluateGitTagPep440Conformity","text":"<ul> <li>Implemented By: PythonTestEvaluateGitTagPep440Conformity, IPythonTestEvaluateGitTagPep440Conformity</li> </ul>"},{"location":"api/python.python/#ipythontestpytest","title":"IPythonTestPytest","text":"<ul> <li>Implemented By: PythonTestPytest, IPythonTestPytest</li> </ul>"},{"location":"api/python.python/#properties_21","title":"Properties","text":"Name Type Description <code>pipenv_version_specifier</code> <code>str</code> The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version. <code>pytest_command</code> <code>str</code> This argument is only required if you have a custom command to call pytest."},{"location":"api/python.python/#pipenv_version_specifierrequired_1","title":"<code>pipenv_version_specifier</code><sup>Required</sup>","text":"<pre><code>pipenv_version_specifier: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version.</p>"},{"location":"api/python.python/#pytest_commandrequired_1","title":"<code>pytest_command</code><sup>Required</sup>","text":"<pre><code>pytest_command: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>This argument is only required if you have a custom command to call pytest.</p>"},{"location":"api/python.typescript/","title":"<code>python</code> Submodule","text":""},{"location":"api/python.typescript/#structs","title":"Structs","text":""},{"location":"api/python.typescript/#pipinstallrequirementsprops","title":"PipInstallRequirementsProps","text":"<p>Represents the properties for the <code>pipInstallRequirements</code> static method.</p>"},{"location":"api/python.typescript/#initializer","title":"Initializer","text":"<pre><code>import { python } from '@gcix/gcix'\nconst pipInstallRequirementsProps: python.PipInstallRequirementsProps = { ... }\n</code></pre>"},{"location":"api/python.typescript/#properties","title":"Properties","text":"Name Type Description <code>pipenvVersionSpecifier</code> <code>string</code> The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to an empty string, indicating installation of the latest version. <code>requirementsFile</code> <code>string</code> The location and name of the requirements file."},{"location":"api/python.typescript/#pipenvversionspecifieroptional","title":"<code>pipenvVersionSpecifier</code><sup>Optional</sup>","text":"<pre><code>public readonly pipenvVersionSpecifier: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"\"</li> </ul> <p>The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to an empty string, indicating installation of the latest version.</p>"},{"location":"api/python.typescript/#requirementsfileoptional","title":"<code>requirementsFile</code><sup>Optional</sup>","text":"<pre><code>public readonly requirementsFile: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: \"requirements.txt\"</li> </ul> <p>The location and name of the requirements file.</p>"},{"location":"api/python.typescript/#pythonbuildbdistwheelprops","title":"PythonBuildBdistWheelProps","text":""},{"location":"api/python.typescript/#initializer_1","title":"Initializer","text":"<pre><code>import { python } from '@gcix/gcix'\nconst pythonBuildBdistWheelProps: python.PythonBuildBdistWheelProps = { ... }\n</code></pre>"},{"location":"api/python.typescript/#properties_1","title":"Properties","text":"Name Type Description <code>jobName</code> <code>string</code> No description. <code>jobStage</code> <code>string</code> No description. <code>pipRequirements</code> <code>PipInstallRequirementsProps</code> No description."},{"location":"api/python.typescript/#jobnameoptional","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#jobstageoptional","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#piprequirementsoptional","title":"<code>pipRequirements</code><sup>Optional</sup>","text":"<pre><code>public readonly pipRequirements: PipInstallRequirementsProps;\n</code></pre> <ul> <li>Type: PipInstallRequirementsProps</li> </ul>"},{"location":"api/python.typescript/#pythondeploytwineuploadprops","title":"PythonDeployTwineUploadProps","text":"<p>Represents the properties for the <code>TwineUpload</code> class.</p>"},{"location":"api/python.typescript/#initializer_2","title":"Initializer","text":"<pre><code>import { python } from '@gcix/gcix'\nconst pythonDeployTwineUploadProps: python.PythonDeployTwineUploadProps = { ... }\n</code></pre>"},{"location":"api/python.typescript/#properties_2","title":"Properties","text":"Name Type Description <code>jobName</code> <code>string</code> The name of the job. <code>jobStage</code> <code>string</code> The stage of the job. <code>twinePasswordEnvVar</code> <code>string</code> The name of the environment variable containing the password. <code>twineRepositoryUrl</code> <code>string</code> The URL to the PyPI repository to which the Python artifacts will be deployed. <code>twineUsernameEnvVar</code> <code>string</code> The name of the environment variable containing the username value."},{"location":"api/python.typescript/#jobnameoptional_1","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the job.</p>"},{"location":"api/python.typescript/#jobstageoptional_1","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the job.</p>"},{"location":"api/python.typescript/#twinepasswordenvvaroptional","title":"<code>twinePasswordEnvVar</code><sup>Optional</sup>","text":"<pre><code>public readonly twinePasswordEnvVar: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the environment variable containing the password.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_PASSWORD'.</p>"},{"location":"api/python.typescript/#twinerepositoryurloptional","title":"<code>twineRepositoryUrl</code><sup>Optional</sup>","text":"<pre><code>public readonly twineRepositoryUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The URL to the PyPI repository to which the Python artifacts will be deployed.</p> <p>If <code>undefined</code> the package is published to <code>https://pypi.org</code>.</p>"},{"location":"api/python.typescript/#twineusernameenvvaroptional","title":"<code>twineUsernameEnvVar</code><sup>Optional</sup>","text":"<pre><code>public readonly twineUsernameEnvVar: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the environment variable containing the username value.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_USERNAME'.</p>"},{"location":"api/python.typescript/#pythonfullstackprops","title":"PythonFullStackProps","text":""},{"location":"api/python.typescript/#initializer_3","title":"Initializer","text":"<pre><code>import { python } from '@gcix/gcix'\nconst pythonFullStackProps: python.PythonFullStackProps = { ... }\n</code></pre>"},{"location":"api/python.typescript/#properties_3","title":"Properties","text":"Name Type Description <code>twineProdJobProps</code> <code>PythonDeployTwineUploadProps</code> No description. <code>bDistWheelJobProps</code> <code>PythonBuildBdistWheelProps</code> No description. <code>evaluateGitTagPep440ConformityJobProps</code> <code>PythonTestEvaluateGitTagPep440ConformityProps</code> No description. <code>flake8JobProps</code> <code>PythonLintFlake8Props</code> No description. <code>isortJobProps</code> <code>PythonLintIsortProps</code> No description. <code>mypyJobProps</code> <code>PythonLintMyPyProps</code> No description. <code>pytestJobProps</code> <code>PythonTestPytestProps</code> No description. <code>sphinxPropsJobProps</code> <code>@gcix/gcix.gitlab.PagesSphinxProps</code> No description. <code>twineDevJobProps</code> <code>PythonDeployTwineUploadProps</code> No description."},{"location":"api/python.typescript/#twineprodjobpropsrequired","title":"<code>twineProdJobProps</code><sup>Required</sup>","text":"<pre><code>public readonly twineProdJobProps: PythonDeployTwineUploadProps;\n</code></pre> <ul> <li>Type: PythonDeployTwineUploadProps</li> </ul>"},{"location":"api/python.typescript/#bdistwheeljobpropsoptional","title":"<code>bDistWheelJobProps</code><sup>Optional</sup>","text":"<pre><code>public readonly bDistWheelJobProps: PythonBuildBdistWheelProps;\n</code></pre> <ul> <li>Type: PythonBuildBdistWheelProps</li> </ul>"},{"location":"api/python.typescript/#evaluategittagpep440conformityjobpropsoptional","title":"<code>evaluateGitTagPep440ConformityJobProps</code><sup>Optional</sup>","text":"<pre><code>public readonly evaluateGitTagPep440ConformityJobProps: PythonTestEvaluateGitTagPep440ConformityProps;\n</code></pre> <ul> <li>Type: PythonTestEvaluateGitTagPep440ConformityProps</li> </ul>"},{"location":"api/python.typescript/#flake8jobpropsoptional","title":"<code>flake8JobProps</code><sup>Optional</sup>","text":"<pre><code>public readonly flake8JobProps: PythonLintFlake8Props;\n</code></pre> <ul> <li>Type: PythonLintFlake8Props</li> </ul>"},{"location":"api/python.typescript/#isortjobpropsoptional","title":"<code>isortJobProps</code><sup>Optional</sup>","text":"<pre><code>public readonly isortJobProps: PythonLintIsortProps;\n</code></pre> <ul> <li>Type: PythonLintIsortProps</li> </ul>"},{"location":"api/python.typescript/#mypyjobpropsoptional","title":"<code>mypyJobProps</code><sup>Optional</sup>","text":"<pre><code>public readonly mypyJobProps: PythonLintMyPyProps;\n</code></pre> <ul> <li>Type: PythonLintMyPyProps</li> </ul>"},{"location":"api/python.typescript/#pytestjobpropsoptional","title":"<code>pytestJobProps</code><sup>Optional</sup>","text":"<pre><code>public readonly pytestJobProps: PythonTestPytestProps;\n</code></pre> <ul> <li>Type: PythonTestPytestProps</li> </ul>"},{"location":"api/python.typescript/#sphinxpropsjobpropsoptional","title":"<code>sphinxPropsJobProps</code><sup>Optional</sup>","text":"<pre><code>public readonly sphinxPropsJobProps: PagesSphinxProps;\n</code></pre> <ul> <li>Type: @gcix/gcix.gitlab.PagesSphinxProps</li> </ul>"},{"location":"api/python.typescript/#twinedevjobpropsoptional","title":"<code>twineDevJobProps</code><sup>Optional</sup>","text":"<pre><code>public readonly twineDevJobProps: PythonDeployTwineUploadProps;\n</code></pre> <ul> <li>Type: PythonDeployTwineUploadProps</li> </ul>"},{"location":"api/python.typescript/#pythonlintflake8props","title":"PythonLintFlake8Props","text":""},{"location":"api/python.typescript/#initializer_4","title":"Initializer","text":"<pre><code>import { python } from '@gcix/gcix'\nconst pythonLintFlake8Props: python.PythonLintFlake8Props = { ... }\n</code></pre>"},{"location":"api/python.typescript/#properties_4","title":"Properties","text":"Name Type Description <code>jobName</code> <code>string</code> The name of the job. <code>jobStage</code> <code>string</code> The stage of the job."},{"location":"api/python.typescript/#jobnameoptional_2","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the job.</p>"},{"location":"api/python.typescript/#jobstageoptional_2","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the job.</p>"},{"location":"api/python.typescript/#pythonlintisortprops","title":"PythonLintIsortProps","text":""},{"location":"api/python.typescript/#initializer_5","title":"Initializer","text":"<pre><code>import { python } from '@gcix/gcix'\nconst pythonLintIsortProps: python.PythonLintIsortProps = { ... }\n</code></pre>"},{"location":"api/python.typescript/#properties_5","title":"Properties","text":"Name Type Description <code>jobName</code> <code>string</code> The name of the job. <code>jobStage</code> <code>string</code> The stage of the job."},{"location":"api/python.typescript/#jobnameoptional_3","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the job.</p>"},{"location":"api/python.typescript/#jobstageoptional_3","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the job.</p>"},{"location":"api/python.typescript/#pythonlintmypyprops","title":"PythonLintMyPyProps","text":""},{"location":"api/python.typescript/#initializer_6","title":"Initializer","text":"<pre><code>import { python } from '@gcix/gcix'\nconst pythonLintMyPyProps: python.PythonLintMyPyProps = { ... }\n</code></pre>"},{"location":"api/python.typescript/#properties_6","title":"Properties","text":"Name Type Description <code>packageDir</code> <code>string</code> Package directory to type check. <code>jobName</code> <code>string</code> The name of the job. <code>jobStage</code> <code>string</code> The stage of the job. <code>myPyOptions</code> <code>string</code> Adds arguments to mypy execution. <code>myPyVersion</code> <code>string</code> If <code>mypy</code> is not already installed, this version will be installed."},{"location":"api/python.typescript/#packagedirrequired","title":"<code>packageDir</code><sup>Required</sup>","text":"<pre><code>public readonly packageDir: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Package directory to type check.</p>"},{"location":"api/python.typescript/#jobnameoptional_4","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the job.</p>"},{"location":"api/python.typescript/#jobstageoptional_4","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the job.</p>"},{"location":"api/python.typescript/#mypyoptionsoptional","title":"<code>myPyOptions</code><sup>Optional</sup>","text":"<pre><code>public readonly myPyOptions: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Adds arguments to mypy execution.</p>"},{"location":"api/python.typescript/#mypyversionoptional","title":"<code>myPyVersion</code><sup>Optional</sup>","text":"<pre><code>public readonly myPyVersion: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>If <code>mypy</code> is not already installed, this version will be installed.</p> <p>Installs latest version if <code>undefined</code>.</p>"},{"location":"api/python.typescript/#pythontestevaluategittagpep440conformityprops","title":"PythonTestEvaluateGitTagPep440ConformityProps","text":""},{"location":"api/python.typescript/#initializer_7","title":"Initializer","text":"<pre><code>import { python } from '@gcix/gcix'\nconst pythonTestEvaluateGitTagPep440ConformityProps: python.PythonTestEvaluateGitTagPep440ConformityProps = { ... }\n</code></pre>"},{"location":"api/python.typescript/#properties_7","title":"Properties","text":"Name Type Description <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job."},{"location":"api/python.typescript/#jobnameoptional_5","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/python.typescript/#jobstageoptional_5","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/python.typescript/#pythontestpytestprops","title":"PythonTestPytestProps","text":""},{"location":"api/python.typescript/#initializer_8","title":"Initializer","text":"<pre><code>import { python } from '@gcix/gcix'\nconst pythonTestPytestProps: python.PythonTestPytestProps = { ... }\n</code></pre>"},{"location":"api/python.typescript/#properties_8","title":"Properties","text":"Name Type Description <code>jobName</code> <code>string</code> The name of the Bootstrap job. <code>jobStage</code> <code>string</code> The stage of the Bootstrap job. <code>pipenvVersionSpecifier</code> <code>string</code> The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version. <code>pytestCommand</code> <code>string</code> This argument is only required if you have a custom command to call pytest."},{"location":"api/python.typescript/#jobnameoptional_6","title":"<code>jobName</code><sup>Optional</sup>","text":"<pre><code>public readonly jobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the Bootstrap job.</p>"},{"location":"api/python.typescript/#jobstageoptional_6","title":"<code>jobStage</code><sup>Optional</sup>","text":"<pre><code>public readonly jobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage of the Bootstrap job.</p>"},{"location":"api/python.typescript/#pipenvversionspecifieroptional_1","title":"<code>pipenvVersionSpecifier</code><sup>Optional</sup>","text":"<pre><code>public readonly pipenvVersionSpecifier: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version.</p>"},{"location":"api/python.typescript/#pytestcommandoptional","title":"<code>pytestCommand</code><sup>Optional</sup>","text":"<pre><code>public readonly pytestCommand: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>This argument is only required if you have a custom command to call pytest.</p>"},{"location":"api/python.typescript/#classes","title":"Classes","text":""},{"location":"api/python.typescript/#pythonbuildbdistwheel","title":"PythonBuildBdistWheel","text":"<ul> <li>Implements: IPythonBuildBdistWheel</li> </ul> <p>Runs <code>python3 setup.py bdist_wheel</code> and installs project requirements Requirements are installed by <code>LinuxScripts.pipInstallRequirements()</code>.</p> <p>This subclass of <code>Job</code> configures the following defaults for the superclass: - name: bdist_wheel - stage: build - artifacts: Path 'dist/'</p> <p>Requires a <code>Pipfile.lock</code> or <code>requirements.txt</code> in your project folder containing at least <code>setuptools</code>. Creates artifacts under the path 'dist/'.</p>"},{"location":"api/python.typescript/#initializers","title":"Initializers","text":"<pre><code>import { python } from '@gcix/gcix'\nnew python.PythonBuildBdistWheel(props: PythonBuildBdistWheelProps)\n</code></pre> Name Type Description <code>props</code> <code>PythonBuildBdistWheelProps</code> No description."},{"location":"api/python.typescript/#propsrequired","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: PythonBuildBdistWheelProps</li> </ul>"},{"location":"api/python.typescript/#methods","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.typescript/#adddependencies","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addneeds","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addparent","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.typescript/#parentrequired","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#addtags","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#addvariables","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/python.typescript/#variablesrequired","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#appendrules","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#appendscripts","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#assignallowfailure","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/python.typescript/#allowfailurerequired","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#assignartifacts","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/python.typescript/#artifactsrequired","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#assigncache","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/python.typescript/#cacherequired","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#assigndependencies","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_1","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assignimage","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.typescript/#imagerequired","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#assignneeds","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_1","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assigntags","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_1","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#copy","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.typescript/#extendname","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.typescript/#namerequired","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstage","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.typescript/#stagerequired","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstagevalue","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.typescript/#stagerequired_1","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#getallinstancenames","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.typescript/#childoptional","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#isequal","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.typescript/#comparablerequired","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/python.typescript/#prependrules","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_1","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#prependscripts","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_1","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#render","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.typescript/#properties_9","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>pipenvVersionSpecifier</code> <code>string</code> No description. <code>requirementsFile</code> <code>string</code> No description."},{"location":"api/python.typescript/#tagsrequired_2","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.typescript/#allowfailurerequired_1","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#namerequired_1","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#orderedtagsrequired","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.typescript/#parentsrequired","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/python.typescript/#scriptsrequired_2","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#stagerequired_2","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#artifactsoptional","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#cacheoptional","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#dependenciesoptional","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#imageoptional","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#needsoptional","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#originaloptional","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/python.typescript/#rulesoptional","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#variablesoptional","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#pipenvversionspecifieroptional_2","title":"<code>pipenvVersionSpecifier</code><sup>Optional</sup>","text":"<pre><code>public readonly pipenvVersionSpecifier: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#requirementsfileoptional_1","title":"<code>requirementsFile</code><sup>Optional</sup>","text":"<pre><code>public readonly requirementsFile: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#pythondeploytwineupload","title":"PythonDeployTwineUpload","text":"<ul> <li>Implements: IPythonDeployTwineUpload</li> </ul> <p>Runs:.</p> <pre><code>pip3 install --upgrade twine\npython3 -m twine upload --non-interactive --disable-progress-bar dist/*\n</code></pre> <p>Requires artifacts from a build job under <code>dist/</code> (e.g. from <code>BdistWheel()</code>)</p> <p>This subclass of <code>Job</code> configures the following defaults for the superclass: - name: twine - stage: deploy</p>"},{"location":"api/python.typescript/#initializers_1","title":"Initializers","text":"<pre><code>import { python } from '@gcix/gcix'\nnew python.PythonDeployTwineUpload(props: PythonDeployTwineUploadProps)\n</code></pre> Name Type Description <code>props</code> <code>PythonDeployTwineUploadProps</code> No description."},{"location":"api/python.typescript/#propsrequired_1","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: PythonDeployTwineUploadProps</li> </ul>"},{"location":"api/python.typescript/#methods_1","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.typescript/#adddependencies_1","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_2","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addneeds_1","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_2","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addparent_1","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.typescript/#parentrequired_1","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#addtags_1","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_3","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#addvariables_1","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/python.typescript/#variablesrequired_1","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#appendrules_1","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_2","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#appendscripts_1","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_3","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#assignallowfailure_1","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/python.typescript/#allowfailurerequired_2","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#assignartifacts_1","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/python.typescript/#artifactsrequired_1","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#assigncache_1","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/python.typescript/#cacherequired_1","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#assigndependencies_1","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_3","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assignimage_1","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.typescript/#imagerequired_1","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#assignneeds_1","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_3","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assigntags_1","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_4","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#copy_1","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.typescript/#extendname_1","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.typescript/#namerequired_2","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstage_1","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.typescript/#stagerequired_3","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstagevalue_1","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.typescript/#stagerequired_4","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#getallinstancenames_1","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.typescript/#childoptional_1","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#isequal_1","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.typescript/#comparablerequired_1","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/python.typescript/#prependrules_1","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_3","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#prependscripts_1","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_4","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#render_1","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.typescript/#properties_10","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>twinePasswordEnvVar</code> <code>string</code> The name of the environment variable containing the password. <code>twineUsernameEnvVar</code> <code>string</code> The name of the environment variable containing the username value. <code>twineRepositoryUrl</code> <code>string</code> The URL to the PyPI repository to which the Python artifacts will be deployed."},{"location":"api/python.typescript/#tagsrequired_5","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.typescript/#allowfailurerequired_3","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#namerequired_3","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#orderedtagsrequired_1","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.typescript/#parentsrequired_1","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/python.typescript/#scriptsrequired_5","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#stagerequired_5","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#artifactsoptional_1","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#cacheoptional_1","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#dependenciesoptional_1","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#imageoptional_1","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#needsoptional_1","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#originaloptional_1","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/python.typescript/#rulesoptional_1","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#variablesoptional_1","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#twinepasswordenvvarrequired","title":"<code>twinePasswordEnvVar</code><sup>Required</sup>","text":"<pre><code>public readonly twinePasswordEnvVar: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the environment variable containing the password.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_PASSWORD'.</p>"},{"location":"api/python.typescript/#twineusernameenvvarrequired","title":"<code>twineUsernameEnvVar</code><sup>Required</sup>","text":"<pre><code>public readonly twineUsernameEnvVar: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the environment variable containing the username value.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_USERNAME'.</p>"},{"location":"api/python.typescript/#twinerepositoryurloptional_1","title":"<code>twineRepositoryUrl</code><sup>Optional</sup>","text":"<pre><code>public readonly twineRepositoryUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The URL to the PyPI repository to which the Python artifacts will be deployed.</p> <p>If <code>undefined</code> the package is published to <code>https://pypi.org</code>.</p>"},{"location":"api/python.typescript/#pythonfullstack","title":"PythonFullStack","text":"<ul> <li>Implements: IPythonFullStack</li> </ul> <p>Returns a sequence containing following jobs: - isort - flake8 - pytest - evaluating CI_COMMIT_TAG as valid PyPI version string (if exists) - bdist_wheel - Gitlab Pages sphinx - twine upload  Optional jobs: - mypy  The <code>varname_dev_password</code> and <code>varname_stable_password</code> arguments are only used to specify the variable name and not the actuall password.</p> <p>The variable name has to be set outside of the pipeline itself, if you set it within the pipline, that would be a security risk.</p>"},{"location":"api/python.typescript/#initializers_2","title":"Initializers","text":"<pre><code>import { python } from '@gcix/gcix'\nnew python.PythonFullStack(props: PythonFullStackProps)\n</code></pre> Name Type Description <code>props</code> <code>PythonFullStackProps</code> No description."},{"location":"api/python.typescript/#propsrequired_2","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: PythonFullStackProps</li> </ul>"},{"location":"api/python.typescript/#methods_2","title":"Methods","text":"Name Description <code>addChildren</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> No description. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>initializeAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initializeArtifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initializeCache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initializeDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initializeImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initializeNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initializeRules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initializeTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initializeVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>overrideAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>overrideImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>overrideRules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>overrideTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>overrideVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.typescript/#addchildren","title":"<code>addChildren</code>","text":"<pre><code>public addChildren(props: AddChildrenProps): JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/python.typescript/#propsrequired_3","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.AddChildrenProps</li> </ul>"},{"location":"api/python.typescript/#adddependencies_2","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_4","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addneeds_2","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_4","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addparent_2","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: JobCollection): void\n</code></pre>"},{"location":"api/python.typescript/#parentrequired_2","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#addtags_2","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): JobCollection\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_6","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#addvariables_2","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre>"},{"location":"api/python.typescript/#variablesrequired_2","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#appendrules_2","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_4","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#appendscripts_2","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_6","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#assignartifacts_2","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): JobCollection\n</code></pre>"},{"location":"api/python.typescript/#artifactsrequired_2","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#assigncache_2","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): JobCollection\n</code></pre>"},{"location":"api/python.typescript/#cacherequired_2","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#getallinstancenames_2","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/python.typescript/#childoptional_2","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#initializeallowfailure","title":"<code>initializeAllowFailure</code>","text":"<pre><code>public initializeAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/python.typescript/#allowfailurerequired_4","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#initializeartifacts","title":"<code>initializeArtifacts</code>","text":"<pre><code>public initializeArtifacts(artifacts: Artifacts): JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/python.typescript/#artifactsrequired_3","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#initializecache","title":"<code>initializeCache</code>","text":"<pre><code>public initializeCache(cache: Cache): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/python.typescript/#cacherequired_3","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#initializedependencies","title":"<code>initializeDependencies</code>","text":"<pre><code>public initializeDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/python.typescript/#dependenciesrequired_5","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#initializeimage","title":"<code>initializeImage</code>","text":"<pre><code>public initializeImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/python.typescript/#imagerequired_2","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#initializeneeds","title":"<code>initializeNeeds</code>","text":"<pre><code>public initializeNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/python.typescript/#needsrequired_5","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#initializerules","title":"<code>initializeRules</code>","text":"<pre><code>public initializeRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/python.typescript/#rulesrequired_5","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#initializetags","title":"<code>initializeTags</code>","text":"<pre><code>public initializeTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/python.typescript/#tagsrequired_7","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#initializevariables","title":"<code>initializeVariables</code>","text":"<pre><code>public initializeVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/python.typescript/#variablesrequired_3","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#isequal_2","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.typescript/#comparablerequired_2","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/python.typescript/#overrideallowfailure","title":"<code>overrideAllowFailure</code>","text":"<pre><code>public overrideAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/python.typescript/#allowfailurerequired_5","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#overridedependencies","title":"<code>overrideDependencies</code>","text":"<pre><code>public overrideDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/python.typescript/#dependenciesrequired_6","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#overrideimage","title":"<code>overrideImage</code>","text":"<pre><code>public overrideImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/python.typescript/#imagerequired_3","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#overrideneeds","title":"<code>overrideNeeds</code>","text":"<pre><code>public overrideNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/python.typescript/#needsrequired_6","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#overriderules","title":"<code>overrideRules</code>","text":"<pre><code>public overrideRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/python.typescript/#rulesrequired_6","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#overridetags","title":"<code>overrideTags</code>","text":"<pre><code>public overrideTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/python.typescript/#tagsrequired_8","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#overridevariables","title":"<code>overrideVariables</code>","text":"<pre><code>public overrideVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/python.typescript/#variablesrequired_4","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#prependrules_2","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_7","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#prependscripts_2","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_7","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#render_2","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.typescript/#properties_11","title":"Properties","text":"Name Type Description <code>lastJobsExecuted</code> <code>@gcix/gcix.Job[]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nestedJobs</code> <code>@gcix/gcix.Job[]</code> No description. <code>populatedJobs</code> <code>@gcix/gcix.Job[]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>@gcix/gcix.ChildDict[]</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>orderedTagsForInitialization</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>orderedTagsForReplacement</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>allowFailureForInitialization</code> <code>string | boolean | number[]</code> No description. <code>allowFailureForReplacement</code> <code>string | boolean | number[]</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>artifactsForInitialization</code> <code>@gcix/gcix.Artifacts</code> No description. <code>artifactsForReplacement</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>cacheForInitialization</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>dependenciesForInitialization</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>dependenciesForReplacement</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>imageForInitialization</code> <code>string | @gcix/gcix.Image</code> No description. <code>imageForReplacement</code> <code>string | @gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>needsForInitialization</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>needsForReplacement</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>rulesForInitialization</code> <code>@gcix/gcix.Rule[]</code> No description. <code>rulesForReplacement</code> <code>@gcix/gcix.Rule[]</code> No description. <code>rulesToAppend</code> <code>@gcix/gcix.Rule[]</code> No description. <code>rulesToPrepend</code> <code>@gcix/gcix.Rule[]</code> No description. <code>scriptsToAppend</code> <code>string[]</code> No description. <code>scriptsToPrepend</code> <code>string[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForInitialization</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForReplacement</code> <code>{[ key: string ]: string}</code> No description. <code>bDistWheelJob</code> <code>PythonBuildBdistWheel</code> No description. <code>evaluateGitTagPep440ConformityJob</code> <code>PythonTestEvaluateGitTagPep440Conformity</code> No description. <code>flake8Job</code> <code>PythonLintFlake8</code> No description. <code>isortJob</code> <code>PythonLintIsort</code> No description. <code>pytestJob</code> <code>PythonTestPytest</code> No description. <code>twineProdJob</code> <code>PythonDeployTwineUpload</code> No description. <code>mypyJob</code> <code>PythonLintMyPy</code> No description. <code>sphinxJob</code> <code>@gcix/gcix.gitlab.PagesSphinx</code> No description. <code>twineDevJob</code> <code>PythonDeployTwineUpload</code> No description."},{"location":"api/python.typescript/#lastjobsexecutedrequired","title":"<code>lastJobsExecuted</code><sup>Required</sup>","text":"<pre><code>public readonly lastJobsExecuted: Job[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job[]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/python.typescript/#nestedjobsrequired","title":"<code>nestedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly nestedJobs: Job[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job[]</li> </ul>"},{"location":"api/python.typescript/#populatedjobsrequired","title":"<code>populatedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly populatedJobs: Job[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job[]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/python.typescript/#childrenrequired","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>public readonly children: ChildDict[];\n</code></pre> <ul> <li>Type: @gcix/gcix.ChildDict[]</li> </ul>"},{"location":"api/python.typescript/#orderedtagsrequired_2","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.typescript/#orderedtagsforinitializationrequired","title":"<code>orderedTagsForInitialization</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForInitialization: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.typescript/#orderedtagsforreplacementrequired","title":"<code>orderedTagsForReplacement</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForReplacement: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.typescript/#parentsrequired_2","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/python.typescript/#allowfailureforinitializationoptional","title":"<code>allowFailureForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForInitialization: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#allowfailureforreplacementoptional","title":"<code>allowFailureForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForReplacement: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#artifactsoptional_2","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#artifactsforinitializationoptional","title":"<code>artifactsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForInitialization: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#artifactsforreplacementoptional","title":"<code>artifactsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForReplacement: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#cacheoptional_2","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#cacheforinitializationoptional","title":"<code>cacheForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly cacheForInitialization: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#dependenciesoptional_2","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#dependenciesforinitializationoptional","title":"<code>dependenciesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#dependenciesforreplacementoptional","title":"<code>dependenciesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#imageforinitializationoptional","title":"<code>imageForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForInitialization: string | Image;\n</code></pre> <ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#imageforreplacementoptional","title":"<code>imageForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForReplacement: string | Image;\n</code></pre> <ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#needsoptional_2","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#needsforinitializationoptional","title":"<code>needsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#needsforreplacementoptional","title":"<code>needsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#rulesforinitializationoptional","title":"<code>rulesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForInitialization: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#rulesforreplacementoptional","title":"<code>rulesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForReplacement: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#rulestoappendoptional","title":"<code>rulesToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToAppend: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#rulestoprependoptional","title":"<code>rulesToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToPrepend: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#scriptstoappendoptional","title":"<code>scriptsToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToAppend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#scriptstoprependoptional","title":"<code>scriptsToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToPrepend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#variablesoptional_2","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#variablesforinitializationoptional","title":"<code>variablesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForInitialization: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#variablesforreplacementoptional","title":"<code>variablesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForReplacement: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#bdistwheeljobrequired","title":"<code>bDistWheelJob</code><sup>Required</sup>","text":"<pre><code>public readonly bDistWheelJob: PythonBuildBdistWheel;\n</code></pre> <ul> <li>Type: PythonBuildBdistWheel</li> </ul>"},{"location":"api/python.typescript/#evaluategittagpep440conformityjobrequired","title":"<code>evaluateGitTagPep440ConformityJob</code><sup>Required</sup>","text":"<pre><code>public readonly evaluateGitTagPep440ConformityJob: PythonTestEvaluateGitTagPep440Conformity;\n</code></pre> <ul> <li>Type: PythonTestEvaluateGitTagPep440Conformity</li> </ul>"},{"location":"api/python.typescript/#flake8jobrequired","title":"<code>flake8Job</code><sup>Required</sup>","text":"<pre><code>public readonly flake8Job: PythonLintFlake8;\n</code></pre> <ul> <li>Type: PythonLintFlake8</li> </ul>"},{"location":"api/python.typescript/#isortjobrequired","title":"<code>isortJob</code><sup>Required</sup>","text":"<pre><code>public readonly isortJob: PythonLintIsort;\n</code></pre> <ul> <li>Type: PythonLintIsort</li> </ul>"},{"location":"api/python.typescript/#pytestjobrequired","title":"<code>pytestJob</code><sup>Required</sup>","text":"<pre><code>public readonly pytestJob: PythonTestPytest;\n</code></pre> <ul> <li>Type: PythonTestPytest</li> </ul>"},{"location":"api/python.typescript/#twineprodjobrequired","title":"<code>twineProdJob</code><sup>Required</sup>","text":"<pre><code>public readonly twineProdJob: PythonDeployTwineUpload;\n</code></pre> <ul> <li>Type: PythonDeployTwineUpload</li> </ul>"},{"location":"api/python.typescript/#mypyjoboptional","title":"<code>mypyJob</code><sup>Optional</sup>","text":"<pre><code>public readonly mypyJob: PythonLintMyPy;\n</code></pre> <ul> <li>Type: PythonLintMyPy</li> </ul>"},{"location":"api/python.typescript/#sphinxjoboptional","title":"<code>sphinxJob</code><sup>Optional</sup>","text":"<pre><code>public readonly sphinxJob: PagesSphinx;\n</code></pre> <ul> <li>Type: @gcix/gcix.gitlab.PagesSphinx</li> </ul>"},{"location":"api/python.typescript/#twinedevjoboptional","title":"<code>twineDevJob</code><sup>Optional</sup>","text":"<pre><code>public readonly twineDevJob: PythonDeployTwineUpload;\n</code></pre> <ul> <li>Type: PythonDeployTwineUpload</li> </ul>"},{"location":"api/python.typescript/#pythonlintflake8","title":"PythonLintFlake8","text":"<ul> <li>Implements: IPythonLintFlake8</li> </ul> <p>Runs:.</p> <pre><code>pip3 install --upgrade flake8\nflake8\n</code></pre> <p>This subclass of <code>Job</code> configures the following defaults for the superclass: - name: flake8 - stage: lint</p>"},{"location":"api/python.typescript/#initializers_3","title":"Initializers","text":"<pre><code>import { python } from '@gcix/gcix'\nnew python.PythonLintFlake8(props: PythonLintFlake8Props)\n</code></pre> Name Type Description <code>props</code> <code>PythonLintFlake8Props</code> No description."},{"location":"api/python.typescript/#propsrequired_4","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: PythonLintFlake8Props</li> </ul>"},{"location":"api/python.typescript/#methods_3","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.typescript/#adddependencies_3","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_7","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addneeds_3","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_7","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addparent_3","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.typescript/#parentrequired_3","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#addtags_3","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_9","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#addvariables_3","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/python.typescript/#variablesrequired_5","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#appendrules_3","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_8","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#appendscripts_3","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_8","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#assignallowfailure_2","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/python.typescript/#allowfailurerequired_6","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#assignartifacts_3","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/python.typescript/#artifactsrequired_4","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#assigncache_3","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/python.typescript/#cacherequired_4","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#assigndependencies_2","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_8","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assignimage_2","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.typescript/#imagerequired_4","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#assignneeds_2","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_8","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assigntags_2","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_10","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#copy_2","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.typescript/#extendname_2","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.typescript/#namerequired_4","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstage_2","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.typescript/#stagerequired_6","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstagevalue_2","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.typescript/#stagerequired_7","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#getallinstancenames_3","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.typescript/#childoptional_3","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#isequal_3","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.typescript/#comparablerequired_3","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/python.typescript/#prependrules_3","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_9","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#prependscripts_3","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_9","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#render_3","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.typescript/#properties_12","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description."},{"location":"api/python.typescript/#tagsrequired_11","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.typescript/#allowfailurerequired_7","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#namerequired_5","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#orderedtagsrequired_3","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.typescript/#parentsrequired_3","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/python.typescript/#scriptsrequired_10","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#stagerequired_8","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#artifactsoptional_3","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#cacheoptional_3","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#dependenciesoptional_3","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#imageoptional_2","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#needsoptional_3","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#originaloptional_2","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/python.typescript/#rulesoptional_2","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#variablesoptional_3","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#pythonlintisort","title":"PythonLintIsort","text":"<ul> <li>Implements: IPythonLintIsort</li> </ul> <p>Runs:.</p> <pre><code>pip3 install --upgrade isort\nisort --check .\n</code></pre> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: isort</li> <li>stage: lint</li> </ul>"},{"location":"api/python.typescript/#initializers_4","title":"Initializers","text":"<pre><code>import { python } from '@gcix/gcix'\nnew python.PythonLintIsort(props: PythonLintIsortProps)\n</code></pre> Name Type Description <code>props</code> <code>PythonLintIsortProps</code> No description."},{"location":"api/python.typescript/#propsrequired_5","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: PythonLintIsortProps</li> </ul>"},{"location":"api/python.typescript/#methods_4","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.typescript/#adddependencies_4","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_9","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addneeds_4","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_9","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addparent_4","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.typescript/#parentrequired_4","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#addtags_4","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_12","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#addvariables_4","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/python.typescript/#variablesrequired_6","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#appendrules_4","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_10","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#appendscripts_4","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_11","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#assignallowfailure_3","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/python.typescript/#allowfailurerequired_8","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#assignartifacts_4","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/python.typescript/#artifactsrequired_5","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#assigncache_4","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/python.typescript/#cacherequired_5","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#assigndependencies_3","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_10","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assignimage_3","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.typescript/#imagerequired_5","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#assignneeds_3","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_10","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assigntags_3","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_13","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#copy_3","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.typescript/#extendname_3","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.typescript/#namerequired_6","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstage_3","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.typescript/#stagerequired_9","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstagevalue_3","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.typescript/#stagerequired_10","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#getallinstancenames_4","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.typescript/#childoptional_4","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#isequal_4","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.typescript/#comparablerequired_4","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/python.typescript/#prependrules_4","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_11","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#prependscripts_4","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_12","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#render_4","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.typescript/#properties_13","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description."},{"location":"api/python.typescript/#tagsrequired_14","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.typescript/#allowfailurerequired_9","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#namerequired_7","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#orderedtagsrequired_4","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.typescript/#parentsrequired_4","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/python.typescript/#scriptsrequired_13","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#stagerequired_11","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#artifactsoptional_4","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#cacheoptional_4","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#dependenciesoptional_4","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#imageoptional_3","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#needsoptional_4","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#originaloptional_3","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/python.typescript/#rulesoptional_3","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#variablesoptional_4","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#pythonlintmypy","title":"PythonLintMyPy","text":"<ul> <li>Implements: IPythonLintMyPy</li> </ul> <p>Install mypy if not already installed. Execute mypy for <code>packageDir</code>.</p> <p>This subclass of <code>Job</code> configures the following defaults for the superclass: - name: mypy - stage: lint</p>"},{"location":"api/python.typescript/#initializers_5","title":"Initializers","text":"<pre><code>import { python } from '@gcix/gcix'\nnew python.PythonLintMyPy(props: PythonLintMyPyProps)\n</code></pre> Name Type Description <code>props</code> <code>PythonLintMyPyProps</code> No description."},{"location":"api/python.typescript/#propsrequired_6","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: PythonLintMyPyProps</li> </ul>"},{"location":"api/python.typescript/#methods_5","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.typescript/#adddependencies_5","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_11","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addneeds_5","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_11","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addparent_5","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.typescript/#parentrequired_5","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#addtags_5","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_15","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#addvariables_5","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/python.typescript/#variablesrequired_7","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#appendrules_5","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_12","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#appendscripts_5","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_14","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#assignallowfailure_4","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/python.typescript/#allowfailurerequired_10","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#assignartifacts_5","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/python.typescript/#artifactsrequired_6","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#assigncache_5","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/python.typescript/#cacherequired_6","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#assigndependencies_4","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_12","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assignimage_4","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.typescript/#imagerequired_6","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#assignneeds_4","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_12","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assigntags_4","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_16","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#copy_4","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.typescript/#extendname_4","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.typescript/#namerequired_8","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstage_4","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.typescript/#stagerequired_12","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstagevalue_4","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.typescript/#stagerequired_13","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#getallinstancenames_5","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.typescript/#childoptional_5","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#isequal_5","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.typescript/#comparablerequired_5","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/python.typescript/#prependrules_5","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_13","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#prependscripts_5","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_15","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#render_5","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.typescript/#properties_14","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>packageDir</code> <code>string</code> Package directory to type check. <code>myPyOptions</code> <code>string</code> Adds arguments to mypy execution. <code>myPyVersion</code> <code>string</code> If <code>mypy</code> is not already installed, this version will be installed."},{"location":"api/python.typescript/#tagsrequired_17","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.typescript/#allowfailurerequired_11","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#namerequired_9","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#orderedtagsrequired_5","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.typescript/#parentsrequired_5","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/python.typescript/#scriptsrequired_16","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#stagerequired_14","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#artifactsoptional_5","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#cacheoptional_5","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#dependenciesoptional_5","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#imageoptional_4","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#needsoptional_5","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#originaloptional_4","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/python.typescript/#rulesoptional_4","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#variablesoptional_5","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#packagedirrequired_1","title":"<code>packageDir</code><sup>Required</sup>","text":"<pre><code>public readonly packageDir: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Package directory to type check.</p>"},{"location":"api/python.typescript/#mypyoptionsoptional_1","title":"<code>myPyOptions</code><sup>Optional</sup>","text":"<pre><code>public readonly myPyOptions: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Adds arguments to mypy execution.</p>"},{"location":"api/python.typescript/#mypyversionoptional_1","title":"<code>myPyVersion</code><sup>Optional</sup>","text":"<pre><code>public readonly myPyVersion: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>If <code>mypy</code> is not already installed, this version will be installed.</p> <p>Installs latest version if <code>undefined</code>.</p>"},{"location":"api/python.typescript/#pythonscripts","title":"PythonScripts","text":"<p>Represents a collection of utility functions for scripting tasks.</p>"},{"location":"api/python.typescript/#static-functions","title":"Static Functions","text":"Name Description <code>pipInstallRequirements</code> Generates a shell command to install project requirements using <code>pipenv</code> and <code>pip</code> based on the presence of a <code>Pipfile.lock</code> or <code>requirements.txt</code>."},{"location":"api/python.typescript/#pipinstallrequirements","title":"<code>pipInstallRequirements</code>","text":"<pre><code>import { python } from '@gcix/gcix'\npython.PythonScripts.pipInstallRequirements(props: PipInstallRequirementsProps)\n</code></pre> <p>Generates a shell command to install project requirements using <code>pipenv</code> and <code>pip</code> based on the presence of a <code>Pipfile.lock</code> or <code>requirements.txt</code>.</p>"},{"location":"api/python.typescript/#propsrequired_7","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: PipInstallRequirementsProps</li> </ul> <p>An object containing the properties for installation.</p>"},{"location":"api/python.typescript/#pythontestevaluategittagpep440conformity","title":"PythonTestEvaluateGitTagPep440Conformity","text":"<ul> <li>Implements: IPythonTestEvaluateGitTagPep440Conformity</li> </ul> <p>Checks if the current pipelines <code>$CI_COMMIT_TAG</code> validates to a valid Python package version according to https://www.python.org/dev/peps/pep-0440.</p> <p>This job already contains a rule to only run when a <code>$CI_COMMIT_TAG</code> is present (<code>rules.only_tags()</code>).</p> <p>Runs <code>pytest</code> and installs project requirements before <code>PythonScripts.pipInstallRequirements</code></p> <ul> <li>Requires a <code>requirements.txt</code> in your project folder containing   at least <code>pytest</code></li> </ul> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: tag-pep440-conformity</li> <li>stage: test</li> <li>image: PredefinedImages.GCIP</li> <li>rules: on_tagsg</li> </ul>"},{"location":"api/python.typescript/#initializers_6","title":"Initializers","text":"<pre><code>import { python } from '@gcix/gcix'\nnew python.PythonTestEvaluateGitTagPep440Conformity(props: PythonTestEvaluateGitTagPep440ConformityProps)\n</code></pre> Name Type Description <code>props</code> <code>PythonTestEvaluateGitTagPep440ConformityProps</code> No description."},{"location":"api/python.typescript/#propsrequired_8","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: PythonTestEvaluateGitTagPep440ConformityProps</li> </ul>"},{"location":"api/python.typescript/#methods_6","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.typescript/#adddependencies_6","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_13","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addneeds_6","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_13","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addparent_6","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.typescript/#parentrequired_6","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#addtags_6","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_18","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#addvariables_6","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/python.typescript/#variablesrequired_8","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#appendrules_6","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_14","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#appendscripts_6","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_17","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#assignallowfailure_5","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/python.typescript/#allowfailurerequired_12","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#assignartifacts_6","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/python.typescript/#artifactsrequired_7","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#assigncache_6","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/python.typescript/#cacherequired_7","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#assigndependencies_5","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_14","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assignimage_5","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.typescript/#imagerequired_7","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#assignneeds_5","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_14","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assigntags_5","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_19","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#copy_5","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.typescript/#extendname_5","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.typescript/#namerequired_10","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstage_5","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.typescript/#stagerequired_15","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstagevalue_5","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.typescript/#stagerequired_16","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#getallinstancenames_6","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.typescript/#childoptional_6","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#isequal_6","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.typescript/#comparablerequired_6","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/python.typescript/#prependrules_6","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_15","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#prependscripts_6","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_18","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#render_6","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.typescript/#properties_15","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description."},{"location":"api/python.typescript/#tagsrequired_20","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.typescript/#allowfailurerequired_13","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#namerequired_11","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#orderedtagsrequired_6","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.typescript/#parentsrequired_6","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/python.typescript/#scriptsrequired_19","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#stagerequired_17","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#artifactsoptional_6","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#cacheoptional_6","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#dependenciesoptional_6","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#imageoptional_5","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#needsoptional_6","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#originaloptional_5","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/python.typescript/#rulesoptional_5","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#variablesoptional_6","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#pythontestpytest","title":"PythonTestPytest","text":"<ul> <li>Implements: IPythonTestPytest</li> </ul> <p>Runs <code>pytest</code> and installs project requirements before <code>PythonScripts.pipInstallRequirements</code>.</p> <p>Requires a <code>Pipfile.lock</code> or <code>requirements.txt</code> in your project folder   containing at least <code>pytest</code></p> <p>This subclass of <code>Job</code> will configure following defaults for the superclass:</p> <ul> <li>name: pytest</li> <li>stage: test</li> </ul>"},{"location":"api/python.typescript/#initializers_7","title":"Initializers","text":"<pre><code>import { python } from '@gcix/gcix'\nnew python.PythonTestPytest(props: PythonTestPytestProps)\n</code></pre> Name Type Description <code>props</code> <code>PythonTestPytestProps</code> No description."},{"location":"api/python.typescript/#propsrequired_9","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: PythonTestPytestProps</li> </ul>"},{"location":"api/python.typescript/#methods_7","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/python.typescript/#adddependencies_7","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_15","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addneeds_7","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_15","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#addparent_7","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/python.typescript/#parentrequired_7","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#addtags_7","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_21","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#addvariables_7","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/python.typescript/#variablesrequired_9","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#appendrules_7","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_16","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#appendscripts_7","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_20","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#assignallowfailure_6","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/python.typescript/#allowfailurerequired_14","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#assignartifacts_7","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/python.typescript/#artifactsrequired_8","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#assigncache_7","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/python.typescript/#cacherequired_8","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#assigndependencies_6","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#dependenciesrequired_16","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assignimage_6","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/python.typescript/#imagerequired_8","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#assignneeds_6","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/python.typescript/#needsrequired_16","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#assigntags_6","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#tagsrequired_22","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#copy_6","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/python.typescript/#extendname_6","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/python.typescript/#namerequired_12","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstage_6","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/python.typescript/#stagerequired_18","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#extendstagevalue_6","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/python.typescript/#stagerequired_19","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#getallinstancenames_7","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/python.typescript/#childoptional_7","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection</li> </ul>"},{"location":"api/python.typescript/#isequal_7","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/python.typescript/#comparablerequired_7","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.IBase</li> </ul>"},{"location":"api/python.typescript/#prependrules_7","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/python.typescript/#rulesrequired_17","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#prependscripts_7","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/python.typescript/#scriptsrequired_21","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#render_7","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/python.typescript/#properties_16","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>@gcix/gcix.OrderedStringSet</code> No description. <code>parents</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>@gcix/gcix.Artifacts</code> No description. <code>cache</code> <code>@gcix/gcix.Cache</code> No description. <code>dependencies</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>image</code> <code>@gcix/gcix.Image</code> No description. <code>needs</code> <code>@gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</code> No description. <code>original</code> <code>@gcix/gcix.Job</code> No description. <code>rules</code> <code>@gcix/gcix.Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>pipenvVersionSpecifier</code> <code>string</code> The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version. <code>pytestCommand</code> <code>string</code> This argument is only required if you have a custom command to call pytest."},{"location":"api/python.typescript/#tagsrequired_23","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/python.typescript/#allowfailurerequired_15","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/python.typescript/#namerequired_13","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#orderedtagsrequired_7","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: @gcix/gcix.OrderedStringSet</li> </ul>"},{"location":"api/python.typescript/#parentsrequired_7","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection[]</li> </ul>"},{"location":"api/python.typescript/#scriptsrequired_22","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/python.typescript/#stagerequired_20","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#artifactsoptional_7","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: @gcix/gcix.Artifacts</li> </ul>"},{"location":"api/python.typescript/#cacheoptional_7","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: @gcix/gcix.Cache</li> </ul>"},{"location":"api/python.typescript/#dependenciesoptional_7","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#imageoptional_6","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: @gcix/gcix.Image</li> </ul>"},{"location":"api/python.typescript/#needsoptional_7","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Job | @gcix/gcix.JobCollection | @gcix/gcix.Need[]</li> </ul>"},{"location":"api/python.typescript/#originaloptional_6","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: @gcix/gcix.Job</li> </ul>"},{"location":"api/python.typescript/#rulesoptional_6","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: @gcix/gcix.Rule[]</li> </ul>"},{"location":"api/python.typescript/#variablesoptional_7","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/python.typescript/#pipenvversionspecifierrequired","title":"<code>pipenvVersionSpecifier</code><sup>Required</sup>","text":"<pre><code>public readonly pipenvVersionSpecifier: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version.</p>"},{"location":"api/python.typescript/#pytestcommandrequired","title":"<code>pytestCommand</code><sup>Required</sup>","text":"<pre><code>public readonly pytestCommand: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>This argument is only required if you have a custom command to call pytest.</p>"},{"location":"api/python.typescript/#protocols","title":"Protocols","text":""},{"location":"api/python.typescript/#ipythonbuildbdistwheel","title":"IPythonBuildBdistWheel","text":"<ul> <li>Implemented By: PythonBuildBdistWheel, IPythonBuildBdistWheel</li> </ul>"},{"location":"api/python.typescript/#properties_17","title":"Properties","text":"Name Type Description <code>pipenvVersionSpecifier</code> <code>string</code> No description. <code>requirementsFile</code> <code>string</code> No description."},{"location":"api/python.typescript/#pipenvversionspecifieroptional_3","title":"<code>pipenvVersionSpecifier</code><sup>Optional</sup>","text":"<pre><code>public readonly pipenvVersionSpecifier: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#requirementsfileoptional_2","title":"<code>requirementsFile</code><sup>Optional</sup>","text":"<pre><code>public readonly requirementsFile: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/python.typescript/#ipythondeploytwineupload","title":"IPythonDeployTwineUpload","text":"<ul> <li>Implemented By: PythonDeployTwineUpload, IPythonDeployTwineUpload</li> </ul>"},{"location":"api/python.typescript/#properties_18","title":"Properties","text":"Name Type Description <code>twinePasswordEnvVar</code> <code>string</code> The name of the environment variable containing the password. <code>twineUsernameEnvVar</code> <code>string</code> The name of the environment variable containing the username value. <code>twineRepositoryUrl</code> <code>string</code> The URL to the PyPI repository to which the Python artifacts will be deployed."},{"location":"api/python.typescript/#twinepasswordenvvarrequired_1","title":"<code>twinePasswordEnvVar</code><sup>Required</sup>","text":"<pre><code>public readonly twinePasswordEnvVar: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the environment variable containing the password.</p> <p>DO NOT PROVIDE THE LOGIN VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_PASSWORD'.</p>"},{"location":"api/python.typescript/#twineusernameenvvarrequired_1","title":"<code>twineUsernameEnvVar</code><sup>Required</sup>","text":"<pre><code>public readonly twineUsernameEnvVar: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the environment variable containing the username value.</p> <p>DO NOT PROVIDE THE USERNAME VALUE ITSELF! This would be a security issue! Defaults to 'TWINE_USERNAME'.</p>"},{"location":"api/python.typescript/#twinerepositoryurloptional_2","title":"<code>twineRepositoryUrl</code><sup>Optional</sup>","text":"<pre><code>public readonly twineRepositoryUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The URL to the PyPI repository to which the Python artifacts will be deployed.</p> <p>If <code>undefined</code> the package is published to <code>https://pypi.org</code>.</p>"},{"location":"api/python.typescript/#ipythonfullstack","title":"IPythonFullStack","text":"<ul> <li>Implemented By: PythonFullStack, IPythonFullStack</li> </ul>"},{"location":"api/python.typescript/#properties_19","title":"Properties","text":"Name Type Description <code>bDistWheelJob</code> <code>PythonBuildBdistWheel</code> No description. <code>evaluateGitTagPep440ConformityJob</code> <code>PythonTestEvaluateGitTagPep440Conformity</code> No description. <code>flake8Job</code> <code>PythonLintFlake8</code> No description. <code>isortJob</code> <code>PythonLintIsort</code> No description. <code>pytestJob</code> <code>PythonTestPytest</code> No description. <code>twineProdJob</code> <code>PythonDeployTwineUpload</code> No description. <code>mypyJob</code> <code>PythonLintMyPy</code> No description. <code>sphinxJob</code> <code>@gcix/gcix.gitlab.PagesSphinx</code> No description. <code>twineDevJob</code> <code>PythonDeployTwineUpload</code> No description."},{"location":"api/python.typescript/#bdistwheeljobrequired_1","title":"<code>bDistWheelJob</code><sup>Required</sup>","text":"<pre><code>public readonly bDistWheelJob: PythonBuildBdistWheel;\n</code></pre> <ul> <li>Type: PythonBuildBdistWheel</li> </ul>"},{"location":"api/python.typescript/#evaluategittagpep440conformityjobrequired_1","title":"<code>evaluateGitTagPep440ConformityJob</code><sup>Required</sup>","text":"<pre><code>public readonly evaluateGitTagPep440ConformityJob: PythonTestEvaluateGitTagPep440Conformity;\n</code></pre> <ul> <li>Type: PythonTestEvaluateGitTagPep440Conformity</li> </ul>"},{"location":"api/python.typescript/#flake8jobrequired_1","title":"<code>flake8Job</code><sup>Required</sup>","text":"<pre><code>public readonly flake8Job: PythonLintFlake8;\n</code></pre> <ul> <li>Type: PythonLintFlake8</li> </ul>"},{"location":"api/python.typescript/#isortjobrequired_1","title":"<code>isortJob</code><sup>Required</sup>","text":"<pre><code>public readonly isortJob: PythonLintIsort;\n</code></pre> <ul> <li>Type: PythonLintIsort</li> </ul>"},{"location":"api/python.typescript/#pytestjobrequired_1","title":"<code>pytestJob</code><sup>Required</sup>","text":"<pre><code>public readonly pytestJob: PythonTestPytest;\n</code></pre> <ul> <li>Type: PythonTestPytest</li> </ul>"},{"location":"api/python.typescript/#twineprodjobrequired_1","title":"<code>twineProdJob</code><sup>Required</sup>","text":"<pre><code>public readonly twineProdJob: PythonDeployTwineUpload;\n</code></pre> <ul> <li>Type: PythonDeployTwineUpload</li> </ul>"},{"location":"api/python.typescript/#mypyjoboptional_1","title":"<code>mypyJob</code><sup>Optional</sup>","text":"<pre><code>public readonly mypyJob: PythonLintMyPy;\n</code></pre> <ul> <li>Type: PythonLintMyPy</li> </ul>"},{"location":"api/python.typescript/#sphinxjoboptional_1","title":"<code>sphinxJob</code><sup>Optional</sup>","text":"<pre><code>public readonly sphinxJob: PagesSphinx;\n</code></pre> <ul> <li>Type: @gcix/gcix.gitlab.PagesSphinx</li> </ul>"},{"location":"api/python.typescript/#twinedevjoboptional_1","title":"<code>twineDevJob</code><sup>Optional</sup>","text":"<pre><code>public readonly twineDevJob: PythonDeployTwineUpload;\n</code></pre> <ul> <li>Type: PythonDeployTwineUpload</li> </ul>"},{"location":"api/python.typescript/#ipythonlintflake8","title":"IPythonLintFlake8","text":"<ul> <li>Implemented By: PythonLintFlake8, IPythonLintFlake8</li> </ul>"},{"location":"api/python.typescript/#ipythonlintisort","title":"IPythonLintIsort","text":"<ul> <li>Implemented By: PythonLintIsort, IPythonLintIsort</li> </ul>"},{"location":"api/python.typescript/#ipythonlintmypy","title":"IPythonLintMyPy","text":"<ul> <li>Implemented By: PythonLintMyPy, IPythonLintMyPy</li> </ul>"},{"location":"api/python.typescript/#properties_20","title":"Properties","text":"Name Type Description <code>packageDir</code> <code>string</code> Package directory to type check. <code>myPyOptions</code> <code>string</code> Adds arguments to mypy execution. <code>myPyVersion</code> <code>string</code> If <code>mypy</code> is not already installed, this version will be installed."},{"location":"api/python.typescript/#packagedirrequired_2","title":"<code>packageDir</code><sup>Required</sup>","text":"<pre><code>public readonly packageDir: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Package directory to type check.</p>"},{"location":"api/python.typescript/#mypyoptionsoptional_2","title":"<code>myPyOptions</code><sup>Optional</sup>","text":"<pre><code>public readonly myPyOptions: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Adds arguments to mypy execution.</p>"},{"location":"api/python.typescript/#mypyversionoptional_2","title":"<code>myPyVersion</code><sup>Optional</sup>","text":"<pre><code>public readonly myPyVersion: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>If <code>mypy</code> is not already installed, this version will be installed.</p> <p>Installs latest version if <code>undefined</code>.</p>"},{"location":"api/python.typescript/#ipythontestevaluategittagpep440conformity","title":"IPythonTestEvaluateGitTagPep440Conformity","text":"<ul> <li>Implemented By: PythonTestEvaluateGitTagPep440Conformity, IPythonTestEvaluateGitTagPep440Conformity</li> </ul>"},{"location":"api/python.typescript/#ipythontestpytest","title":"IPythonTestPytest","text":"<ul> <li>Implemented By: PythonTestPytest, IPythonTestPytest</li> </ul>"},{"location":"api/python.typescript/#properties_21","title":"Properties","text":"Name Type Description <code>pipenvVersionSpecifier</code> <code>string</code> The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version. <code>pytestCommand</code> <code>string</code> This argument is only required if you have a custom command to call pytest."},{"location":"api/python.typescript/#pipenvversionspecifierrequired_1","title":"<code>pipenvVersionSpecifier</code><sup>Required</sup>","text":"<pre><code>public readonly pipenvVersionSpecifier: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The version hint of pipenv to install if <code>Pipfile.lock</code> is found. For example '==2022.08.15'. Defaults to latest package version.</p>"},{"location":"api/python.typescript/#pytestcommandrequired_1","title":"<code>pytestCommand</code><sup>Required</sup>","text":"<pre><code>public readonly pytestCommand: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>This argument is only required if you have a custom command to call pytest.</p>"},{"location":"api/root.python/","title":"API Reference","text":""},{"location":"api/root.python/#structs","title":"Structs","text":""},{"location":"api/root.python/#addchildrenprops","title":"AddChildrenProps","text":""},{"location":"api/root.python/#initializer","title":"Initializer","text":"<pre><code>import gcix\ngcix.AddChildrenProps(\njobs_or_job_collections: typing.List[typing.Union[Job, JobCollection]],\nname: str = None,\nstage: str = None\n)\n</code></pre>"},{"location":"api/root.python/#properties","title":"Properties","text":"Name Type Description <code>jobs_or_job_collections</code> <code>typing.List[typing.Union[Job, JobCollection]]</code> No description. <code>name</code> <code>str</code> No description. <code>stage</code> <code>str</code> No description."},{"location":"api/root.python/#jobs_or_job_collectionsrequired","title":"<code>jobs_or_job_collections</code><sup>Required</sup>","text":"<pre><code>jobs_or_job_collections: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection]]</li> </ul>"},{"location":"api/root.python/#nameoptional","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#stageoptional","title":"<code>stage</code><sup>Optional</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#artifactsprops","title":"ArtifactsProps","text":""},{"location":"api/root.python/#initializer_1","title":"Initializer","text":"<pre><code>import gcix\ngcix.ArtifactsProps(\nexcludes: typing.List[str] = None,\nexpire_in: str = None,\nexpose_as: str = None,\nname: str = None,\npaths: typing.List[str] = None,\npublic: bool = None,\nreports: typing.List[ArtifactsReport] = None,\nuntracked: bool = None,\nwhen: WhenStatement = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_1","title":"Properties","text":"Name Type Description <code>excludes</code> <code>typing.List[str]</code> Paths that prevent files from being added to an artifacts archive. <code>expire_in</code> <code>str</code> How long the artifacts will be saved before it gets deleted. <code>expose_as</code> <code>str</code> Used to expose artifacts in merge requests. <code>name</code> <code>str</code> Name of the artifacts archive. <code>paths</code> <code>typing.List[str]</code> Paths relative to project directory <code>$CI_PROJECT_DIR</code>, found files will be used to create the artifacts. <code>public</code> <code>bool</code> True makes artifacts public. <code>reports</code> <code>typing.List[ArtifactsReport]</code> Reports must be a valid dictionary, the key represents a ArtifactsReport and the value must be a valid relativ file path to the reports file. <code>untracked</code> <code>bool</code> If true adds all untracked file to artifacts archive. <code>when</code> <code>WhenStatement</code> When to upload artifacts, Only <code>on_success</code>, <code>on_failure</code> or <code>always</code> is allowed."},{"location":"api/root.python/#excludesoptional","title":"<code>excludes</code><sup>Optional</sup>","text":"<pre><code>excludes: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Paths that prevent files from being added to an artifacts archive.</p>"},{"location":"api/root.python/#expire_inoptional","title":"<code>expire_in</code><sup>Optional</sup>","text":"<pre><code>expire_in: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>How long the artifacts will be saved before it gets deleted.</p>"},{"location":"api/root.python/#expose_asoptional","title":"<code>expose_as</code><sup>Optional</sup>","text":"<pre><code>expose_as: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Used to expose artifacts in merge requests.</p>"},{"location":"api/root.python/#nameoptional_1","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Name of the artifacts archive.</p> <p>Internally defaults to {PredefinedVariables.ciJobName}-{PredefinedVariables.ciCommitRefSlug}.</p>"},{"location":"api/root.python/#pathsoptional","title":"<code>paths</code><sup>Optional</sup>","text":"<pre><code>paths: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Paths relative to project directory <code>$CI_PROJECT_DIR</code>, found files will be used to create the artifacts.</p>"},{"location":"api/root.python/#publicoptional","title":"<code>public</code><sup>Optional</sup>","text":"<pre><code>public: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>True makes artifacts public.</p>"},{"location":"api/root.python/#reportsoptional","title":"<code>reports</code><sup>Optional</sup>","text":"<pre><code>reports: typing.List[ArtifactsReport]\n</code></pre> <ul> <li>Type: typing.List[ArtifactsReport]</li> </ul> <p>Reports must be a valid dictionary, the key represents a ArtifactsReport and the value must be a valid relativ file path to the reports file.</p>"},{"location":"api/root.python/#untrackedoptional","title":"<code>untracked</code><sup>Optional</sup>","text":"<pre><code>untracked: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>If true adds all untracked file to artifacts archive.</p>"},{"location":"api/root.python/#whenoptional","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>when: WhenStatement\n</code></pre> <ul> <li>Type: WhenStatement</li> </ul> <p>When to upload artifacts, Only <code>on_success</code>, <code>on_failure</code> or <code>always</code> is allowed.</p>"},{"location":"api/root.python/#artifactsreport","title":"ArtifactsReport","text":""},{"location":"api/root.python/#initializer_2","title":"Initializer","text":"<pre><code>import gcix\ngcix.ArtifactsReport(\nfile: str,\nreport_type: str\n)\n</code></pre>"},{"location":"api/root.python/#properties_2","title":"Properties","text":"Name Type Description <code>file</code> <code>str</code> Relative path withing the project, where to find the generated report file. <code>report_type</code> <code>str</code> https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html ArtifactsReport type to use."},{"location":"api/root.python/#filerequired","title":"<code>file</code><sup>Required</sup>","text":"<pre><code>file: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Relative path withing the project, where to find the generated report file.</p>"},{"location":"api/root.python/#report_typerequired","title":"<code>report_type</code><sup>Required</sup>","text":"<pre><code>report_type: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html ArtifactsReport type to use.</p>"},{"location":"api/root.python/#cachekeyprops","title":"CacheKeyProps","text":""},{"location":"api/root.python/#initializer_3","title":"Initializer","text":"<pre><code>import gcix\ngcix.CacheKeyProps(\nfiles: typing.List[str] = None,\nkey: str = None,\nprefix: str = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_3","title":"Properties","text":"Name Type Description <code>files</code> <code>typing.List[str]</code> No description. <code>key</code> <code>str</code> No description. <code>prefix</code> <code>str</code> No description."},{"location":"api/root.python/#filesoptional","title":"<code>files</code><sup>Optional</sup>","text":"<pre><code>files: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#keyoptional","title":"<code>key</code><sup>Optional</sup>","text":"<pre><code>key: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: gcix.PredefinedVariables.ciCommitRefSlug</li> </ul>"},{"location":"api/root.python/#prefixoptional","title":"<code>prefix</code><sup>Optional</sup>","text":"<pre><code>prefix: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#cacheprops","title":"CacheProps","text":""},{"location":"api/root.python/#initializer_4","title":"Initializer","text":"<pre><code>import gcix\ngcix.CacheProps(\npaths: typing.List[str],\ncache_key: CacheKey = None,\npolicy: CachePolicy = None,\nuntracked: bool = None,\nwhen: WhenStatement = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_4","title":"Properties","text":"Name Type Description <code>paths</code> <code>typing.List[str]</code> No description. <code>cache_key</code> <code>CacheKey</code> No description. <code>policy</code> <code>CachePolicy</code> No description. <code>untracked</code> <code>bool</code> Set the untracked keyword to <code>True</code> to cache all files that are untracked in your Git repository. <code>when</code> <code>WhenStatement</code> No description."},{"location":"api/root.python/#pathsrequired","title":"<code>paths</code><sup>Required</sup>","text":"<pre><code>paths: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#cache_keyoptional","title":"<code>cache_key</code><sup>Optional</sup>","text":"<pre><code>cache_key: CacheKey\n</code></pre> <ul> <li>Type: CacheKey</li> <li>Default: to <code>CacheKey</code> with default arguments.</li> </ul>"},{"location":"api/root.python/#policyoptional","title":"<code>policy</code><sup>Optional</sup>","text":"<pre><code>policy: CachePolicy\n</code></pre> <ul> <li>Type: CachePolicy</li> </ul>"},{"location":"api/root.python/#untrackedoptional_1","title":"<code>untracked</code><sup>Optional</sup>","text":"<pre><code>untracked: bool\n</code></pre> <ul> <li>Type: bool</li> </ul> <p>Set the untracked keyword to <code>True</code> to cache all files that are untracked in your Git repository.</p>"},{"location":"api/root.python/#whenoptional_1","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>when: WhenStatement\n</code></pre> <ul> <li>Type: WhenStatement</li> </ul>"},{"location":"api/root.python/#childdict","title":"ChildDict","text":""},{"location":"api/root.python/#initializer_5","title":"Initializer","text":"<pre><code>import gcix\ngcix.ChildDict(\nchild: typing.Union[Job, JobCollection],\nname: str = None,\nstage: str = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_5","title":"Properties","text":"Name Type Description <code>child</code> <code>typing.Union[Job, JobCollection]</code> No description. <code>name</code> <code>str</code> No description. <code>stage</code> <code>str</code> No description."},{"location":"api/root.python/#childrequired","title":"<code>child</code><sup>Required</sup>","text":"<pre><code>child: typing.Union[Job, JobCollection]\n</code></pre> <ul> <li>Type: typing.Union[Job, JobCollection]</li> </ul>"},{"location":"api/root.python/#nameoptional_2","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#stageoptional_1","title":"<code>stage</code><sup>Optional</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#imageprops","title":"ImageProps","text":""},{"location":"api/root.python/#initializer_6","title":"Initializer","text":"<pre><code>import gcix\ngcix.ImageProps(\nname: str,\nentrypoint: typing.List[str] = None,\ntag: str = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_6","title":"Properties","text":"Name Type Description <code>name</code> <code>str</code> No description. <code>entrypoint</code> <code>typing.List[str]</code> No description. <code>tag</code> <code>str</code> No description."},{"location":"api/root.python/#namerequired","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#entrypointoptional","title":"<code>entrypoint</code><sup>Optional</sup>","text":"<pre><code>entrypoint: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#tagoptional","title":"<code>tag</code><sup>Optional</sup>","text":"<pre><code>tag: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#includeartifactprops","title":"IncludeArtifactProps","text":""},{"location":"api/root.python/#initializer_7","title":"Initializer","text":"<pre><code>import gcix\ngcix.IncludeArtifactProps(\nartifact: str,\njob: str\n)\n</code></pre>"},{"location":"api/root.python/#properties_7","title":"Properties","text":"Name Type Description <code>artifact</code> <code>str</code> Relative path to the artifact which is produced by <code>job</code>. <code>job</code> <code>str</code> Job name to include the artifact from."},{"location":"api/root.python/#artifactrequired","title":"<code>artifact</code><sup>Required</sup>","text":"<pre><code>artifact: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Relative path to the artifact which is produced by <code>job</code>.</p>"},{"location":"api/root.python/#jobrequired","title":"<code>job</code><sup>Required</sup>","text":"<pre><code>job: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Job name to include the artifact from.</p>"},{"location":"api/root.python/#includefileprops","title":"IncludeFileProps","text":""},{"location":"api/root.python/#initializer_8","title":"Initializer","text":"<pre><code>import gcix\ngcix.IncludeFileProps(\nfile: str,\nproject: str,\nref: str = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_8","title":"Properties","text":"Name Type Description <code>file</code> <code>str</code> Relative path to the file to include. <code>project</code> <code>str</code> Project to include the file from. <code>ref</code> <code>str</code> Project branch to include the file from."},{"location":"api/root.python/#filerequired_1","title":"<code>file</code><sup>Required</sup>","text":"<pre><code>file: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Relative path to the file to include.</p>"},{"location":"api/root.python/#projectrequired","title":"<code>project</code><sup>Required</sup>","text":"<pre><code>project: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Project to include the file from.</p>"},{"location":"api/root.python/#refoptional","title":"<code>ref</code><sup>Optional</sup>","text":"<pre><code>ref: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Project branch to include the file from.</p>"},{"location":"api/root.python/#includelocalprops","title":"IncludeLocalProps","text":""},{"location":"api/root.python/#initializer_9","title":"Initializer","text":"<pre><code>import gcix\ngcix.IncludeLocalProps(\nlocal: str\n)\n</code></pre>"},{"location":"api/root.python/#properties_9","title":"Properties","text":"Name Type Description <code>local</code> <code>str</code> Relative path to the file within this repository to include."},{"location":"api/root.python/#localrequired","title":"<code>local</code><sup>Required</sup>","text":"<pre><code>local: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Relative path to the file within this repository to include.</p>"},{"location":"api/root.python/#includeremoteprops","title":"IncludeRemoteProps","text":""},{"location":"api/root.python/#initializer_10","title":"Initializer","text":"<pre><code>import gcix\ngcix.IncludeRemoteProps(\nremote: str\n)\n</code></pre>"},{"location":"api/root.python/#properties_10","title":"Properties","text":"Name Type Description <code>remote</code> <code>str</code> URL to include the file from."},{"location":"api/root.python/#remoterequired","title":"<code>remote</code><sup>Required</sup>","text":"<pre><code>remote: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>URL to include the file from.</p>"},{"location":"api/root.python/#includetemplateprops","title":"IncludeTemplateProps","text":""},{"location":"api/root.python/#initializer_11","title":"Initializer","text":"<pre><code>import gcix\ngcix.IncludeTemplateProps(\ntemplate: str\n)\n</code></pre>"},{"location":"api/root.python/#properties_11","title":"Properties","text":"Name Type Description <code>template</code> <code>str</code> Gitlab template pipeline to include."},{"location":"api/root.python/#templaterequired","title":"<code>template</code><sup>Required</sup>","text":"<pre><code>template: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Gitlab template pipeline to include.</p>"},{"location":"api/root.python/#jobprops","title":"JobProps","text":""},{"location":"api/root.python/#initializer_12","title":"Initializer","text":"<pre><code>import gcix\ngcix.JobProps(\nscripts: typing.List[str],\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]] = None,\nartifacts: Artifacts = None,\ncache: Cache = None,\ndependencies: typing.List[typing.Union[Job, JobCollection]] = None,\nimage: typing.Union[str, Image] = None,\nname: str = None,\nneeds: typing.List[typing.Union[Job, JobCollection, Need]] = None,\nrules: typing.List[Rule] = None,\nstage: str = None,\ntags: typing.List[str] = None,\nvariables: typing.Mapping[str] = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_12","title":"Properties","text":"Name Type Description <code>scripts</code> <code>typing.List[str]</code> No description. <code>allow_failure</code> <code>typing.Union[bool, typing.List[typing.Union[int, float]]]</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[Job, JobCollection]]</code> No description. <code>image</code> <code>typing.Union[str, Image]</code> No description. <code>name</code> <code>str</code> No description. <code>needs</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>rules</code> <code>typing.List[Rule]</code> No description. <code>stage</code> <code>str</code> No description. <code>tags</code> <code>typing.List[str]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description."},{"location":"api/root.python/#scriptsrequired","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#allow_failureoptional","title":"<code>allow_failure</code><sup>Optional</sup>","text":"<pre><code>allow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#artifactsoptional","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#cacheoptional","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#dependenciesoptional","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection]]</li> </ul>"},{"location":"api/root.python/#imageoptional","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#nameoptional_3","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#needsoptional","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#rulesoptional","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#stageoptional_2","title":"<code>stage</code><sup>Optional</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#tagsoptional","title":"<code>tags</code><sup>Optional</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#variablesoptional","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#needprops","title":"NeedProps","text":""},{"location":"api/root.python/#initializer_13","title":"Initializer","text":"<pre><code>import gcix\ngcix.NeedProps(\nartifacts: bool = None,\njob: str = None,\npipeline: str = None,\nproject: str = None,\nref: str = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_13","title":"Properties","text":"Name Type Description <code>artifacts</code> <code>bool</code> No description. <code>job</code> <code>str</code> No description. <code>pipeline</code> <code>str</code> No description. <code>project</code> <code>str</code> No description. <code>ref</code> <code>str</code> No description."},{"location":"api/root.python/#artifactsoptional_1","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: true</li> </ul>"},{"location":"api/root.python/#joboptional","title":"<code>job</code><sup>Optional</sup>","text":"<pre><code>job: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: undefined but requires <code>pipeline</code> to be set.</li> </ul>"},{"location":"api/root.python/#pipelineoptional","title":"<code>pipeline</code><sup>Optional</sup>","text":"<pre><code>pipeline: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: undefined which requires <code>job</code> to be set.</li> </ul>"},{"location":"api/root.python/#projectoptional","title":"<code>project</code><sup>Optional</sup>","text":"<pre><code>project: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: undefined</li> </ul>"},{"location":"api/root.python/#refoptional_1","title":"<code>ref</code><sup>Optional</sup>","text":"<pre><code>ref: str\n</code></pre> <ul> <li>Type: str</li> <li>Default: undefined</li> </ul>"},{"location":"api/root.python/#pipelineprops","title":"PipelineProps","text":""},{"location":"api/root.python/#initializer_14","title":"Initializer","text":"<pre><code>import gcix\ngcix.PipelineProps(\nincludes: typing.List[Include] = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_14","title":"Properties","text":"Name Type Description <code>includes</code> <code>typing.List[Include]</code> You can add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\"."},{"location":"api/root.python/#includesoptional","title":"<code>includes</code><sup>Optional</sup>","text":"<pre><code>includes: typing.List[Include]\n</code></pre> <ul> <li>Type: typing.List[Include]</li> </ul> <p>You can add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\".</p>"},{"location":"api/root.python/#renderedimage","title":"RenderedImage","text":"<p>This module represents the Gitlab CI Image keyword. Use <code>Image</code> to specify a Docker image to use for the <code>gcix.Job</code>.</p> <p>Instances of this class are intended to be immutable. Image objects are typically defined in a central location and often reused throughout the codebase. Modifying an Image object at one place may result in unexpected changes at any other reference to that object. Therefore, this class does not provide any setter methods to modify its properties directly.</p> <p>However, you can create an altered copy of an Image object using the .withTag() and .withEntrypoint() methods. These methods return a new Image object with the specified modifications, allowing you to reuse the original Image object while making specific changes for a particular use case.</p> <p>By following this approach, you can maintain a central repository of Image objects and easily create customized versions as needed, without affecting the original object or introducing unintended side effects.</p>"},{"location":"api/root.python/#initializer_15","title":"Initializer","text":"<pre><code>import gcix\ngcix.RenderedImage(\nname: str,\nentrypoint: typing.List[str] = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_15","title":"Properties","text":"Name Type Description <code>name</code> <code>str</code> No description. <code>entrypoint</code> <code>typing.List[str]</code> No description."},{"location":"api/root.python/#namerequired_1","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#entrypointoptional_1","title":"<code>entrypoint</code><sup>Optional</sup>","text":"<pre><code>entrypoint: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#renderedincludeartifact","title":"RenderedIncludeArtifact","text":""},{"location":"api/root.python/#initializer_16","title":"Initializer","text":"<pre><code>import gcix\ngcix.RenderedIncludeArtifact(\nartifact: str,\njob: str\n)\n</code></pre>"},{"location":"api/root.python/#properties_16","title":"Properties","text":"Name Type Description <code>artifact</code> <code>str</code> No description. <code>job</code> <code>str</code> No description."},{"location":"api/root.python/#artifactrequired_1","title":"<code>artifact</code><sup>Required</sup>","text":"<pre><code>artifact: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#jobrequired_1","title":"<code>job</code><sup>Required</sup>","text":"<pre><code>job: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#renderedincludefile","title":"RenderedIncludeFile","text":""},{"location":"api/root.python/#initializer_17","title":"Initializer","text":"<pre><code>import gcix\ngcix.RenderedIncludeFile(\nfile: str,\nproject: str,\nref: str = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_17","title":"Properties","text":"Name Type Description <code>file</code> <code>str</code> No description. <code>project</code> <code>str</code> No description. <code>ref</code> <code>str</code> No description."},{"location":"api/root.python/#filerequired_2","title":"<code>file</code><sup>Required</sup>","text":"<pre><code>file: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#projectrequired_1","title":"<code>project</code><sup>Required</sup>","text":"<pre><code>project: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#refoptional_2","title":"<code>ref</code><sup>Optional</sup>","text":"<pre><code>ref: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#renderedincludelocal","title":"RenderedIncludeLocal","text":""},{"location":"api/root.python/#initializer_18","title":"Initializer","text":"<pre><code>import gcix\ngcix.RenderedIncludeLocal(\nlocal: str\n)\n</code></pre>"},{"location":"api/root.python/#properties_18","title":"Properties","text":"Name Type Description <code>local</code> <code>str</code> No description."},{"location":"api/root.python/#localrequired_1","title":"<code>local</code><sup>Required</sup>","text":"<pre><code>local: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#renderedincluderemote","title":"RenderedIncludeRemote","text":""},{"location":"api/root.python/#initializer_19","title":"Initializer","text":"<pre><code>import gcix\ngcix.RenderedIncludeRemote(\nremote: str\n)\n</code></pre>"},{"location":"api/root.python/#properties_19","title":"Properties","text":"Name Type Description <code>remote</code> <code>str</code> No description."},{"location":"api/root.python/#remoterequired_1","title":"<code>remote</code><sup>Required</sup>","text":"<pre><code>remote: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#renderedincludetemplate","title":"RenderedIncludeTemplate","text":""},{"location":"api/root.python/#initializer_20","title":"Initializer","text":"<pre><code>import gcix\ngcix.RenderedIncludeTemplate(\ntemplate: str\n)\n</code></pre>"},{"location":"api/root.python/#properties_20","title":"Properties","text":"Name Type Description <code>template</code> <code>str</code> No description."},{"location":"api/root.python/#templaterequired_1","title":"<code>template</code><sup>Required</sup>","text":"<pre><code>template: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#renderedjob","title":"RenderedJob","text":""},{"location":"api/root.python/#initializer_21","title":"Initializer","text":"<pre><code>import gcix\ngcix.RenderedJob()\n</code></pre>"},{"location":"api/root.python/#ruleprops","title":"RuleProps","text":""},{"location":"api/root.python/#initializer_22","title":"Initializer","text":"<pre><code>import gcix\ngcix.RuleProps(\nallow_failure: bool = None,\nchanges: typing.List[str] = None,\nexists: typing.List[str] = None,\nif_statement: str = None,\nvariables: typing.Mapping[str] = None,\nwhen: WhenStatement = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_21","title":"Properties","text":"Name Type Description <code>allow_failure</code> <code>bool</code> No description. <code>changes</code> <code>typing.List[str]</code> No description. <code>exists</code> <code>typing.List[str]</code> No description. <code>if_statement</code> <code>str</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>when</code> <code>WhenStatement</code> No description."},{"location":"api/root.python/#allow_failureoptional_1","title":"<code>allow_failure</code><sup>Optional</sup>","text":"<pre><code>allow_failure: bool\n</code></pre> <ul> <li>Type: bool</li> <li>Default: false</li> </ul>"},{"location":"api/root.python/#changesoptional","title":"<code>changes</code><sup>Optional</sup>","text":"<pre><code>changes: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#existsoptional","title":"<code>exists</code><sup>Optional</sup>","text":"<pre><code>exists: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#if_statementoptional","title":"<code>if_statement</code><sup>Optional</sup>","text":"<pre><code>if_statement: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#variablesoptional_1","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#whenoptional_2","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>when: WhenStatement\n</code></pre> <ul> <li>Type: WhenStatement</li> <li>Default: WhenStatement.ON_SUCCESS.</li> </ul>"},{"location":"api/root.python/#serviceprops","title":"ServiceProps","text":""},{"location":"api/root.python/#initializer_23","title":"Initializer","text":"<pre><code>import gcix\ngcix.ServiceProps(\nname: str\n)\n</code></pre>"},{"location":"api/root.python/#properties_22","title":"Properties","text":"Name Type Description <code>name</code> <code>str</code> No description."},{"location":"api/root.python/#namerequired_2","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#triggerjobprops","title":"TriggerJobProps","text":""},{"location":"api/root.python/#initializer_24","title":"Initializer","text":"<pre><code>import gcix\ngcix.TriggerJobProps(\nbranch: str = None,\nincludes: typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]] = None,\nname: str = None,\nproject: str = None,\nstage: str = None,\nstrategy: str = None\n)\n</code></pre>"},{"location":"api/root.python/#properties_23","title":"Properties","text":"Name Type Description <code>branch</code> <code>str</code> No description. <code>includes</code> <code>typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]]</code> No description. <code>name</code> <code>str</code> No description. <code>project</code> <code>str</code> No description. <code>stage</code> <code>str</code> No description. <code>strategy</code> <code>str</code> No description."},{"location":"api/root.python/#branchoptional","title":"<code>branch</code><sup>Optional</sup>","text":"<pre><code>branch: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#includesoptional_1","title":"<code>includes</code><sup>Optional</sup>","text":"<pre><code>includes: typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]]</li> </ul>"},{"location":"api/root.python/#nameoptional_4","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#projectoptional_1","title":"<code>project</code><sup>Optional</sup>","text":"<pre><code>project: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#stageoptional_3","title":"<code>stage</code><sup>Optional</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#strategyoptional","title":"<code>strategy</code><sup>Optional</sup>","text":"<pre><code>strategy: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#classes","title":"Classes","text":""},{"location":"api/root.python/#artifacts","title":"Artifacts","text":"<ul> <li>Implements: IArtifacts</li> </ul> <p>This class represents the artifacts keyword.</p> <p>Gitlab CI documentation: \"Use artifacts to specify a list of files and directories that are attached to the <code>gcix.Job</code> when it succeeds, fails, or always. [...] by default, <code>gcix.Job</code>s in later stages automatically download all the artifacts created by jobs in earlier stages. You can control artifact download behavior in Job's with dependencies.\"</p>"},{"location":"api/root.python/#initializers","title":"Initializers","text":"<pre><code>import gcix\ngcix.Artifacts(\nexcludes: typing.List[str] = None,\nexpire_in: str = None,\nexpose_as: str = None,\nname: str = None,\npaths: typing.List[str] = None,\npublic: bool = None,\nreports: typing.List[ArtifactsReport] = None,\nuntracked: bool = None,\nwhen: WhenStatement = None\n)\n</code></pre> Name Type Description <code>excludes</code> <code>typing.List[str]</code> Paths that prevent files from being added to an artifacts archive. <code>expire_in</code> <code>str</code> How long the artifacts will be saved before it gets deleted. <code>expose_as</code> <code>str</code> Used to expose artifacts in merge requests. <code>name</code> <code>str</code> Name of the artifacts archive. <code>paths</code> <code>typing.List[str]</code> Paths relative to project directory <code>$CI_PROJECT_DIR</code>, found files will be used to create the artifacts. <code>public</code> <code>bool</code> True makes artifacts public. <code>reports</code> <code>typing.List[ArtifactsReport]</code> Reports must be a valid dictionary, the key represents a ArtifactsReport and the value must be a valid relativ file path to the reports file. <code>untracked</code> <code>bool</code> If true adds all untracked file to artifacts archive. <code>when</code> <code>WhenStatement</code> When to upload artifacts, Only <code>on_success</code>, <code>on_failure</code> or <code>always</code> is allowed."},{"location":"api/root.python/#excludesoptional_1","title":"<code>excludes</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul> <p>Paths that prevent files from being added to an artifacts archive.</p>"},{"location":"api/root.python/#expire_inoptional_1","title":"<code>expire_in</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>How long the artifacts will be saved before it gets deleted.</p>"},{"location":"api/root.python/#expose_asoptional_1","title":"<code>expose_as</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Used to expose artifacts in merge requests.</p>"},{"location":"api/root.python/#nameoptional_5","title":"<code>name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Name of the artifacts archive.</p> <p>Internally defaults to {PredefinedVariables.ciJobName}-{PredefinedVariables.ciCommitRefSlug}.</p>"},{"location":"api/root.python/#pathsoptional_1","title":"<code>paths</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul> <p>Paths relative to project directory <code>$CI_PROJECT_DIR</code>, found files will be used to create the artifacts.</p>"},{"location":"api/root.python/#publicoptional_1","title":"<code>public</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> </ul> <p>True makes artifacts public.</p>"},{"location":"api/root.python/#reportsoptional_1","title":"<code>reports</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[ArtifactsReport]</li> </ul> <p>Reports must be a valid dictionary, the key represents a ArtifactsReport and the value must be a valid relativ file path to the reports file.</p>"},{"location":"api/root.python/#untrackedoptional_2","title":"<code>untracked</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> </ul> <p>If true adds all untracked file to artifacts archive.</p>"},{"location":"api/root.python/#whenoptional_3","title":"<code>when</code><sup>Optional</sup>","text":"<ul> <li>Type: WhenStatement</li> </ul> <p>When to upload artifacts, Only <code>on_success</code>, <code>on_failure</code> or <code>always</code> is allowed.</p>"},{"location":"api/root.python/#methods","title":"Methods","text":"Name Description <code>add_excludes</code> No description. <code>add_paths</code> No description. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#add_excludes","title":"<code>add_excludes</code>","text":"<pre><code>def add_excludes(\nexcludes: typing.List[str]\n) -&gt; None\n</code></pre>"},{"location":"api/root.python/#excludesrequired","title":"<code>excludes</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#add_paths","title":"<code>add_paths</code>","text":"<pre><code>def add_paths(\npaths: typing.List[str]\n) -&gt; None\n</code></pre>"},{"location":"api/root.python/#pathsrequired_1","title":"<code>paths</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#is_equal","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#render","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_24","title":"Properties","text":"Name Type Description <code>excludes</code> <code>typing.List[str]</code> No description. <code>paths</code> <code>typing.List[str]</code> No description. <code>expire_in</code> <code>str</code> No description. <code>expose_as</code> <code>str</code> No description. <code>name</code> <code>str</code> No description. <code>public</code> <code>bool</code> No description. <code>reports</code> <code>typing.List[ArtifactsReport]</code> No description. <code>untracked</code> <code>bool</code> No description. <code>when</code> <code>WhenStatement</code> No description. <code>ordered_excludes</code> <code>OrderedStringSet</code> No description. <code>ordered_paths</code> <code>OrderedStringSet</code> No description."},{"location":"api/root.python/#excludesrequired_1","title":"<code>excludes</code><sup>Required</sup>","text":"<pre><code>excludes: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#pathsrequired_2","title":"<code>paths</code><sup>Required</sup>","text":"<pre><code>paths: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#expire_inoptional_2","title":"<code>expire_in</code><sup>Optional</sup>","text":"<pre><code>expire_in: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#expose_asoptional_2","title":"<code>expose_as</code><sup>Optional</sup>","text":"<pre><code>expose_as: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#nameoptional_6","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#publicoptional_2","title":"<code>public</code><sup>Optional</sup>","text":"<pre><code>public: bool\n</code></pre> <ul> <li>Type: bool</li> </ul>"},{"location":"api/root.python/#reportsoptional_2","title":"<code>reports</code><sup>Optional</sup>","text":"<pre><code>reports: typing.List[ArtifactsReport]\n</code></pre> <ul> <li>Type: typing.List[ArtifactsReport]</li> </ul>"},{"location":"api/root.python/#untrackedoptional_3","title":"<code>untracked</code><sup>Optional</sup>","text":"<pre><code>untracked: bool\n</code></pre> <ul> <li>Type: bool</li> </ul>"},{"location":"api/root.python/#whenoptional_4","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>when: WhenStatement\n</code></pre> <ul> <li>Type: WhenStatement</li> </ul>"},{"location":"api/root.python/#ordered_excludesrequired","title":"<code>ordered_excludes</code><sup>Required</sup>","text":"<pre><code>ordered_excludes: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#ordered_pathsrequired","title":"<code>ordered_paths</code><sup>Required</sup>","text":"<pre><code>ordered_paths: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#cache","title":"Cache","text":"<ul> <li>Implements: ICache</li> </ul> <p>This class represents the cache keyword.</p> <p>Gitlab CI documentation:</p> <p>\"Use cache to specify a list of files and directories to cache between <code>gcix.Job</code>s. [...] Caching is shared between <code>gcix.Pipeline</code>s and <code>gcix.Job</code>s. Caches are restored before artifacts.\"</p>"},{"location":"api/root.python/#initializers_1","title":"Initializers","text":"<pre><code>import gcix\ngcix.Cache(\npaths: typing.List[str],\ncache_key: CacheKey = None,\npolicy: CachePolicy = None,\nuntracked: bool = None,\nwhen: WhenStatement = None\n)\n</code></pre> Name Type Description <code>paths</code> <code>typing.List[str]</code> No description. <code>cache_key</code> <code>CacheKey</code> No description. <code>policy</code> <code>CachePolicy</code> No description. <code>untracked</code> <code>bool</code> Set the untracked keyword to <code>True</code> to cache all files that are untracked in your Git repository. <code>when</code> <code>WhenStatement</code> No description."},{"location":"api/root.python/#pathsrequired_3","title":"<code>paths</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#cache_keyoptional_1","title":"<code>cache_key</code><sup>Optional</sup>","text":"<ul> <li>Type: CacheKey</li> <li>Default: to <code>CacheKey</code> with default arguments.</li> </ul>"},{"location":"api/root.python/#policyoptional_1","title":"<code>policy</code><sup>Optional</sup>","text":"<ul> <li>Type: CachePolicy</li> </ul>"},{"location":"api/root.python/#untrackedoptional_4","title":"<code>untracked</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> </ul> <p>Set the untracked keyword to <code>True</code> to cache all files that are untracked in your Git repository.</p>"},{"location":"api/root.python/#whenoptional_5","title":"<code>when</code><sup>Optional</sup>","text":"<ul> <li>Type: WhenStatement</li> </ul>"},{"location":"api/root.python/#methods_1","title":"Methods","text":"Name Description <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#is_equal_1","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_1","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#render_1","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_25","title":"Properties","text":"Name Type Description <code>cache_key</code> <code>CacheKey</code> No description. <code>paths</code> <code>typing.List[str]</code> No description. <code>policy</code> <code>CachePolicy</code> No description. <code>untracked</code> <code>bool</code> No description. <code>when</code> <code>WhenStatement</code> No description."},{"location":"api/root.python/#cache_keyrequired","title":"<code>cache_key</code><sup>Required</sup>","text":"<pre><code>cache_key: CacheKey\n</code></pre> <ul> <li>Type: CacheKey</li> </ul>"},{"location":"api/root.python/#pathsrequired_4","title":"<code>paths</code><sup>Required</sup>","text":"<pre><code>paths: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#policyoptional_2","title":"<code>policy</code><sup>Optional</sup>","text":"<pre><code>policy: CachePolicy\n</code></pre> <ul> <li>Type: CachePolicy</li> </ul>"},{"location":"api/root.python/#untrackedoptional_5","title":"<code>untracked</code><sup>Optional</sup>","text":"<pre><code>untracked: bool\n</code></pre> <ul> <li>Type: bool</li> </ul>"},{"location":"api/root.python/#whenoptional_6","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>when: WhenStatement\n</code></pre> <ul> <li>Type: WhenStatement</li> </ul>"},{"location":"api/root.python/#cachekey","title":"CacheKey","text":"<ul> <li>Implements: ICacheKey</li> </ul> <p>This class represents the cache:key keyword.</p> <p>Gitlab CI documentation: \"The key keyword defines the affinity of caching between jobs. You can have a single cache for all jobs, cache per-job, cache per-branch, or any other way that fits your workflow.\"</p>"},{"location":"api/root.python/#initializers_2","title":"Initializers","text":"<pre><code>import gcix\ngcix.CacheKey(\nfiles: typing.List[str] = None,\nkey: str = None,\nprefix: str = None\n)\n</code></pre> Name Type Description <code>files</code> <code>typing.List[str]</code> No description. <code>key</code> <code>str</code> No description. <code>prefix</code> <code>str</code> No description."},{"location":"api/root.python/#filesoptional_1","title":"<code>files</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#keyoptional_1","title":"<code>key</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: gcix.PredefinedVariables.ciCommitRefSlug</li> </ul>"},{"location":"api/root.python/#prefixoptional_1","title":"<code>prefix</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#methods_2","title":"Methods","text":"Name Description <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#is_equal_2","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_2","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#render_2","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_26","title":"Properties","text":"Name Type Description <code>files</code> <code>typing.List[str]</code> No description. <code>key</code> <code>str</code> No description. <code>prefix</code> <code>str</code> No description."},{"location":"api/root.python/#filesoptional_2","title":"<code>files</code><sup>Optional</sup>","text":"<pre><code>files: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#keyoptional_2","title":"<code>key</code><sup>Optional</sup>","text":"<pre><code>key: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#prefixoptional_2","title":"<code>prefix</code><sup>Optional</sup>","text":"<pre><code>prefix: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#image","title":"Image","text":"<ul> <li>Implements: IImage, IBase</li> </ul>"},{"location":"api/root.python/#initializers_3","title":"Initializers","text":"<pre><code>import gcix\ngcix.Image(\nname: str,\nentrypoint: typing.List[str] = None,\ntag: str = None\n)\n</code></pre> Name Type Description <code>name</code> <code>str</code> No description. <code>entrypoint</code> <code>typing.List[str]</code> No description. <code>tag</code> <code>str</code> No description."},{"location":"api/root.python/#namerequired_3","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#entrypointoptional_2","title":"<code>entrypoint</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#tagoptional_1","title":"<code>tag</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#methods_3","title":"Methods","text":"Name Description <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>. <code>with_entrypoint</code> No description. <code>with_tag</code> No description."},{"location":"api/root.python/#is_equal_3","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_3","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#render_3","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#with_entrypoint","title":"<code>with_entrypoint</code>","text":"<pre><code>def with_entrypoint(\nentrypoint: typing.List[str]\n) -&gt; Image\n</code></pre>"},{"location":"api/root.python/#entrypointrequired","title":"<code>entrypoint</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#with_tag","title":"<code>with_tag</code>","text":"<pre><code>def with_tag(\ntag: str\n) -&gt; Image\n</code></pre>"},{"location":"api/root.python/#tagrequired","title":"<code>tag</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#properties_27","title":"Properties","text":"Name Type Description <code>name</code> <code>str</code> No description. <code>entrypoint</code> <code>typing.List[str]</code> No description. <code>tag</code> <code>str</code> No description."},{"location":"api/root.python/#namerequired_4","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#entrypointoptional_3","title":"<code>entrypoint</code><sup>Optional</sup>","text":"<pre><code>entrypoint: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#tagoptional_2","title":"<code>tag</code><sup>Optional</sup>","text":"<pre><code>tag: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#include","title":"Include","text":"<ul> <li>Implements: IInclude</li> </ul> <p>This is just an abstract superclass.</p> <p>Please use one of the subclasses:</p> <ul> <li><code>IncludeLocal</code></li> <li><code>IncludeFile</code></li> <li><code>IncludeRemote</code></li> <li><code>IncludeTemplate</code></li> <li><code>IncludeArtifact</code></li> </ul>"},{"location":"api/root.python/#initializers_4","title":"Initializers","text":"<pre><code>import gcix\ngcix.Include()\n</code></pre> Name Type Description"},{"location":"api/root.python/#methods_4","title":"Methods","text":"Name Description <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#is_equal_4","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_4","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#render_4","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_28","title":"Properties","text":"Name Type Description <code>rendered</code> <code>typing.Any</code> No description."},{"location":"api/root.python/#renderedrequired","title":"<code>rendered</code><sup>Required</sup>","text":"<pre><code>rendered: typing.Any\n</code></pre> <ul> <li>Type: typing.Any</li> </ul>"},{"location":"api/root.python/#includeartifact","title":"IncludeArtifact","text":"<ul> <li>Implements: IIncludeArtifact</li> </ul>"},{"location":"api/root.python/#initializers_5","title":"Initializers","text":"<pre><code>import gcix\ngcix.IncludeArtifact(\nartifact: str,\njob: str\n)\n</code></pre> Name Type Description <code>artifact</code> <code>str</code> Relative path to the artifact which is produced by <code>job</code>. <code>job</code> <code>str</code> Job name to include the artifact from."},{"location":"api/root.python/#artifactrequired_2","title":"<code>artifact</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Relative path to the artifact which is produced by <code>job</code>.</p>"},{"location":"api/root.python/#jobrequired_2","title":"<code>job</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Job name to include the artifact from.</p>"},{"location":"api/root.python/#methods_5","title":"Methods","text":"Name Description <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#is_equal_5","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_5","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#render_5","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_29","title":"Properties","text":"Name Type Description <code>rendered</code> <code>typing.Any</code> No description."},{"location":"api/root.python/#renderedrequired_1","title":"<code>rendered</code><sup>Required</sup>","text":"<pre><code>rendered: typing.Any\n</code></pre> <ul> <li>Type: typing.Any</li> </ul>"},{"location":"api/root.python/#includefile","title":"IncludeFile","text":"<ul> <li>Implements: IIncludeFile</li> </ul> <p>This module represents the Gitlab CI include:file keyword.</p>"},{"location":"api/root.python/#initializers_6","title":"Initializers","text":"<pre><code>import gcix\ngcix.IncludeFile(\nfile: str,\nproject: str,\nref: str = None\n)\n</code></pre> Name Type Description <code>file</code> <code>str</code> Relative path to the file to include. <code>project</code> <code>str</code> Project to include the file from. <code>ref</code> <code>str</code> Project branch to include the file from."},{"location":"api/root.python/#filerequired_3","title":"<code>file</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Relative path to the file to include.</p>"},{"location":"api/root.python/#projectrequired_2","title":"<code>project</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Project to include the file from.</p>"},{"location":"api/root.python/#refoptional_3","title":"<code>ref</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Project branch to include the file from.</p>"},{"location":"api/root.python/#methods_6","title":"Methods","text":"Name Description <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#is_equal_6","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_6","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#render_6","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_30","title":"Properties","text":"Name Type Description <code>rendered</code> <code>typing.Any</code> No description."},{"location":"api/root.python/#renderedrequired_2","title":"<code>rendered</code><sup>Required</sup>","text":"<pre><code>rendered: typing.Any\n</code></pre> <ul> <li>Type: typing.Any</li> </ul>"},{"location":"api/root.python/#includelocal","title":"IncludeLocal","text":"<ul> <li>Implements: IIncludeLocal</li> </ul> <p>This module represents the Gitlab CI include:local keyword.</p>"},{"location":"api/root.python/#initializers_7","title":"Initializers","text":"<pre><code>import gcix\ngcix.IncludeLocal(\nlocal: str\n)\n</code></pre> Name Type Description <code>local</code> <code>str</code> Relative path to the file within this repository to include."},{"location":"api/root.python/#localrequired_2","title":"<code>local</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Relative path to the file within this repository to include.</p>"},{"location":"api/root.python/#methods_7","title":"Methods","text":"Name Description <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#is_equal_7","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_7","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#render_7","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_31","title":"Properties","text":"Name Type Description <code>rendered</code> <code>typing.Any</code> No description."},{"location":"api/root.python/#renderedrequired_3","title":"<code>rendered</code><sup>Required</sup>","text":"<pre><code>rendered: typing.Any\n</code></pre> <ul> <li>Type: typing.Any</li> </ul>"},{"location":"api/root.python/#includeremote","title":"IncludeRemote","text":"<ul> <li>Implements: IIncludeRemote</li> </ul>"},{"location":"api/root.python/#initializers_8","title":"Initializers","text":"<pre><code>import gcix\ngcix.IncludeRemote(\nremote: str\n)\n</code></pre> Name Type Description <code>remote</code> <code>str</code> URL to include the file from."},{"location":"api/root.python/#remoterequired_2","title":"<code>remote</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>URL to include the file from.</p>"},{"location":"api/root.python/#methods_8","title":"Methods","text":"Name Description <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#is_equal_8","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_8","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#render_8","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_32","title":"Properties","text":"Name Type Description <code>rendered</code> <code>typing.Any</code> No description."},{"location":"api/root.python/#renderedrequired_4","title":"<code>rendered</code><sup>Required</sup>","text":"<pre><code>rendered: typing.Any\n</code></pre> <ul> <li>Type: typing.Any</li> </ul>"},{"location":"api/root.python/#includetemplate","title":"IncludeTemplate","text":"<ul> <li>Implements: IIncludeTemplate</li> </ul>"},{"location":"api/root.python/#initializers_9","title":"Initializers","text":"<pre><code>import gcix\ngcix.IncludeTemplate(\ntemplate: str\n)\n</code></pre> Name Type Description <code>template</code> <code>str</code> Gitlab template pipeline to include."},{"location":"api/root.python/#templaterequired_2","title":"<code>template</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Gitlab template pipeline to include.</p>"},{"location":"api/root.python/#methods_9","title":"Methods","text":"Name Description <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#is_equal_9","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_9","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#render_9","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_33","title":"Properties","text":"Name Type Description <code>rendered</code> <code>typing.Any</code> No description."},{"location":"api/root.python/#renderedrequired_5","title":"<code>rendered</code><sup>Required</sup>","text":"<pre><code>rendered: typing.Any\n</code></pre> <ul> <li>Type: typing.Any</li> </ul>"},{"location":"api/root.python/#job","title":"Job","text":"<ul> <li>Implements: IJob</li> </ul> <p>This class represents the Gitlab CI Job.</p>"},{"location":"api/root.python/#initializers_10","title":"Initializers","text":"<pre><code>import gcix\ngcix.Job(\nscripts: typing.List[str],\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]] = None,\nartifacts: Artifacts = None,\ncache: Cache = None,\ndependencies: typing.List[typing.Union[Job, JobCollection]] = None,\nimage: typing.Union[str, Image] = None,\nname: str = None,\nneeds: typing.List[typing.Union[Job, JobCollection, Need]] = None,\nrules: typing.List[Rule] = None,\nstage: str = None,\ntags: typing.List[str] = None,\nvariables: typing.Mapping[str] = None\n)\n</code></pre> Name Type Description <code>scripts</code> <code>typing.List[str]</code> No description. <code>allow_failure</code> <code>typing.Union[bool, typing.List[typing.Union[int, float]]]</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[Job, JobCollection]]</code> No description. <code>image</code> <code>typing.Union[str, Image]</code> No description. <code>name</code> <code>str</code> No description. <code>needs</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>rules</code> <code>typing.List[Rule]</code> No description. <code>stage</code> <code>str</code> No description. <code>tags</code> <code>typing.List[str]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description."},{"location":"api/root.python/#scriptsrequired_1","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#allow_failureoptional_2","title":"<code>allow_failure</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#artifactsoptional_2","title":"<code>artifacts</code><sup>Optional</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#cacheoptional_1","title":"<code>cache</code><sup>Optional</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#dependenciesoptional_1","title":"<code>dependencies</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection]]</li> </ul>"},{"location":"api/root.python/#imageoptional_1","title":"<code>image</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#nameoptional_7","title":"<code>name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#needsoptional_1","title":"<code>needs</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#rulesoptional_1","title":"<code>rules</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#stageoptional_4","title":"<code>stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#tagsoptional_1","title":"<code>tags</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#variablesoptional_2","title":"<code>variables</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#methods_10","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#add_dependencies","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#dependenciesrequired","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_needs","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#needsrequired","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_parent","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/root.python/#parentrequired","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[Job, JobCollection]</li> </ul>"},{"location":"api/root.python/#add_tags","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#tagsrequired","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#add_variables","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#variablesrequired","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#append_rules","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#rulesrequired","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#append_scripts","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_2","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#assign_allow_failure","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#allow_failurerequired","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#assign_artifacts","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#artifactsrequired","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#assign_cache","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#cacherequired","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#assign_dependencies","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#dependenciesrequired_1","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#assign_image","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/root.python/#imagerequired","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#assign_needs","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#needsrequired_1","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#assign_tags","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#tagsrequired_1","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#copy","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/root.python/#extend_name","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/root.python/#namerequired_5","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#extend_stage","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/root.python/#stagerequired","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#extend_stage_value","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/root.python/#stagerequired_1","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#get_all_instance_names","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/root.python/#childoptional","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[Job, JobCollection]</li> </ul>"},{"location":"api/root.python/#is_equal_10","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_10","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#prepend_rules","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#rulesrequired_1","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#prepend_scripts","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_3","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#render_10","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_34","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[Job, JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>image</code> <code>Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>original</code> <code>Job</code> No description. <code>rules</code> <code>typing.List[Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description."},{"location":"api/root.python/#tagsrequired_2","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/root.python/#allow_failurerequired_1","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#namerequired_6","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#ordered_tagsrequired","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#parentsrequired","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection]]</li> </ul>"},{"location":"api/root.python/#scriptsrequired_4","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#stagerequired_2","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#artifactsoptional_3","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#cacheoptional_2","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#dependenciesoptional_2","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#imageoptional_2","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: Image</li> </ul>"},{"location":"api/root.python/#needsoptional_2","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#originaloptional","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: Job</li> </ul>"},{"location":"api/root.python/#rulesoptional_2","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#variablesoptional_3","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#jobcollection","title":"JobCollection","text":"<ul> <li>Implements: IJobCollection</li> </ul> <p>A JobCollection collects multiple <code>gcix.Job</code>s and/or other <code>gcix.JobCollection</code>s into a group.</p>"},{"location":"api/root.python/#initializers_11","title":"Initializers","text":"<pre><code>import gcix\ngcix.JobCollection()\n</code></pre> Name Type Description"},{"location":"api/root.python/#methods_11","title":"Methods","text":"Name Description <code>add_children</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> No description. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>get_all_instance_names</code> Return all instance names from the given child. <code>initialize_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initialize_artifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initialize_cache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initialize_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initialize_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initialize_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initialize_rules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initialize_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initialize_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>override_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>override_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>override_rules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>override_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>override_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#add_children","title":"<code>add_children</code>","text":"<pre><code>def add_children(\njobs_or_job_collections: typing.List[typing.Union[Job, JobCollection]],\nname: str = None,\nstage: str = None\n) -&gt; JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/root.python/#jobs_or_job_collectionsrequired_1","title":"<code>jobs_or_job_collections</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection]]</li> </ul>"},{"location":"api/root.python/#nameoptional_8","title":"<code>name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#stageoptional_5","title":"<code>stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#add_dependencies_1","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#dependenciesrequired_2","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_needs_1","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#needsrequired_2","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_parent_1","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: JobCollection\n) -&gt; None\n</code></pre>"},{"location":"api/root.python/#parentrequired_1","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: JobCollection</li> </ul>"},{"location":"api/root.python/#add_tags_1","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#tagsrequired_3","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#add_variables_1","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#variablesrequired_1","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#append_rules_1","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#rulesrequired_2","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#append_scripts_1","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_5","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#assign_artifacts_1","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#artifactsrequired_1","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#assign_cache_1","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#cacherequired_1","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#get_all_instance_names_1","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/root.python/#childoptional_1","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[Job, JobCollection]</li> </ul>"},{"location":"api/root.python/#initialize_allow_failure","title":"<code>initialize_allow_failure</code>","text":"<pre><code>def initialize_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/root.python/#allow_failurerequired_2","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#initialize_artifacts","title":"<code>initialize_artifacts</code>","text":"<pre><code>def initialize_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/root.python/#artifactsrequired_2","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#initialize_cache","title":"<code>initialize_cache</code>","text":"<pre><code>def initialize_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/root.python/#cacherequired_2","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#initialize_dependencies","title":"<code>initialize_dependencies</code>","text":"<pre><code>def initialize_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/root.python/#dependenciesrequired_3","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#initialize_image","title":"<code>initialize_image</code>","text":"<pre><code>def initialize_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/root.python/#imagerequired_1","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#initialize_needs","title":"<code>initialize_needs</code>","text":"<pre><code>def initialize_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/root.python/#needsrequired_3","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#initialize_rules","title":"<code>initialize_rules</code>","text":"<pre><code>def initialize_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/root.python/#rulesrequired_3","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#initialize_tags","title":"<code>initialize_tags</code>","text":"<pre><code>def initialize_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/root.python/#tagsrequired_4","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#initialize_variables","title":"<code>initialize_variables</code>","text":"<pre><code>def initialize_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/root.python/#variablesrequired_2","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#is_equal_11","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_11","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#override_allow_failure","title":"<code>override_allow_failure</code>","text":"<pre><code>def override_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/root.python/#allow_failurerequired_3","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#override_dependencies","title":"<code>override_dependencies</code>","text":"<pre><code>def override_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/root.python/#dependenciesrequired_4","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#override_image","title":"<code>override_image</code>","text":"<pre><code>def override_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/root.python/#imagerequired_2","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#override_needs","title":"<code>override_needs</code>","text":"<pre><code>def override_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/root.python/#needsrequired_4","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#override_rules","title":"<code>override_rules</code>","text":"<pre><code>def override_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/root.python/#rulesrequired_4","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#override_tags","title":"<code>override_tags</code>","text":"<pre><code>def override_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/root.python/#tagsrequired_5","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#override_variables","title":"<code>override_variables</code>","text":"<pre><code>def override_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/root.python/#variablesrequired_3","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#prepend_rules_1","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#rulesrequired_5","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#prepend_scripts_1","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_6","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#render_11","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_35","title":"Properties","text":"Name Type Description <code>last_jobs_executed</code> <code>typing.List[Job]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nested_jobs</code> <code>typing.List[Job]</code> No description. <code>populated_jobs</code> <code>typing.List[Job]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>typing.List[ChildDict]</code> No description. <code>ordered_tags</code> <code>OrderedStringSet</code> No description. <code>ordered_tags_for_initialization</code> <code>OrderedStringSet</code> No description. <code>ordered_tags_for_replacement</code> <code>OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[Job, JobCollection]]</code> No description. <code>allow_failure_for_initialization</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>allow_failure_for_replacement</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>artifacts_for_initialization</code> <code>Artifacts</code> No description. <code>artifacts_for_replacement</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>cache_for_initialization</code> <code>Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>dependencies_for_initialization</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>dependencies_for_replacement</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>image_for_initialization</code> <code>typing.Union[str, Image]</code> No description. <code>image_for_replacement</code> <code>typing.Union[str, Image]</code> No description. <code>needs</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>needs_for_initialization</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>needs_for_replacement</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>rules_for_initialization</code> <code>typing.List[Rule]</code> No description. <code>rules_for_replacement</code> <code>typing.List[Rule]</code> No description. <code>rules_to_append</code> <code>typing.List[Rule]</code> No description. <code>rules_to_prepend</code> <code>typing.List[Rule]</code> No description. <code>scripts_to_append</code> <code>typing.List[str]</code> No description. <code>scripts_to_prepend</code> <code>typing.List[str]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_initialization</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_replacement</code> <code>typing.Mapping[str]</code> No description."},{"location":"api/root.python/#last_jobs_executedrequired","title":"<code>last_jobs_executed</code><sup>Required</sup>","text":"<pre><code>last_jobs_executed: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[Job]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/root.python/#nested_jobsrequired","title":"<code>nested_jobs</code><sup>Required</sup>","text":"<pre><code>nested_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[Job]</li> </ul>"},{"location":"api/root.python/#populated_jobsrequired","title":"<code>populated_jobs</code><sup>Required</sup>","text":"<pre><code>populated_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[Job]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/root.python/#childrenrequired","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>children: typing.List[ChildDict]\n</code></pre> <ul> <li>Type: typing.List[ChildDict]</li> </ul>"},{"location":"api/root.python/#ordered_tagsrequired_1","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#ordered_tags_for_initializationrequired","title":"<code>ordered_tags_for_initialization</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_initialization: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#ordered_tags_for_replacementrequired","title":"<code>ordered_tags_for_replacement</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_replacement: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#parentsrequired_1","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection]]</li> </ul>"},{"location":"api/root.python/#allow_failure_for_initializationoptional","title":"<code>allow_failure_for_initialization</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_initialization: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#allow_failure_for_replacementoptional","title":"<code>allow_failure_for_replacement</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_replacement: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#artifactsoptional_4","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#artifacts_for_initializationoptional","title":"<code>artifacts_for_initialization</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_initialization: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#artifacts_for_replacementoptional","title":"<code>artifacts_for_replacement</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_replacement: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#cacheoptional_3","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#cache_for_initializationoptional","title":"<code>cache_for_initialization</code><sup>Optional</sup>","text":"<pre><code>cache_for_initialization: Cache\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#dependenciesoptional_3","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#dependencies_for_initializationoptional","title":"<code>dependencies_for_initialization</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#dependencies_for_replacementoptional","title":"<code>dependencies_for_replacement</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#image_for_initializationoptional","title":"<code>image_for_initialization</code><sup>Optional</sup>","text":"<pre><code>image_for_initialization: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#image_for_replacementoptional","title":"<code>image_for_replacement</code><sup>Optional</sup>","text":"<pre><code>image_for_replacement: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#needsoptional_3","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#needs_for_initializationoptional","title":"<code>needs_for_initialization</code><sup>Optional</sup>","text":"<pre><code>needs_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#needs_for_replacementoptional","title":"<code>needs_for_replacement</code><sup>Optional</sup>","text":"<pre><code>needs_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#rules_for_initializationoptional","title":"<code>rules_for_initialization</code><sup>Optional</sup>","text":"<pre><code>rules_for_initialization: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#rules_for_replacementoptional","title":"<code>rules_for_replacement</code><sup>Optional</sup>","text":"<pre><code>rules_for_replacement: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#rules_to_appendoptional","title":"<code>rules_to_append</code><sup>Optional</sup>","text":"<pre><code>rules_to_append: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#rules_to_prependoptional","title":"<code>rules_to_prepend</code><sup>Optional</sup>","text":"<pre><code>rules_to_prepend: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#scripts_to_appendoptional","title":"<code>scripts_to_append</code><sup>Optional</sup>","text":"<pre><code>scripts_to_append: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#scripts_to_prependoptional","title":"<code>scripts_to_prepend</code><sup>Optional</sup>","text":"<pre><code>scripts_to_prepend: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#variablesoptional_4","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#variables_for_initializationoptional","title":"<code>variables_for_initialization</code><sup>Optional</sup>","text":"<pre><code>variables_for_initialization: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#variables_for_replacementoptional","title":"<code>variables_for_replacement</code><sup>Optional</sup>","text":"<pre><code>variables_for_replacement: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#need","title":"Need","text":"<ul> <li>Implements: INeed</li> </ul> <p>This class represents the Gitlab CI needs keyword. The <code>needs</code> key-word adds a possibility to allow out-of-order Gitlab CI jobs. A job which needed another job runs directly after the other job as finished successfully.</p>"},{"location":"api/root.python/#initializers_12","title":"Initializers","text":"<pre><code>import gcix\ngcix.Need(\nartifacts: bool = None,\njob: str = None,\npipeline: str = None,\nproject: str = None,\nref: str = None\n)\n</code></pre> Name Type Description <code>artifacts</code> <code>bool</code> No description. <code>job</code> <code>str</code> No description. <code>pipeline</code> <code>str</code> No description. <code>project</code> <code>str</code> No description. <code>ref</code> <code>str</code> No description."},{"location":"api/root.python/#artifactsoptional_5","title":"<code>artifacts</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: true</li> </ul>"},{"location":"api/root.python/#joboptional_1","title":"<code>job</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: undefined but requires <code>pipeline</code> to be set.</li> </ul>"},{"location":"api/root.python/#pipelineoptional_1","title":"<code>pipeline</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: undefined which requires <code>job</code> to be set.</li> </ul>"},{"location":"api/root.python/#projectoptional_2","title":"<code>project</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: undefined</li> </ul>"},{"location":"api/root.python/#refoptional_4","title":"<code>ref</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> <li>Default: undefined</li> </ul>"},{"location":"api/root.python/#methods_12","title":"Methods","text":"Name Description <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#is_equal_12","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_12","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#render_12","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_36","title":"Properties","text":"Name Type Description <code>artifacts</code> <code>bool</code> No description. <code>job</code> <code>str</code> No description. <code>pipeline</code> <code>str</code> No description. <code>project</code> <code>str</code> No description. <code>ref</code> <code>str</code> No description."},{"location":"api/root.python/#artifactsoptional_6","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: bool\n</code></pre> <ul> <li>Type: bool</li> </ul>"},{"location":"api/root.python/#joboptional_2","title":"<code>job</code><sup>Optional</sup>","text":"<pre><code>job: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#pipelineoptional_2","title":"<code>pipeline</code><sup>Optional</sup>","text":"<pre><code>pipeline: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#projectoptional_3","title":"<code>project</code><sup>Optional</sup>","text":"<pre><code>project: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#refoptional_5","title":"<code>ref</code><sup>Optional</sup>","text":"<pre><code>ref: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#orderedstringset","title":"OrderedStringSet","text":"<p>Represents an ordered set of strings.</p>"},{"location":"api/root.python/#initializers_13","title":"Initializers","text":"<pre><code>import gcix\ngcix.OrderedStringSet(\nvalues: typing.List[str] = None\n)\n</code></pre> Name Type Description <code>values</code> <code>typing.List[str]</code> An optional array of values to initialize the set."},{"location":"api/root.python/#valuesoptional","title":"<code>values</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul> <p>An optional array of values to initialize the set.</p>"},{"location":"api/root.python/#methods_13","title":"Methods","text":"Name Description <code>add</code> Adds a value or an array of values to the set. <code>clear</code> Clears the set, removing all values. <code>delete</code> Deletes a value from the set. <code>has</code> Checks if the set contains a specific value."},{"location":"api/root.python/#add","title":"<code>add</code>","text":"<pre><code>def add(\nvalue: typing.Union[str, typing.List[str]]\n) -&gt; None\n</code></pre> <p>Adds a value or an array of values to the set.</p>"},{"location":"api/root.python/#valuerequired","title":"<code>value</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, typing.List[str]]</li> </ul> <p>The value(s) to add.</p>"},{"location":"api/root.python/#clear","title":"<code>clear</code>","text":"<pre><code>def clear() -&gt; None\n</code></pre> <p>Clears the set, removing all values.</p>"},{"location":"api/root.python/#delete","title":"<code>delete</code>","text":"<pre><code>def delete(\nvalue: str\n) -&gt; None\n</code></pre> <p>Deletes a value from the set.</p>"},{"location":"api/root.python/#valuerequired_1","title":"<code>value</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The value to delete.</p>"},{"location":"api/root.python/#has","title":"<code>has</code>","text":"<pre><code>def has(\nvalue: str\n) -&gt; bool\n</code></pre> <p>Checks if the set contains a specific value.</p>"},{"location":"api/root.python/#valuerequired_2","title":"<code>value</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The value to check.</p>"},{"location":"api/root.python/#properties_37","title":"Properties","text":"Name Type Description <code>size</code> <code>typing.Union[int, float]</code> Returns the number of values in the set. <code>values</code> <code>typing.List[str]</code> Returns an array of values in the set."},{"location":"api/root.python/#sizerequired","title":"<code>size</code><sup>Required</sup>","text":"<pre><code>size: typing.Union[int, float]\n</code></pre> <ul> <li>Type: typing.Union[int, float]</li> </ul> <p>Returns the number of values in the set.</p>"},{"location":"api/root.python/#valuesrequired","title":"<code>values</code><sup>Required</sup>","text":"<pre><code>values: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Returns an array of values in the set.</p>"},{"location":"api/root.python/#pagesjob","title":"PagesJob","text":"<ul> <li>Implements: IPagesJob</li> </ul> <p>This is a special kind of jobs which deploys Gitlab Pages.</p> <p>This job has the static name <code>pages</code> and the static artifacts path <code>./public</code>. Both preconfigurations can't be altered and are required for deploying Gitlab Pages properly. All methods which would typically alter the name, stage and artifacts of a job are overwritten with an empty implementation.</p> <p>This job is only for deploying Gitlab Pages artifacts within the <code>./public</code> artifacts path. To create the artifacts you have to run jobs, that generate those artifacts within the same <code>./public</code> artifacts path, before this PagesJob in the pipeline.</p> <p>Because the name of the job can't be altered, this job may only exist once in the generated pipeline output. Typically you should add the PagesJob to the <code>gcix.Pipeline</code>.</p> <p>The PagesJob is also preconfigured with the stage <code>pages</code> and the image <code>alpine:latest</code>. To change the stage of this job, use the <code>assignStage()</code> method. Please mention to run this job in a stage after all jobs, that fill the <code>public</code> artifacts path with content.</p> <p>Here a simple example how to use the GitlabPages job:</p> <pre><code># Example automatically generated from non-compiling source. May contain errors.\npipeline = Pipeline()\npipeline.add_children(\nnew=Job(stage=\"deploy\", scripts=[\"./create-html.sh\"]).assing_artifacts(Artifacts(paths=[\"public\"]))\n) ,\nPagesJob() ,\n</code></pre>"},{"location":"api/root.python/#initializers_14","title":"Initializers","text":"<pre><code>import gcix\ngcix.PagesJob()\n</code></pre> Name Type Description"},{"location":"api/root.python/#methods_14","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>. <code>assign_stage</code> Set the name of this jobs stage to a value other than <code>pages</code>."},{"location":"api/root.python/#add_dependencies_2","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#dependenciesrequired_5","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_needs_2","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#needsrequired_5","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_parent_2","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/root.python/#parentrequired_2","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[Job, JobCollection]</li> </ul>"},{"location":"api/root.python/#add_tags_2","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#tagsrequired_6","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#add_variables_2","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#variablesrequired_4","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#append_rules_2","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#rulesrequired_6","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#append_scripts_2","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_7","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#assign_allow_failure_1","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#allow_failurerequired_4","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#assign_artifacts_2","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#artifactsrequired_3","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#assign_cache_2","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#cacherequired_3","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#assign_dependencies_1","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#dependenciesrequired_6","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#assign_image_1","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/root.python/#imagerequired_3","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#assign_needs_1","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#needsrequired_6","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#assign_tags_1","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#tagsrequired_7","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#copy_1","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/root.python/#extend_name_1","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/root.python/#namerequired_7","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#extend_stage_1","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/root.python/#namerequired_8","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#extend_stage_value_1","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/root.python/#namerequired_9","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#get_all_instance_names_2","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/root.python/#childoptional_2","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[Job, JobCollection]</li> </ul>"},{"location":"api/root.python/#is_equal_13","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_13","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#prepend_rules_2","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#rulesrequired_7","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#prepend_scripts_2","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_8","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#render_13","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#assign_stage","title":"<code>assign_stage</code>","text":"<pre><code>def assign_stage(\nstage: str\n) -&gt; PagesJob\n</code></pre> <p>Set the name of this jobs stage to a value other than <code>pages</code>.</p>"},{"location":"api/root.python/#stagerequired_3","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#properties_38","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[Job, JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>image</code> <code>Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>original</code> <code>Job</code> No description. <code>rules</code> <code>typing.List[Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description."},{"location":"api/root.python/#tagsrequired_8","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/root.python/#allow_failurerequired_5","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#namerequired_10","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#ordered_tagsrequired_2","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#parentsrequired_2","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection]]</li> </ul>"},{"location":"api/root.python/#scriptsrequired_9","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#stagerequired_4","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#artifactsoptional_7","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#cacheoptional_4","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#dependenciesoptional_4","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#imageoptional_3","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: Image</li> </ul>"},{"location":"api/root.python/#needsoptional_4","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#originaloptional_1","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: Job</li> </ul>"},{"location":"api/root.python/#rulesoptional_3","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#variablesoptional_5","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#pipeline","title":"Pipeline","text":"<ul> <li>Implements: IPipeline</li> </ul>"},{"location":"api/root.python/#initializers_15","title":"Initializers","text":"<pre><code>import gcix\ngcix.Pipeline(\nincludes: typing.List[Include] = None\n)\n</code></pre> Name Type Description <code>includes</code> <code>typing.List[Include]</code> You can add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\"."},{"location":"api/root.python/#includesoptional_2","title":"<code>includes</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[Include]</li> </ul> <p>You can add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\".</p>"},{"location":"api/root.python/#methods_15","title":"Methods","text":"Name Description <code>add_children</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> No description. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>get_all_instance_names</code> Return all instance names from the given child. <code>initialize_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initialize_artifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initialize_cache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initialize_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initialize_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initialize_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initialize_rules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initialize_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initialize_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>override_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>override_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>override_rules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>override_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>override_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>. <code>add_include</code> Let you add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\". <code>add_services</code> Add one or more <code>gcix.Service</code>s to the pipeline. <code>write_yaml</code> Create the Gitlab CI YAML file from this pipeline object."},{"location":"api/root.python/#add_children_1","title":"<code>add_children</code>","text":"<pre><code>def add_children(\njobs_or_job_collections: typing.List[typing.Union[Job, JobCollection]],\nname: str = None,\nstage: str = None\n) -&gt; JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/root.python/#jobs_or_job_collectionsrequired_2","title":"<code>jobs_or_job_collections</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection]]</li> </ul>"},{"location":"api/root.python/#nameoptional_9","title":"<code>name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#stageoptional_6","title":"<code>stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#add_dependencies_3","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#dependenciesrequired_7","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_needs_3","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#needsrequired_7","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_parent_3","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: JobCollection\n) -&gt; None\n</code></pre>"},{"location":"api/root.python/#parentrequired_3","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: JobCollection</li> </ul>"},{"location":"api/root.python/#add_tags_3","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#tagsrequired_9","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#add_variables_3","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#variablesrequired_5","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#append_rules_3","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#rulesrequired_8","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#append_scripts_3","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_10","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#assign_artifacts_3","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#artifactsrequired_4","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#assign_cache_3","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#cacherequired_4","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#get_all_instance_names_3","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/root.python/#childoptional_3","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[Job, JobCollection]</li> </ul>"},{"location":"api/root.python/#initialize_allow_failure_1","title":"<code>initialize_allow_failure</code>","text":"<pre><code>def initialize_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/root.python/#allow_failurerequired_6","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#initialize_artifacts_1","title":"<code>initialize_artifacts</code>","text":"<pre><code>def initialize_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/root.python/#artifactsrequired_5","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#initialize_cache_1","title":"<code>initialize_cache</code>","text":"<pre><code>def initialize_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/root.python/#cacherequired_5","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#initialize_dependencies_1","title":"<code>initialize_dependencies</code>","text":"<pre><code>def initialize_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/root.python/#dependenciesrequired_8","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#initialize_image_1","title":"<code>initialize_image</code>","text":"<pre><code>def initialize_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/root.python/#imagerequired_4","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#initialize_needs_1","title":"<code>initialize_needs</code>","text":"<pre><code>def initialize_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/root.python/#needsrequired_8","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#initialize_rules_1","title":"<code>initialize_rules</code>","text":"<pre><code>def initialize_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/root.python/#rulesrequired_9","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#initialize_tags_1","title":"<code>initialize_tags</code>","text":"<pre><code>def initialize_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/root.python/#tagsrequired_10","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#initialize_variables_1","title":"<code>initialize_variables</code>","text":"<pre><code>def initialize_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/root.python/#variablesrequired_6","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#is_equal_14","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_14","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#override_allow_failure_1","title":"<code>override_allow_failure</code>","text":"<pre><code>def override_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/root.python/#allow_failurerequired_7","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#override_dependencies_1","title":"<code>override_dependencies</code>","text":"<pre><code>def override_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/root.python/#dependenciesrequired_9","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#override_image_1","title":"<code>override_image</code>","text":"<pre><code>def override_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/root.python/#imagerequired_5","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#override_needs_1","title":"<code>override_needs</code>","text":"<pre><code>def override_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/root.python/#needsrequired_9","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#override_rules_1","title":"<code>override_rules</code>","text":"<pre><code>def override_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/root.python/#rulesrequired_10","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#override_tags_1","title":"<code>override_tags</code>","text":"<pre><code>def override_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/root.python/#tagsrequired_11","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#override_variables_1","title":"<code>override_variables</code>","text":"<pre><code>def override_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/root.python/#variablesrequired_7","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#prepend_rules_3","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#rulesrequired_11","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#prepend_scripts_3","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_11","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#render_14","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#add_include","title":"<code>add_include</code>","text":"<pre><code>def add_include(\ninclude: Include\n) -&gt; Pipeline\n</code></pre> <p>Let you add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\".</p>"},{"location":"api/root.python/#includerequired","title":"<code>include</code><sup>Required</sup>","text":"<ul> <li>Type: Include</li> </ul>"},{"location":"api/root.python/#add_services","title":"<code>add_services</code>","text":"<pre><code>def add_services(\nservices: typing.List[Service]\n) -&gt; Pipeline\n</code></pre> <p>Add one or more <code>gcix.Service</code>s to the pipeline.</p> <p>Gitlab CI Documentation: \"The services keyword defines a Docker image that runs during a job linked to the Docker image that the image keyword defines.\"</p>"},{"location":"api/root.python/#servicesrequired","title":"<code>services</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Service]</li> </ul>"},{"location":"api/root.python/#write_yaml","title":"<code>write_yaml</code>","text":"<pre><code>def write_yaml(\nfilename: str = None\n) -&gt; None\n</code></pre> <p>Create the Gitlab CI YAML file from this pipeline object.</p> <p>Use that YAML file to trigger a child pipeline.</p>"},{"location":"api/root.python/#filenameoptional","title":"<code>filename</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#properties_39","title":"Properties","text":"Name Type Description <code>last_jobs_executed</code> <code>typing.List[Job]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nested_jobs</code> <code>typing.List[Job]</code> No description. <code>populated_jobs</code> <code>typing.List[Job]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>typing.List[ChildDict]</code> No description. <code>ordered_tags</code> <code>OrderedStringSet</code> No description. <code>ordered_tags_for_initialization</code> <code>OrderedStringSet</code> No description. <code>ordered_tags_for_replacement</code> <code>OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[Job, JobCollection]]</code> No description. <code>allow_failure_for_initialization</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>allow_failure_for_replacement</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>artifacts_for_initialization</code> <code>Artifacts</code> No description. <code>artifacts_for_replacement</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>cache_for_initialization</code> <code>Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>dependencies_for_initialization</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>dependencies_for_replacement</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>image_for_initialization</code> <code>typing.Union[str, Image]</code> No description. <code>image_for_replacement</code> <code>typing.Union[str, Image]</code> No description. <code>needs</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>needs_for_initialization</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>needs_for_replacement</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>rules_for_initialization</code> <code>typing.List[Rule]</code> No description. <code>rules_for_replacement</code> <code>typing.List[Rule]</code> No description. <code>rules_to_append</code> <code>typing.List[Rule]</code> No description. <code>rules_to_prepend</code> <code>typing.List[Rule]</code> No description. <code>scripts_to_append</code> <code>typing.List[str]</code> No description. <code>scripts_to_prepend</code> <code>typing.List[str]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_initialization</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_replacement</code> <code>typing.Mapping[str]</code> No description. <code>includes</code> <code>typing.List[Include]</code> No description. <code>service</code> <code>typing.List[Service]</code> No description."},{"location":"api/root.python/#last_jobs_executedrequired_1","title":"<code>last_jobs_executed</code><sup>Required</sup>","text":"<pre><code>last_jobs_executed: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[Job]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/root.python/#nested_jobsrequired_1","title":"<code>nested_jobs</code><sup>Required</sup>","text":"<pre><code>nested_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[Job]</li> </ul>"},{"location":"api/root.python/#populated_jobsrequired_1","title":"<code>populated_jobs</code><sup>Required</sup>","text":"<pre><code>populated_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[Job]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/root.python/#childrenrequired_1","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>children: typing.List[ChildDict]\n</code></pre> <ul> <li>Type: typing.List[ChildDict]</li> </ul>"},{"location":"api/root.python/#ordered_tagsrequired_3","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#ordered_tags_for_initializationrequired_1","title":"<code>ordered_tags_for_initialization</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_initialization: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#ordered_tags_for_replacementrequired_1","title":"<code>ordered_tags_for_replacement</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_replacement: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#parentsrequired_3","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection]]</li> </ul>"},{"location":"api/root.python/#allow_failure_for_initializationoptional_1","title":"<code>allow_failure_for_initialization</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_initialization: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#allow_failure_for_replacementoptional_1","title":"<code>allow_failure_for_replacement</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_replacement: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#artifactsoptional_8","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#artifacts_for_initializationoptional_1","title":"<code>artifacts_for_initialization</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_initialization: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#artifacts_for_replacementoptional_1","title":"<code>artifacts_for_replacement</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_replacement: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#cacheoptional_5","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#cache_for_initializationoptional_1","title":"<code>cache_for_initialization</code><sup>Optional</sup>","text":"<pre><code>cache_for_initialization: Cache\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#dependenciesoptional_5","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#dependencies_for_initializationoptional_1","title":"<code>dependencies_for_initialization</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#dependencies_for_replacementoptional_1","title":"<code>dependencies_for_replacement</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#image_for_initializationoptional_1","title":"<code>image_for_initialization</code><sup>Optional</sup>","text":"<pre><code>image_for_initialization: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#image_for_replacementoptional_1","title":"<code>image_for_replacement</code><sup>Optional</sup>","text":"<pre><code>image_for_replacement: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#needsoptional_5","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#needs_for_initializationoptional_1","title":"<code>needs_for_initialization</code><sup>Optional</sup>","text":"<pre><code>needs_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#needs_for_replacementoptional_1","title":"<code>needs_for_replacement</code><sup>Optional</sup>","text":"<pre><code>needs_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#rules_for_initializationoptional_1","title":"<code>rules_for_initialization</code><sup>Optional</sup>","text":"<pre><code>rules_for_initialization: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#rules_for_replacementoptional_1","title":"<code>rules_for_replacement</code><sup>Optional</sup>","text":"<pre><code>rules_for_replacement: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#rules_to_appendoptional_1","title":"<code>rules_to_append</code><sup>Optional</sup>","text":"<pre><code>rules_to_append: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#rules_to_prependoptional_1","title":"<code>rules_to_prepend</code><sup>Optional</sup>","text":"<pre><code>rules_to_prepend: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#scripts_to_appendoptional_1","title":"<code>scripts_to_append</code><sup>Optional</sup>","text":"<pre><code>scripts_to_append: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#scripts_to_prependoptional_1","title":"<code>scripts_to_prepend</code><sup>Optional</sup>","text":"<pre><code>scripts_to_prepend: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#variablesoptional_6","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#variables_for_initializationoptional_1","title":"<code>variables_for_initialization</code><sup>Optional</sup>","text":"<pre><code>variables_for_initialization: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#variables_for_replacementoptional_1","title":"<code>variables_for_replacement</code><sup>Optional</sup>","text":"<pre><code>variables_for_replacement: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#includesrequired","title":"<code>includes</code><sup>Required</sup>","text":"<pre><code>includes: typing.List[Include]\n</code></pre> <ul> <li>Type: typing.List[Include]</li> </ul>"},{"location":"api/root.python/#servicerequired","title":"<code>service</code><sup>Required</sup>","text":"<pre><code>service: typing.List[Service]\n</code></pre> <ul> <li>Type: typing.List[Service]</li> </ul>"},{"location":"api/root.python/#predefinedvariables","title":"PredefinedVariables","text":"<p>This class contains constants for Gitlab CI predefined variables.</p>"},{"location":"api/root.python/#initializers_16","title":"Initializers","text":"<pre><code>import gcix\ngcix.PredefinedVariables()\n</code></pre> Name Type Description"},{"location":"api/root.python/#properties_40","title":"Properties","text":"Name Type Description <code>chat_channel</code> <code>str</code> Source chat channel which triggered the ChatOps command. <code>chat_input</code> <code>str</code> Additional arguments passed in the ChatOps command. <code>ci</code> <code>str</code> Mark that job is executed in CI environment. <code>ci_api_v4_url</code> <code>str</code> The GitLab API v4 root URL. <code>ci_builds_dir</code> <code>str</code> Top-level directory where builds are executed. <code>ci_commit_before_sha</code> <code>str</code> The previous latest commit present on a branch. Is always 0000000000000000000000000000000000000000 in pipelines for merge requests. <code>ci_commit_description</code> <code>str</code> The description of the commit the message without first line, if the title is shorter than 100 characters; <code>ci_commit_message</code> <code>str</code> The full commit message. <code>ci_commit_ref_name</code> <code>str</code> The branch or tag name for which project is built. <code>ci_commit_ref_protected</code> <code>str</code> true if the job is running on a protected reference, false if not. <code>ci_commit_ref_slug</code> <code>str</code> $CI_COMMIT_REF_NAME in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. <code>ci_commit_sha</code> <code>str</code> The commit revision for which project is built. <code>ci_commit_short_sha</code> <code>str</code> The first eight characters of CI_COMMIT_SHA. <code>ci_commit_timestamp</code> <code>str</code> The timestamp of the commit in the ISO 8601 format. <code>ci_commit_title</code> <code>str</code> The title of the commit - the full first line of the message. <code>ci_concurrent_id</code> <code>str</code> Unique ID of build execution in a single executor. <code>ci_concurrent_project_id</code> <code>str</code> Unique ID of build execution in a single executor and project. <code>ci_config_path</code> <code>str</code> The path to CI configuration file. Defaults to .gitlab-ci.yml. <code>ci_debug_trace</code> <code>str</code> Whether debug logging (tracing) is enabled. <code>ci_default_branch</code> <code>str</code> The name of the default branch for the project. <code>ci_dependency_proxy_group_image_prefix</code> <code>str</code> The image prefix for pulling images through the Dependency Proxy. <code>ci_dependency_proxy_password</code> <code>str</code> The password to use to pull images through the Dependency Proxy. <code>ci_dependency_proxy_server</code> <code>str</code> The server for logging in to the Dependency Proxy. This is equivalent to $CI_SERVER_HOST:$CI_SERVER_PORT. <code>ci_dependency_proxy_user</code> <code>str</code> The username to use to pull images through the Dependency Proxy. <code>ci_deploy_password</code> <code>str</code> Authentication password of the GitLab Deploy Token, only present if the Project has one related. <code>ci_deploy_user</code> <code>str</code> Authentication username of the GitLab Deploy Token, only present if the Project has one related. <code>ci_job_id</code> <code>str</code> The unique ID of the current job that GitLab CI/CD uses internally. <code>ci_job_image</code> <code>str</code> The name of the image running the CI job. <code>ci_job_jwt</code> <code>str</code> RS256 JSON web token that can be used for authenticating with third party systems that support JWT authentication, for example HashiCorp\u2019s Vault. <code>ci_job_manual</code> <code>str</code> The flag to indicate that job was manually started. <code>ci_job_name</code> <code>str</code> The name of the job as defined in .gitlab-ci.yml. <code>ci_job_stage</code> <code>str</code> The name of the stage as defined in .gitlab-ci.yml. <code>ci_job_status</code> <code>str</code> The state of the job as each runner stage is executed. <code>ci_job_token</code> <code>str</code> Token used for authenticating with a few API endpoints and downloading dependent repositories. <code>ci_job_url</code> <code>str</code> Job details URL. <code>ci_merge_request_target_branch_name</code> <code>str</code> The target branch name of the merge request if the pipelines are for merge requests. <code>ci_merge_request_target_branch_sha</code> <code>str</code> The HEAD SHA of the target branch of the merge request if the pipelines are for merge requests. <code>ci_node_total</code> <code>str</code> Total number of instances of this job running in parallel. <code>ci_pages_domain</code> <code>str</code> The configured domain that hosts GitLab Pages. <code>ci_pages_url</code> <code>str</code> URL to GitLab Pages-built pages. Always belongs to a subdomain of CI_PAGES_DOMAIN. <code>ci_pipeline_id</code> <code>str</code> The instance-level ID of the current pipeline. This is a unique ID across all projects on GitLab. <code>ci_pipeline_iid</code> <code>str</code> The project-level IID (internal ID) of the current pipeline. This ID is unique for the current project. <code>ci_pipeline_source</code> <code>str</code> Indicates how the pipeline was triggered. <code>ci_pipeline_triggered</code> <code>str</code> The flag to indicate that job was triggered. <code>ci_pipeline_url</code> <code>str</code> Pipeline details URL. <code>ci_project_config_path</code> <code>str</code> The CI configuration path for the project. <code>ci_project_dir</code> <code>str</code> The full path where the repository is cloned and where the job is run. <code>ci_project_id</code> <code>str</code> The unique ID of the current project that GitLab CI/CD uses internally. <code>ci_project_name</code> <code>str</code> The name of the directory for the project that is being built. <code>ci_project_namespace</code> <code>str</code> The project stage (username or group name) that is being built. <code>ci_project_path</code> <code>str</code> The stage with project name. <code>ci_project_path_slug</code> <code>str</code> $CI_PROJECT_PATH in lowercase and with everything except 0-9 and a-z replaced with -. Use in URLs and domain names. <code>ci_project_repository_languages</code> <code>str</code> Comma-separated, lowercase list of the languages used in the repository (for example ruby,javascript,html,css). <code>ci_project_root_namespace</code> <code>str</code> The root project stage (username or group name) that is being built. <code>ci_project_title</code> <code>str</code> The human-readable project name as displayed in the GitLab web interface. <code>ci_project_url</code> <code>str</code> The HTTP(S) address to access project. <code>ci_project_visibility</code> <code>str</code> The project visibility (internal, private, public). <code>ci_registry_password</code> <code>str</code> The password to use to push containers to the GitLab Container Registry, for the current project. <code>ci_repository_url</code> <code>str</code> The URL to clone the Git repository. <code>ci_runner_description</code> <code>str</code> The description of the runner as saved in GitLab. <code>ci_runner_executable_arch</code> <code>str</code> The OS/architecture of the GitLab Runner executable (note that this is not necessarily the same as the environment of the executor). <code>ci_runner_id</code> <code>str</code> The unique ID of runner being used. <code>ci_runner_revision</code> <code>str</code> GitLab Runner revision that is executing the current job. <code>ci_runner_short_token</code> <code>str</code> First eight characters of the runner\u2019s token used to authenticate new job requests. Used as the runner\u2019s unique ID. <code>ci_runner_tags</code> <code>str</code> The defined runner tags. <code>ci_runner_version</code> <code>str</code> GitLab Runner version that is executing the current job. <code>ci_server</code> <code>str</code> Mark that job is executed in CI environment. <code>ci_server_host</code> <code>str</code> Host component of the GitLab instance URL, without protocol and port (like gitlab.example.com). <code>ci_server_name</code> <code>str</code> The name of CI server that is used to coordinate jobs. <code>ci_server_port</code> <code>str</code> Port component of the GitLab instance URL, without host and protocol (like 3000). <code>ci_server_protocol</code> <code>str</code> Protocol component of the GitLab instance URL, without host and port (like https). <code>ci_server_revision</code> <code>str</code> GitLab revision that is used to schedule jobs. <code>ci_server_url</code> <code>str</code> The base URL of the GitLab instance, including protocol and port (like https://gitlab.example.com:8080). <code>ci_server_version</code> <code>str</code> GitLab version that is used to schedule jobs. <code>ci_server_version_major</code> <code>str</code> GitLab version major component. <code>ci_server_version_minor</code> <code>str</code> GitLab version minor component. <code>ci_server_version_patch</code> <code>str</code> GitLab version patch component. <code>gitlab_ci</code> <code>str</code> Mark that job is executed in GitLab CI/CD environment. <code>gitlab_features</code> <code>str</code> The comma separated list of licensed features available for your instance and plan. <code>gitlab_user_email</code> <code>str</code> The email of the user who started the job. <code>gitlab_user_id</code> <code>str</code> The ID of the user who started the job. <code>gitlab_user_login</code> <code>str</code> The login username of the user who started the job. <code>gitlab_user_name</code> <code>str</code> The real name of the user who started the job. <code>ci_commit_branch</code> <code>str</code> The commit branch name. <code>ci_commit_tag</code> <code>str</code> The commit tag name. Present only when building tags. <code>ci_deploy_freeze</code> <code>str</code> Included with the value true if the pipeline runs during a deploy freeze window. <code>ci_disposable_environment</code> <code>str</code> Marks that the job is executed in a disposable environment (something that is created only for this job and disposed of/destroyed after the execution - all executors except shell and ssh). <code>ci_environment_name</code> <code>str</code> The name of the environment for this job. Only present if environment:name is set. <code>ci_environment_slug</code> <code>str</code> A simplified version of the environment name, suitable for inclusion in DNS, URLs, Kubernetes labels, and so on. <code>ci_environment_url</code> <code>str</code> The URL of the environment for this job. Only present if environment:url is set. <code>ci_external_pull_request_iid</code> <code>str</code> Pull Request ID from GitHub if the pipelines are for external pull requests. <code>ci_external_pull_request_source_branch_name</code> <code>str</code> The source branch name of the pull request if the pipelines are for external pull requests. <code>ci_external_pull_request_source_branch_sha</code> <code>str</code> The HEAD SHA of the source branch of the pull request if the pipelines are for external pull requests. <code>ci_external_pull_request_source_repository</code> <code>str</code> The source repository name of the pull request if the pipelines are for external pull requests. <code>ci_external_pull_request_target_branch_name</code> <code>str</code> The target branch name of the pull request if the pipelines are for external pull requests. <code>ci_external_pull_request_target_branch_sha</code> <code>str</code> The HEAD SHA of the target branch of the pull request if the pipelines are for external pull requests. <code>ci_external_pull_request_target_repository</code> <code>str</code> The target repository name of the pull request if the pipelines are for external pull requests. <code>ci_has_open_requirements</code> <code>str</code> Included with the value true only if the pipeline\u2019s project has any open requirements. <code>ci_kubernetes_active</code> <code>str</code> Included with the value true only if the pipeline has a Kubernetes cluster available for deployments. <code>ci_merge_request_assignees</code> <code>str</code> Comma-separated list of username(s) of assignee(s) for the merge request if the pipelines are for merge requests. <code>ci_merge_request_diff_base_sha</code> <code>str</code> The base SHA of the merge request diff, if the pipelines are for merge requests. <code>ci_merge_request_diff_id</code> <code>str</code> The version of the merge request diff, if the pipelines are for merge requests. <code>ci_merge_request_event_type</code> <code>str</code> The event type of the merge request, if the pipelines are for merge requests. Can be detached, merged_result or merge_train. <code>ci_merge_request_id</code> <code>str</code> The instance-level ID of the merge request. <code>ci_merge_request_iid</code> <code>str</code> The project-level IID (internal ID) of the merge request. <code>ci_merge_request_labels</code> <code>str</code> Comma-separated label names of the merge request if the pipelines are for merge requests. <code>ci_merge_request_milestone</code> <code>str</code> The milestone title of the merge request if the pipelines are for merge requests. <code>ci_merge_request_project_id</code> <code>str</code> The ID of the project of the merge request if the pipelines are for merge requests. <code>ci_merge_request_project_path</code> <code>str</code> The path of the project of the merge request if the pipelines are for merge requests (for example stage/awesome-project). <code>ci_merge_request_project_url</code> <code>str</code> The URL of the project of the merge request if the pipelines are for merge requests (for example http://192.168.10.15:3000/stage/awesome-project). Available only if only [merge_requests] or rules syntax is used and the merge request is created.   * Added in GitLab 11.6 Available in GitLab Runner all. <code>ci_merge_request_ref_path</code> <code>str</code> The ref path of the merge request if the pipelines are for merge requests. <code>ci_merge_request_source_branch_name</code> <code>str</code> The source branch name of the merge request if the pipelines are for merge requests. <code>ci_merge_request_source_branch_sha</code> <code>str</code> The HEAD SHA of the source branch of the merge request if the pipelines are for merge requests. <code>ci_merge_request_source_project_id</code> <code>str</code> The ID of the source project of the merge request if the pipelines are for merge requests. <code>ci_merge_request_source_project_path</code> <code>str</code> The path of the source project of the merge request if the pipelines are for merge requests. <code>ci_merge_request_source_project_url</code> <code>str</code> The URL of the source project of the merge request if the pipelines are for merge requests. <code>ci_merge_request_title</code> <code>str</code> The title of the merge request if the pipelines are for merge requests. <code>ci_node_index</code> <code>str</code> Index of the job in the job set. If the job is not parallelized, this variable is not set. <code>ci_open_merge_requests</code> <code>str</code> Available in branch and merge request pipelines. <code>ci_registry</code> <code>str</code> GitLab Container Registry. This variable includes a :port value if one has been specified in the registry configuration. <code>ci_registry_image</code> <code>str</code> the address of the registry tied to the specific project. <code>ci_registry_user</code> <code>str</code> The username to use to push containers to the GitLab Container Registry, for the current project. <code>ci_shared_environment</code> <code>str</code> Marks that the job is executed in a shared environment (something that is persisted across CI invocations like shell or ssh executor). <code>trigger_payload</code> <code>str</code> This variable is available when a pipeline is triggered with a webhook."},{"location":"api/root.python/#chat_channelrequired","title":"<code>chat_channel</code><sup>Required</sup>","text":"<pre><code>chat_channel: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Source chat channel which triggered the ChatOps command.</p> <p>Added in GitLab 10.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#chat_inputrequired","title":"<code>chat_input</code><sup>Required</sup>","text":"<pre><code>chat_input: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Additional arguments passed in the ChatOps command.</p> <p>Added in GitLab 10.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#cirequired","title":"<code>ci</code><sup>Required</sup>","text":"<pre><code>ci: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Mark that job is executed in CI environment.</p> <p>Added in GitLab all Available in GitLab Runner 0.4</p>"},{"location":"api/root.python/#ci_api_v4_urlrequired","title":"<code>ci_api_v4_url</code><sup>Required</sup>","text":"<pre><code>ci_api_v4_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The GitLab API v4 root URL.</p> <p>Added in GitLab 11.7 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_builds_dirrequired","title":"<code>ci_builds_dir</code><sup>Required</sup>","text":"<pre><code>ci_builds_dir: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Top-level directory where builds are executed.</p> <p>Added in GitLab all Available in GitLab Runner 11.10</p>"},{"location":"api/root.python/#ci_commit_before_sharequired","title":"<code>ci_commit_before_sha</code><sup>Required</sup>","text":"<pre><code>ci_commit_before_sha: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The previous latest commit present on a branch. Is always 0000000000000000000000000000000000000000 in pipelines for merge requests.</p> <p>Added in GitLab 11.2 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_commit_descriptionrequired","title":"<code>ci_commit_description</code><sup>Required</sup>","text":"<pre><code>ci_commit_description: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The description of the commit the message without first line, if the title is shorter than 100 characters;</p> <p>full message in other case.</p> <p>Added in GitLab 10.8 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_commit_messagerequired","title":"<code>ci_commit_message</code><sup>Required</sup>","text":"<pre><code>ci_commit_message: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The full commit message.</p> <p>Added in GitLab 10.8 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_commit_ref_namerequired","title":"<code>ci_commit_ref_name</code><sup>Required</sup>","text":"<pre><code>ci_commit_ref_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The branch or tag name for which project is built.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_commit_ref_protectedrequired","title":"<code>ci_commit_ref_protected</code><sup>Required</sup>","text":"<pre><code>ci_commit_ref_protected: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>true if the job is running on a protected reference, false if not.</p> <p>Added in GitLab 11.11 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_commit_ref_slugrequired","title":"<code>ci_commit_ref_slug</code><sup>Required</sup>","text":"<pre><code>ci_commit_ref_slug: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>$CI_COMMIT_REF_NAME in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -.</p> <p>No leading / trailing -. Use in URLs, host names and domain names.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_commit_sharequired","title":"<code>ci_commit_sha</code><sup>Required</sup>","text":"<pre><code>ci_commit_sha: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The commit revision for which project is built.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_commit_short_sharequired","title":"<code>ci_commit_short_sha</code><sup>Required</sup>","text":"<pre><code>ci_commit_short_sha: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The first eight characters of CI_COMMIT_SHA.</p> <p>Added in GitLab 11.7 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_commit_timestamprequired","title":"<code>ci_commit_timestamp</code><sup>Required</sup>","text":"<pre><code>ci_commit_timestamp: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The timestamp of the commit in the ISO 8601 format.</p> <p>Added in GitLab 13.4 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_commit_titlerequired","title":"<code>ci_commit_title</code><sup>Required</sup>","text":"<pre><code>ci_commit_title: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The title of the commit - the full first line of the message.</p> <p>Added in GitLab 10.8 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_concurrent_idrequired","title":"<code>ci_concurrent_id</code><sup>Required</sup>","text":"<pre><code>ci_concurrent_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Unique ID of build execution in a single executor.</p> <p>Added in GitLab all Available in GitLab Runner 11.10</p>"},{"location":"api/root.python/#ci_concurrent_project_idrequired","title":"<code>ci_concurrent_project_id</code><sup>Required</sup>","text":"<pre><code>ci_concurrent_project_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Unique ID of build execution in a single executor and project.</p> <p>Added in GitLab all Available in GitLab Runner 11.10</p>"},{"location":"api/root.python/#ci_config_pathrequired","title":"<code>ci_config_path</code><sup>Required</sup>","text":"<pre><code>ci_config_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The path to CI configuration file. Defaults to .gitlab-ci.yml.</p> <p>Added in GitLab 9.4 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_debug_tracerequired","title":"<code>ci_debug_trace</code><sup>Required</sup>","text":"<pre><code>ci_debug_trace: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Whether debug logging (tracing) is enabled.</p> <p>Added in GitLab all Available in GitLab Runner 1.7</p>"},{"location":"api/root.python/#ci_default_branchrequired","title":"<code>ci_default_branch</code><sup>Required</sup>","text":"<pre><code>ci_default_branch: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the default branch for the project.</p> <p>Added in GitLab 12.4 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_dependency_proxy_group_image_prefixrequired","title":"<code>ci_dependency_proxy_group_image_prefix</code><sup>Required</sup>","text":"<pre><code>ci_dependency_proxy_group_image_prefix: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The image prefix for pulling images through the Dependency Proxy.</p> <p>Added in GitLab 13.7 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_dependency_proxy_passwordrequired","title":"<code>ci_dependency_proxy_password</code><sup>Required</sup>","text":"<pre><code>ci_dependency_proxy_password: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The password to use to pull images through the Dependency Proxy.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab 13.7 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_dependency_proxy_serverrequired","title":"<code>ci_dependency_proxy_server</code><sup>Required</sup>","text":"<pre><code>ci_dependency_proxy_server: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The server for logging in to the Dependency Proxy. This is equivalent to $CI_SERVER_HOST:$CI_SERVER_PORT.</p> <p>Added in GitLab 13.7 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_dependency_proxy_userrequired","title":"<code>ci_dependency_proxy_user</code><sup>Required</sup>","text":"<pre><code>ci_dependency_proxy_user: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The username to use to pull images through the Dependency Proxy.</p> <p>Added in GitLab 13.7 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_deploy_passwordrequired","title":"<code>ci_deploy_password</code><sup>Required</sup>","text":"<pre><code>ci_deploy_password: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Authentication password of the GitLab Deploy Token, only present if the Project has one related.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab 10.8 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_deploy_userrequired","title":"<code>ci_deploy_user</code><sup>Required</sup>","text":"<pre><code>ci_deploy_user: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Authentication username of the GitLab Deploy Token, only present if the Project has one related.</p> <p>Added in GitLab 10.8 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_job_idrequired","title":"<code>ci_job_id</code><sup>Required</sup>","text":"<pre><code>ci_job_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The unique ID of the current job that GitLab CI/CD uses internally.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_job_imagerequired","title":"<code>ci_job_image</code><sup>Required</sup>","text":"<pre><code>ci_job_image: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the image running the CI job.</p> <p>Added in GitLab 12.9 Available in GitLab Runner 12.9</p>"},{"location":"api/root.python/#ci_job_jwtrequired","title":"<code>ci_job_jwt</code><sup>Required</sup>","text":"<pre><code>ci_job_jwt: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>RS256 JSON web token that can be used for authenticating with third party systems that support JWT authentication, for example HashiCorp\u2019s Vault.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab 12.10 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_job_manualrequired","title":"<code>ci_job_manual</code><sup>Required</sup>","text":"<pre><code>ci_job_manual: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The flag to indicate that job was manually started.</p> <p>Added in GitLab 8.12 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_job_namerequired","title":"<code>ci_job_name</code><sup>Required</sup>","text":"<pre><code>ci_job_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the job as defined in .gitlab-ci.yml.</p> <p>Added in GitLab 9.0 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_job_stagerequired","title":"<code>ci_job_stage</code><sup>Required</sup>","text":"<pre><code>ci_job_stage: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the stage as defined in .gitlab-ci.yml.</p> <p>Added in GitLab 9.0 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_job_statusrequired","title":"<code>ci_job_status</code><sup>Required</sup>","text":"<pre><code>ci_job_status: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The state of the job as each runner stage is executed.</p> <p>Use with after_script where CI_JOB_STATUS can be either success, failed or canceled.</p> <p>Added in GitLab all Available in GitLab Runner 13.5</p>"},{"location":"api/root.python/#ci_job_tokenrequired","title":"<code>ci_job_token</code><sup>Required</sup>","text":"<pre><code>ci_job_token: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Token used for authenticating with a few API endpoints and downloading dependent repositories.</p> <p>The token is valid as long as the job is running.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab 9.0 Available in GitLab Runner 1.2</p>"},{"location":"api/root.python/#ci_job_urlrequired","title":"<code>ci_job_url</code><sup>Required</sup>","text":"<pre><code>ci_job_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Job details URL.</p> <p>Added in GitLab 11.1 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_merge_request_target_branch_namerequired","title":"<code>ci_merge_request_target_branch_name</code><sup>Required</sup>","text":"<pre><code>ci_merge_request_target_branch_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The target branch name of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_target_branch_sharequired","title":"<code>ci_merge_request_target_branch_sha</code><sup>Required</sup>","text":"<pre><code>ci_merge_request_target_branch_sha: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The HEAD SHA of the target branch of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used, the merge request is created, and the pipeline is a merged result pipeline.</p> <p>Added in GitLab 11.9 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_node_totalrequired","title":"<code>ci_node_total</code><sup>Required</sup>","text":"<pre><code>ci_node_total: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Total number of instances of this job running in parallel.</p> <p>If the job is not parallelized, this variable is set to 1.</p> <p>Added in GitLab 11.5 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_pages_domainrequired","title":"<code>ci_pages_domain</code><sup>Required</sup>","text":"<pre><code>ci_pages_domain: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The configured domain that hosts GitLab Pages.</p> <p>Added in GitLab 11.8 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_pages_urlrequired","title":"<code>ci_pages_url</code><sup>Required</sup>","text":"<pre><code>ci_pages_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>URL to GitLab Pages-built pages. Always belongs to a subdomain of CI_PAGES_DOMAIN.</p> <p>Added in GitLab 11.8 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_pipeline_idrequired","title":"<code>ci_pipeline_id</code><sup>Required</sup>","text":"<pre><code>ci_pipeline_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The instance-level ID of the current pipeline. This is a unique ID across all projects on GitLab.</p> <p>Added in GitLab 8.10 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_pipeline_iidrequired","title":"<code>ci_pipeline_iid</code><sup>Required</sup>","text":"<pre><code>ci_pipeline_iid: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The project-level IID (internal ID) of the current pipeline. This ID is unique for the current project.</p> <p>Added in GitLab 11.0 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_pipeline_sourcerequired","title":"<code>ci_pipeline_source</code><sup>Required</sup>","text":"<pre><code>ci_pipeline_source: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Indicates how the pipeline was triggered.</p> <p>Possible options are push, web, schedule, api, external, chat, webide, merge_request_event, external_pull_request_event, parent_pipeline, trigger, or pipeline. For pipelines created before GitLab 9.5, this is displayed as unknown.</p> <p>Added in GitLab 10.0 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_pipeline_triggeredrequired","title":"<code>ci_pipeline_triggered</code><sup>Required</sup>","text":"<pre><code>ci_pipeline_triggered: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The flag to indicate that job was triggered.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_pipeline_urlrequired","title":"<code>ci_pipeline_url</code><sup>Required</sup>","text":"<pre><code>ci_pipeline_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Pipeline details URL.</p> <p>Added in GitLab 11.1 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_project_config_pathrequired","title":"<code>ci_project_config_path</code><sup>Required</sup>","text":"<pre><code>ci_project_config_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The CI configuration path for the project.</p> <p>Added in GitLab 13.8 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_project_dirrequired","title":"<code>ci_project_dir</code><sup>Required</sup>","text":"<pre><code>ci_project_dir: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The full path where the repository is cloned and where the job is run.</p> <p>If the GitLab Runner builds_dir parameter is set, this variable is set relative to the value of builds_dir. For more information, see Advanced configuration for GitLab Runner.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_project_idrequired","title":"<code>ci_project_id</code><sup>Required</sup>","text":"<pre><code>ci_project_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The unique ID of the current project that GitLab CI/CD uses internally.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_project_namerequired","title":"<code>ci_project_name</code><sup>Required</sup>","text":"<pre><code>ci_project_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the directory for the project that is being built.</p> <p>For example, if the project URL is gitlab.example.com/group-name/project-1, the CI_PROJECT_NAME would be project-1.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_project_namespacerequired","title":"<code>ci_project_namespace</code><sup>Required</sup>","text":"<pre><code>ci_project_namespace: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The project stage (username or group name) that is being built.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_project_pathrequired","title":"<code>ci_project_path</code><sup>Required</sup>","text":"<pre><code>ci_project_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The stage with project name.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_project_path_slugrequired","title":"<code>ci_project_path_slug</code><sup>Required</sup>","text":"<pre><code>ci_project_path_slug: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>$CI_PROJECT_PATH in lowercase and with everything except 0-9 and a-z replaced with -. Use in URLs and domain names.</p> <p>Added in GitLab 9.3 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_project_repository_languagesrequired","title":"<code>ci_project_repository_languages</code><sup>Required</sup>","text":"<pre><code>ci_project_repository_languages: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Comma-separated, lowercase list of the languages used in the repository (for example ruby,javascript,html,css).</p> <p>Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_project_root_namespacerequired","title":"<code>ci_project_root_namespace</code><sup>Required</sup>","text":"<pre><code>ci_project_root_namespace: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The root project stage (username or group name) that is being built.</p> <p>For example, if CI_PROJECT_NAMESPACE is root-group/child-group/grandchild-group, CI_PROJECT_ROOT_NAMESPACE would be root-group.</p> <p>Added in GitLab 13.2 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_project_titlerequired","title":"<code>ci_project_title</code><sup>Required</sup>","text":"<pre><code>ci_project_title: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The human-readable project name as displayed in the GitLab web interface.</p> <p>Added in GitLab 12.4 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_project_urlrequired","title":"<code>ci_project_url</code><sup>Required</sup>","text":"<pre><code>ci_project_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The HTTP(S) address to access project.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_project_visibilityrequired","title":"<code>ci_project_visibility</code><sup>Required</sup>","text":"<pre><code>ci_project_visibility: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The project visibility (internal, private, public).</p> <p>Added in GitLab 10.3 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_registry_passwordrequired","title":"<code>ci_registry_password</code><sup>Required</sup>","text":"<pre><code>ci_registry_password: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The password to use to push containers to the GitLab Container Registry, for the current project.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_repository_urlrequired","title":"<code>ci_repository_url</code><sup>Required</sup>","text":"<pre><code>ci_repository_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The URL to clone the Git repository.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_runner_descriptionrequired","title":"<code>ci_runner_description</code><sup>Required</sup>","text":"<pre><code>ci_runner_description: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The description of the runner as saved in GitLab.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_runner_executable_archrequired","title":"<code>ci_runner_executable_arch</code><sup>Required</sup>","text":"<pre><code>ci_runner_executable_arch: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The OS/architecture of the GitLab Runner executable (note that this is not necessarily the same as the environment of the executor).</p> <p>Added in GitLab all Available in GitLab Runner 10.6</p>"},{"location":"api/root.python/#ci_runner_idrequired","title":"<code>ci_runner_id</code><sup>Required</sup>","text":"<pre><code>ci_runner_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The unique ID of runner being used.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_runner_revisionrequired","title":"<code>ci_runner_revision</code><sup>Required</sup>","text":"<pre><code>ci_runner_revision: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>GitLab Runner revision that is executing the current job.</p> <p>Added in GitLab all Available in GitLab Runner 10.6</p>"},{"location":"api/root.python/#ci_runner_short_tokenrequired","title":"<code>ci_runner_short_token</code><sup>Required</sup>","text":"<pre><code>ci_runner_short_token: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>First eight characters of the runner\u2019s token used to authenticate new job requests. Used as the runner\u2019s unique ID.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab all Available in GitLab Runner 12.3</p>"},{"location":"api/root.python/#ci_runner_tagsrequired","title":"<code>ci_runner_tags</code><sup>Required</sup>","text":"<pre><code>ci_runner_tags: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The defined runner tags.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_runner_versionrequired","title":"<code>ci_runner_version</code><sup>Required</sup>","text":"<pre><code>ci_runner_version: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>GitLab Runner version that is executing the current job.</p> <p>Added in GitLab all Available in GitLab Runner 10.6</p>"},{"location":"api/root.python/#ci_serverrequired","title":"<code>ci_server</code><sup>Required</sup>","text":"<pre><code>ci_server: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Mark that job is executed in CI environment.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_server_hostrequired","title":"<code>ci_server_host</code><sup>Required</sup>","text":"<pre><code>ci_server_host: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Host component of the GitLab instance URL, without protocol and port (like gitlab.example.com).</p> <p>Added in GitLab 12.1 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_server_namerequired","title":"<code>ci_server_name</code><sup>Required</sup>","text":"<pre><code>ci_server_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of CI server that is used to coordinate jobs.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_server_portrequired","title":"<code>ci_server_port</code><sup>Required</sup>","text":"<pre><code>ci_server_port: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Port component of the GitLab instance URL, without host and protocol (like 3000).</p> <p>Added in GitLab 12.8 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_server_protocolrequired","title":"<code>ci_server_protocol</code><sup>Required</sup>","text":"<pre><code>ci_server_protocol: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Protocol component of the GitLab instance URL, without host and port (like https).</p> <p>Added in GitLab 12.8 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_server_revisionrequired","title":"<code>ci_server_revision</code><sup>Required</sup>","text":"<pre><code>ci_server_revision: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>GitLab revision that is used to schedule jobs.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_server_urlrequired","title":"<code>ci_server_url</code><sup>Required</sup>","text":"<pre><code>ci_server_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The base URL of the GitLab instance, including protocol and port (like https://gitlab.example.com:8080).</p> <p>Added in GitLab 12.7 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_server_versionrequired","title":"<code>ci_server_version</code><sup>Required</sup>","text":"<pre><code>ci_server_version: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>GitLab version that is used to schedule jobs.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_server_version_majorrequired","title":"<code>ci_server_version_major</code><sup>Required</sup>","text":"<pre><code>ci_server_version_major: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>GitLab version major component.</p> <p>Added in GitLab 11.4 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_server_version_minorrequired","title":"<code>ci_server_version_minor</code><sup>Required</sup>","text":"<pre><code>ci_server_version_minor: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>GitLab version minor component.</p> <p>Added in GitLab 11.4 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_server_version_patchrequired","title":"<code>ci_server_version_patch</code><sup>Required</sup>","text":"<pre><code>ci_server_version_patch: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>GitLab version patch component.</p> <p>Added in GitLab 11.4 Available in GitLab Runner all</p>"},{"location":"api/root.python/#gitlab_cirequired","title":"<code>gitlab_ci</code><sup>Required</sup>","text":"<pre><code>gitlab_ci: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Mark that job is executed in GitLab CI/CD environment.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.python/#gitlab_featuresrequired","title":"<code>gitlab_features</code><sup>Required</sup>","text":"<pre><code>gitlab_features: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The comma separated list of licensed features available for your instance and plan.</p> <p>Added in GitLab 10.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#gitlab_user_emailrequired","title":"<code>gitlab_user_email</code><sup>Required</sup>","text":"<pre><code>gitlab_user_email: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The email of the user who started the job.</p> <p>Added in GitLab 8.12 Available in GitLab Runner all</p>"},{"location":"api/root.python/#gitlab_user_idrequired","title":"<code>gitlab_user_id</code><sup>Required</sup>","text":"<pre><code>gitlab_user_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The ID of the user who started the job.</p> <p>Added in GitLab 8.12 Available in GitLab Runner all</p>"},{"location":"api/root.python/#gitlab_user_loginrequired","title":"<code>gitlab_user_login</code><sup>Required</sup>","text":"<pre><code>gitlab_user_login: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The login username of the user who started the job.</p> <p>Added in GitLab 10.0 Available in GitLab Runner all</p>"},{"location":"api/root.python/#gitlab_user_namerequired","title":"<code>gitlab_user_name</code><sup>Required</sup>","text":"<pre><code>gitlab_user_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The real name of the user who started the job.</p> <p>Added in GitLab 10.0 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_commit_branchoptional","title":"<code>ci_commit_branch</code><sup>Optional</sup>","text":"<pre><code>ci_commit_branch: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The commit branch name.</p> <p>Present in branch pipelines, including pipelines for the default branch. Not present in merge request pipelines or tag pipelines.</p> <p>Added in GitLab 12.6 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_commit_tagoptional","title":"<code>ci_commit_tag</code><sup>Optional</sup>","text":"<pre><code>ci_commit_tag: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The commit tag name. Present only when building tags.</p> <p>Added in GitLab 9.0 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_deploy_freezeoptional","title":"<code>ci_deploy_freeze</code><sup>Optional</sup>","text":"<pre><code>ci_deploy_freeze: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Included with the value true if the pipeline runs during a deploy freeze window.</p> <p>Added in GitLab 13.2 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_disposable_environmentoptional","title":"<code>ci_disposable_environment</code><sup>Optional</sup>","text":"<pre><code>ci_disposable_environment: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Marks that the job is executed in a disposable environment (something that is created only for this job and disposed of/destroyed after the execution - all executors except shell and ssh).</p> <p>If the environment is disposable, it is set to true, otherwise it is not defined at all.</p> <p>Added in GitLab all Available in GitLab Runner 10.1</p>"},{"location":"api/root.python/#ci_environment_nameoptional","title":"<code>ci_environment_name</code><sup>Optional</sup>","text":"<pre><code>ci_environment_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The name of the environment for this job. Only present if environment:name is set.</p> <p>Added in GitLab 8.15 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_environment_slugoptional","title":"<code>ci_environment_slug</code><sup>Optional</sup>","text":"<pre><code>ci_environment_slug: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>A simplified version of the environment name, suitable for inclusion in DNS, URLs, Kubernetes labels, and so on.</p> <p>Only present if environment:name is set.</p> <p>Added in GitLab 8.15 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_environment_urloptional","title":"<code>ci_environment_url</code><sup>Optional</sup>","text":"<pre><code>ci_environment_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The URL of the environment for this job. Only present if environment:url is set.</p> <p>Added in GitLab 9.3 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_external_pull_request_iidoptional","title":"<code>ci_external_pull_request_iid</code><sup>Optional</sup>","text":"<pre><code>ci_external_pull_request_iid: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Pull Request ID from GitHub if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.</p> <p>Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_external_pull_request_source_branch_nameoptional","title":"<code>ci_external_pull_request_source_branch_name</code><sup>Optional</sup>","text":"<pre><code>ci_external_pull_request_source_branch_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The source branch name of the pull request if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.</p> <p>Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_external_pull_request_source_branch_shaoptional","title":"<code>ci_external_pull_request_source_branch_sha</code><sup>Optional</sup>","text":"<pre><code>ci_external_pull_request_source_branch_sha: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The HEAD SHA of the source branch of the pull request if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.</p> <p>Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_external_pull_request_source_repositoryoptional","title":"<code>ci_external_pull_request_source_repository</code><sup>Optional</sup>","text":"<pre><code>ci_external_pull_request_source_repository: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The source repository name of the pull request if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.</p> <p>Added in GitLab 13.3 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_external_pull_request_target_branch_nameoptional","title":"<code>ci_external_pull_request_target_branch_name</code><sup>Optional</sup>","text":"<pre><code>ci_external_pull_request_target_branch_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The target branch name of the pull request if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open. * Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_external_pull_request_target_branch_shaoptional","title":"<code>ci_external_pull_request_target_branch_sha</code><sup>Optional</sup>","text":"<pre><code>ci_external_pull_request_target_branch_sha: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The HEAD SHA of the target branch of the pull request if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.</p> <p>Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_external_pull_request_target_repositoryoptional","title":"<code>ci_external_pull_request_target_repository</code><sup>Optional</sup>","text":"<pre><code>ci_external_pull_request_target_repository: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The target repository name of the pull request if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.</p> <p>Added in GitLab 13.3 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_has_open_requirementsoptional","title":"<code>ci_has_open_requirements</code><sup>Optional</sup>","text":"<pre><code>ci_has_open_requirements: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Included with the value true only if the pipeline\u2019s project has any open requirements.</p> <p>Not included if there are no open requirements for the pipeline\u2019s project.</p> <p>Added in GitLab 13.1 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_kubernetes_activeoptional","title":"<code>ci_kubernetes_active</code><sup>Optional</sup>","text":"<pre><code>ci_kubernetes_active: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Included with the value true only if the pipeline has a Kubernetes cluster available for deployments.</p> <p>Not included if no cluster is available. Can be used as an alternative to only:kubernetes/except:kubernetes with rules:if.</p> <p>Added in GitLab 13.0 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_assigneesoptional","title":"<code>ci_merge_request_assignees</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_assignees: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Comma-separated list of username(s) of assignee(s) for the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.9 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_diff_base_shaoptional","title":"<code>ci_merge_request_diff_base_sha</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_diff_base_sha: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The base SHA of the merge request diff, if the pipelines are for merge requests.</p> <p>Added in GitLab 13.7 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_diff_idoptional","title":"<code>ci_merge_request_diff_id</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_diff_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The version of the merge request diff, if the pipelines are for merge requests.</p> <p>Added in GitLab 13.7 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_event_typeoptional","title":"<code>ci_merge_request_event_type</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_event_type: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The event type of the merge request, if the pipelines are for merge requests. Can be detached, merged_result or merge_train.</p> <p>Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_idoptional","title":"<code>ci_merge_request_id</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The instance-level ID of the merge request.</p> <p>Only available if the pipelines are for merge requests and the merge request is created. This is a unique ID across all projects on GitLab.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_iidoptional","title":"<code>ci_merge_request_iid</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_iid: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The project-level IID (internal ID) of the merge request.</p> <p>Only available If the pipelines are for merge requests and the merge request is created. This ID is unique for the current project.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_labelsoptional","title":"<code>ci_merge_request_labels</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_labels: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Comma-separated label names of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.9 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_milestoneoptional","title":"<code>ci_merge_request_milestone</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_milestone: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The milestone title of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.9 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_project_idoptional","title":"<code>ci_merge_request_project_id</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_project_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The ID of the project of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_project_pathoptional","title":"<code>ci_merge_request_project_path</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_project_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The path of the project of the merge request if the pipelines are for merge requests (for example stage/awesome-project).</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_project_urloptional","title":"<code>ci_merge_request_project_url</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_project_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The URL of the project of the merge request if the pipelines are for merge requests (for example http://192.168.10.15:3000/stage/awesome-project). Available only if only [merge_requests] or rules syntax is used and the merge request is created.   * Added in GitLab 11.6 Available in GitLab Runner all.</p>"},{"location":"api/root.python/#ci_merge_request_ref_pathoptional","title":"<code>ci_merge_request_ref_path</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_ref_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The ref path of the merge request if the pipelines are for merge requests.</p> <p>(for example refs/merge-requests/1/head). Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_source_branch_nameoptional","title":"<code>ci_merge_request_source_branch_name</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_source_branch_name: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The source branch name of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_source_branch_shaoptional","title":"<code>ci_merge_request_source_branch_sha</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_source_branch_sha: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The HEAD SHA of the source branch of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used, the merge request is created, and the pipeline is a merged result pipeline.</p> <p>Added in GitLab 11.9 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_source_project_idoptional","title":"<code>ci_merge_request_source_project_id</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_source_project_id: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The ID of the source project of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_source_project_pathoptional","title":"<code>ci_merge_request_source_project_path</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_source_project_path: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The path of the source project of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_source_project_urloptional","title":"<code>ci_merge_request_source_project_url</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_source_project_url: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The URL of the source project of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_merge_request_titleoptional","title":"<code>ci_merge_request_title</code><sup>Optional</sup>","text":"<pre><code>ci_merge_request_title: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The title of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.9 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_node_indexoptional","title":"<code>ci_node_index</code><sup>Optional</sup>","text":"<pre><code>ci_node_index: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Index of the job in the job set. If the job is not parallelized, this variable is not set.</p> <p>Added in GitLab 11.5 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_open_merge_requestsoptional","title":"<code>ci_open_merge_requests</code><sup>Optional</sup>","text":"<pre><code>ci_open_merge_requests: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Available in branch and merge request pipelines.</p> <p>Contains a comma-separated list of up to four merge requests that use the current branch and project as the merge request source. For example gitlab-org/gitlab!333,gitlab-org/gitlab-foss!11.</p> <p>Added in GitLab 13.8 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_registryoptional","title":"<code>ci_registry</code><sup>Optional</sup>","text":"<pre><code>ci_registry: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>GitLab Container Registry. This variable includes a :port value if one has been specified in the registry configuration.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_registry_imageoptional","title":"<code>ci_registry_image</code><sup>Optional</sup>","text":"<pre><code>ci_registry_image: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>the address of the registry tied to the specific project.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.python/#ci_registry_useroptional","title":"<code>ci_registry_user</code><sup>Optional</sup>","text":"<pre><code>ci_registry_user: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The username to use to push containers to the GitLab Container Registry, for the current project.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.python/#ci_shared_environmentoptional","title":"<code>ci_shared_environment</code><sup>Optional</sup>","text":"<pre><code>ci_shared_environment: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Marks that the job is executed in a shared environment (something that is persisted across CI invocations like shell or ssh executor).</p> <p>If the environment is shared, it is set to true, otherwise it is not defined at all.</p> <p>Added in GitLab all Available in GitLab Runner 10.1</p>"},{"location":"api/root.python/#trigger_payloadoptional","title":"<code>trigger_payload</code><sup>Optional</sup>","text":"<pre><code>trigger_payload: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>This variable is available when a pipeline is triggered with a webhook.</p> <p>Added in GitLab 13.9 Available in GitLab Runner all</p>"},{"location":"api/root.python/#rule","title":"Rule","text":"<ul> <li>Implements: IRule</li> </ul>"},{"location":"api/root.python/#initializers_17","title":"Initializers","text":"<pre><code>import gcix\ngcix.Rule(\nallow_failure: bool = None,\nchanges: typing.List[str] = None,\nexists: typing.List[str] = None,\nif_statement: str = None,\nvariables: typing.Mapping[str] = None,\nwhen: WhenStatement = None\n)\n</code></pre> Name Type Description <code>allow_failure</code> <code>bool</code> No description. <code>changes</code> <code>typing.List[str]</code> No description. <code>exists</code> <code>typing.List[str]</code> No description. <code>if_statement</code> <code>str</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>when</code> <code>WhenStatement</code> No description."},{"location":"api/root.python/#allow_failureoptional_3","title":"<code>allow_failure</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> <li>Default: false</li> </ul>"},{"location":"api/root.python/#changesoptional_1","title":"<code>changes</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#existsoptional_1","title":"<code>exists</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#if_statementoptional_1","title":"<code>if_statement</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#variablesoptional_7","title":"<code>variables</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#whenoptional_7","title":"<code>when</code><sup>Optional</sup>","text":"<ul> <li>Type: WhenStatement</li> <li>Default: WhenStatement.ON_SUCCESS.</li> </ul>"},{"location":"api/root.python/#methods_16","title":"Methods","text":"Name Description <code>add_variables</code> Adds one or more variables, each as keyword argument, to the rule. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>never</code> This method is intended to be used for predefined rules. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#add_variables_4","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Rule\n</code></pre> <p>Adds one or more variables, each as keyword argument, to the rule.</p> <pre><code>rule.addVariables({GREETING: \"hello\", LANGUAGE: \"typescript\"})\n</code></pre>"},{"location":"api/root.python/#variablesrequired_8","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#is_equal_15","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_15","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#never","title":"<code>never</code>","text":"<pre><code>def never() -&gt; Rule\n</code></pre> <p>This method is intended to be used for predefined rules.</p> <p>For instance you have defined an often used rule <code>on_master</code> whose if statement checks if the pipeline is executed on branch <code>master</code>. Then you can either run a job, if on master...</p> <pre><code>myJob.appendRules(onMaster)\n</code></pre> <p>... or do not run a job if on master...</p> <pre><code>myJob.appendRules(onMaster.never())\n</code></pre>"},{"location":"api/root.python/#render_15","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_41","title":"Properties","text":"Name Type Description <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>allow_failure</code> <code>bool</code> No description. <code>changes</code> <code>typing.List[str]</code> No description. <code>exists</code> <code>typing.List[str]</code> No description. <code>if_statement</code> <code>str</code> No description. <code>when</code> <code>WhenStatement</code> No description."},{"location":"api/root.python/#variablesrequired_9","title":"<code>variables</code><sup>Required</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#allow_failureoptional_4","title":"<code>allow_failure</code><sup>Optional</sup>","text":"<pre><code>allow_failure: bool\n</code></pre> <ul> <li>Type: bool</li> </ul>"},{"location":"api/root.python/#changesoptional_2","title":"<code>changes</code><sup>Optional</sup>","text":"<pre><code>changes: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#existsoptional_2","title":"<code>exists</code><sup>Optional</sup>","text":"<pre><code>exists: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#if_statementoptional_2","title":"<code>if_statement</code><sup>Optional</sup>","text":"<pre><code>if_statement: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#whenoptional_8","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>when: WhenStatement\n</code></pre> <ul> <li>Type: WhenStatement</li> </ul>"},{"location":"api/root.python/#rulelib","title":"RuleLib","text":"<p>Represents a library of static methods to create rules for GitLab CI/CD pipeline conditions.</p>"},{"location":"api/root.python/#static-functions","title":"Static Functions","text":"Name Description <code>not_on_branch</code> Creates a rule that evaluates to true if the CI/CD pipeline is NOT running on the specified branch. <code>not_on_main</code> Creates a rule that evaluates to true if the CI/CD pipeline is NOT running on the \"main\" branch. <code>not_on_master</code> Creates a rule that evaluates to true if the CI/CD pipeline is NOT running on the \"master\" branch. <code>on_branch</code> Creates a rule that evaluates to true if the CI/CD pipeline is running on the specified branch. <code>on_main</code> Creates a rule that evaluates to true if the CI/CD pipeline is running on the \"main\" branch. <code>on_master</code> Creates a rule that evaluates to true if the CI/CD pipeline is running on the \"master\" branch. <code>on_merge_request_events</code> Creates a rule that evaluates to true for merge request events in the CI/CD pipeline. <code>on_pipeline_trigger</code> Creates a rule that evaluates to true for pipelines triggered by API or the trigger keyword. <code>on_success</code> Creates a rule that always evaluates to true (success). <code>on_tags</code> Creates a rule that evaluates to true for CI/CD pipelines triggered by tags."},{"location":"api/root.python/#not_on_branch","title":"<code>not_on_branch</code>","text":"<pre><code>import gcix\ngcix.RuleLib.not_on_branch(\nbranch_name: str\n)\n</code></pre> <p>Creates a rule that evaluates to true if the CI/CD pipeline is NOT running on the specified branch.</p>"},{"location":"api/root.python/#branch_namerequired","title":"<code>branch_name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the branch to check.</p>"},{"location":"api/root.python/#not_on_main","title":"<code>not_on_main</code>","text":"<pre><code>import gcix\ngcix.RuleLib.not_on_main()\n</code></pre> <p>Creates a rule that evaluates to true if the CI/CD pipeline is NOT running on the \"main\" branch.</p>"},{"location":"api/root.python/#not_on_master","title":"<code>not_on_master</code>","text":"<pre><code>import gcix\ngcix.RuleLib.not_on_master()\n</code></pre> <p>Creates a rule that evaluates to true if the CI/CD pipeline is NOT running on the \"master\" branch.</p>"},{"location":"api/root.python/#on_branch","title":"<code>on_branch</code>","text":"<pre><code>import gcix\ngcix.RuleLib.on_branch(\nbranch_name: str\n)\n</code></pre> <p>Creates a rule that evaluates to true if the CI/CD pipeline is running on the specified branch.</p>"},{"location":"api/root.python/#branch_namerequired_1","title":"<code>branch_name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>The name of the branch to check.</p>"},{"location":"api/root.python/#on_main","title":"<code>on_main</code>","text":"<pre><code>import gcix\ngcix.RuleLib.on_main()\n</code></pre> <p>Creates a rule that evaluates to true if the CI/CD pipeline is running on the \"main\" branch.</p>"},{"location":"api/root.python/#on_master","title":"<code>on_master</code>","text":"<pre><code>import gcix\ngcix.RuleLib.on_master()\n</code></pre> <p>Creates a rule that evaluates to true if the CI/CD pipeline is running on the \"master\" branch.</p>"},{"location":"api/root.python/#on_merge_request_events","title":"<code>on_merge_request_events</code>","text":"<pre><code>import gcix\ngcix.RuleLib.on_merge_request_events()\n</code></pre> <p>Creates a rule that evaluates to true for merge request events in the CI/CD pipeline.</p>"},{"location":"api/root.python/#on_pipeline_trigger","title":"<code>on_pipeline_trigger</code>","text":"<pre><code>import gcix\ngcix.RuleLib.on_pipeline_trigger()\n</code></pre> <p>Creates a rule that evaluates to true for pipelines triggered by API or the trigger keyword.</p>"},{"location":"api/root.python/#on_success","title":"<code>on_success</code>","text":"<pre><code>import gcix\ngcix.RuleLib.on_success()\n</code></pre> <p>Creates a rule that always evaluates to true (success).</p>"},{"location":"api/root.python/#on_tags","title":"<code>on_tags</code>","text":"<pre><code>import gcix\ngcix.RuleLib.on_tags()\n</code></pre> <p>Creates a rule that evaluates to true for CI/CD pipelines triggered by tags.</p>"},{"location":"api/root.python/#service","title":"Service","text":"<ul> <li>Implements: IService</li> </ul>"},{"location":"api/root.python/#initializers_18","title":"Initializers","text":"<pre><code>import gcix\ngcix.Service(\nname: str\n)\n</code></pre> Name Type Description <code>name</code> <code>str</code> No description."},{"location":"api/root.python/#namerequired_11","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#methods_17","title":"Methods","text":"Name Description <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#is_equal_16","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_16","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#render_16","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_42","title":"Properties","text":"Name Type Description <code>name</code> <code>str</code> No description."},{"location":"api/root.python/#namerequired_12","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#triggerjob","title":"TriggerJob","text":"<ul> <li>Implements: ITriggerJob</li> </ul> <p>This class represents the trigger job.</p> <p>Jobs with trigger can only use a limited set of keywords. For example, you can\u2019t run commands with <code>script</code>.</p> <p>Simple example:</p> <pre><code># Example automatically generated from non-compiling source. May contain errors.\ntrigger_job = TriggerJob(\nstage=\"trigger-other-job\",\nproject=\"myteam/other-project\",\nbranch=\"main\",\nstrategy=\"depend\"\n)\ntrigger_job.append_rules(rules.on_tags().never(), rules.on_main())\n</code></pre>"},{"location":"api/root.python/#initializers_19","title":"Initializers","text":"<pre><code>import gcix\ngcix.TriggerJob(\nbranch: str = None,\nincludes: typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]] = None,\nname: str = None,\nproject: str = None,\nstage: str = None,\nstrategy: str = None\n)\n</code></pre> Name Type Description <code>branch</code> <code>str</code> No description. <code>includes</code> <code>typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]]</code> No description. <code>name</code> <code>str</code> No description. <code>project</code> <code>str</code> No description. <code>stage</code> <code>str</code> No description. <code>strategy</code> <code>str</code> No description."},{"location":"api/root.python/#branchoptional_1","title":"<code>branch</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#includesoptional_3","title":"<code>includes</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]]</li> </ul>"},{"location":"api/root.python/#nameoptional_10","title":"<code>name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#projectoptional_4","title":"<code>project</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#stageoptional_7","title":"<code>stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#strategyoptional_1","title":"<code>strategy</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#methods_18","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_allow_failure</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>get_all_instance_names</code> Return all instance names from the given child. <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#add_dependencies_4","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#dependenciesrequired_10","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_needs_4","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#needsrequired_10","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_parent_4","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/root.python/#parentrequired_4","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[Job, JobCollection]</li> </ul>"},{"location":"api/root.python/#add_tags_4","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#tagsrequired_12","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#add_variables_5","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#variablesrequired_10","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#append_rules_4","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#rulesrequired_12","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#append_scripts_4","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_12","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#assign_allow_failure_2","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#allow_failurerequired_8","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#assign_artifacts_4","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#artifactsrequired_6","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#assign_cache_4","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#cacherequired_6","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#assign_dependencies_2","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#dependenciesrequired_11","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#assign_image_2","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/root.python/#imagerequired_6","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#assign_needs_2","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#needsrequired_11","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#assign_tags_2","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#tagsrequired_13","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#copy_2","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/root.python/#extend_name_2","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/root.python/#namerequired_13","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#extend_stage_2","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/root.python/#stagerequired_5","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#extend_stage_value_2","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/root.python/#stagerequired_6","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#get_all_instance_names_4","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/root.python/#childoptional_4","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[Job, JobCollection]</li> </ul>"},{"location":"api/root.python/#is_equal_17","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_17","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.python/#prepend_rules_4","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#rulesrequired_13","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#prepend_scripts_4","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_13","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#render_17","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#properties_43","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>allow_failure</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>name</code> <code>str</code> No description. <code>ordered_tags</code> <code>OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[Job, JobCollection]]</code> No description. <code>scripts</code> <code>typing.List[str]</code> No description. <code>stage</code> <code>str</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>image</code> <code>Image</code> No description. <code>needs</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>original</code> <code>Job</code> No description. <code>rules</code> <code>typing.List[Rule]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>branch</code> <code>str</code> The branch of <code>project</code> the pipeline should be triggered of. <code>includes</code> <code>typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]]</code> Include a pipeline to trigger (Parent-child pipeline trigger) Mutually exclusiv with <code>project</code>. <code>project</code> <code>str</code> The full name of another Gitlab project to trigger (multi-project pipeline trigger). <code>strategy</code> <code>str</code> Determines if the result of this pipeline depends on the triggered downstream pipeline (use <code>TriggerStrategy.DEPEND</code>) or if just \"fire and forget\" the downstream pipeline (use <code>None</code>)."},{"location":"api/root.python/#tagsrequired_14","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/root.python/#allow_failurerequired_9","title":"<code>allow_failure</code><sup>Required</sup>","text":"<pre><code>allow_failure: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#namerequired_14","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#ordered_tagsrequired_4","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#parentsrequired_4","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection]]</li> </ul>"},{"location":"api/root.python/#scriptsrequired_14","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>scripts: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#stagerequired_7","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>stage: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#artifactsoptional_9","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#cacheoptional_6","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#dependenciesoptional_6","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#imageoptional_4","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>image: Image\n</code></pre> <ul> <li>Type: Image</li> </ul>"},{"location":"api/root.python/#needsoptional_6","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#originaloptional_2","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: Job</li> </ul>"},{"location":"api/root.python/#rulesoptional_4","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>rules: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#variablesoptional_8","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#branchoptional_2","title":"<code>branch</code><sup>Optional</sup>","text":"<pre><code>branch: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The branch of <code>project</code> the pipeline should be triggered of.</p>"},{"location":"api/root.python/#includesoptional_4","title":"<code>includes</code><sup>Optional</sup>","text":"<pre><code>includes: typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]]</li> </ul> <p>Include a pipeline to trigger (Parent-child pipeline trigger) Mutually exclusiv with <code>project</code>.</p>"},{"location":"api/root.python/#projectoptional_5","title":"<code>project</code><sup>Optional</sup>","text":"<pre><code>project: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The full name of another Gitlab project to trigger (multi-project pipeline trigger).</p> <p>Mutually exclusive with <code>includes</code>.</p>"},{"location":"api/root.python/#strategyoptional_2","title":"<code>strategy</code><sup>Optional</sup>","text":"<pre><code>strategy: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Determines if the result of this pipeline depends on the triggered downstream pipeline (use <code>TriggerStrategy.DEPEND</code>) or if just \"fire and forget\" the downstream pipeline (use <code>None</code>).</p>"},{"location":"api/root.python/#protocols","title":"Protocols","text":""},{"location":"api/root.python/#iartifacts","title":"IArtifacts","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: Artifacts, IArtifacts</p> </li> </ul>"},{"location":"api/root.python/#methods_19","title":"Methods","text":"Name Description <code>add_excludes</code> No description. <code>add_paths</code> No description."},{"location":"api/root.python/#add_excludes_1","title":"<code>add_excludes</code>","text":"<pre><code>def add_excludes(\nexcludes: typing.List[str]\n) -&gt; None\n</code></pre>"},{"location":"api/root.python/#excludesrequired_2","title":"<code>excludes</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#add_paths_1","title":"<code>add_paths</code>","text":"<pre><code>def add_paths(\npaths: typing.List[str]\n) -&gt; None\n</code></pre>"},{"location":"api/root.python/#pathsrequired_5","title":"<code>paths</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#properties_44","title":"Properties","text":"Name Type Description <code>excludes</code> <code>typing.List[str]</code> No description. <code>paths</code> <code>typing.List[str]</code> No description. <code>expire_in</code> <code>str</code> No description. <code>expose_as</code> <code>str</code> No description. <code>name</code> <code>str</code> No description. <code>public</code> <code>bool</code> No description. <code>reports</code> <code>typing.List[ArtifactsReport]</code> No description. <code>untracked</code> <code>bool</code> No description. <code>when</code> <code>WhenStatement</code> No description."},{"location":"api/root.python/#excludesrequired_3","title":"<code>excludes</code><sup>Required</sup>","text":"<pre><code>excludes: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#pathsrequired_6","title":"<code>paths</code><sup>Required</sup>","text":"<pre><code>paths: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#expire_inoptional_3","title":"<code>expire_in</code><sup>Optional</sup>","text":"<pre><code>expire_in: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#expose_asoptional_3","title":"<code>expose_as</code><sup>Optional</sup>","text":"<pre><code>expose_as: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#nameoptional_11","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#publicoptional_3","title":"<code>public</code><sup>Optional</sup>","text":"<pre><code>public: bool\n</code></pre> <ul> <li>Type: bool</li> </ul>"},{"location":"api/root.python/#reportsoptional_3","title":"<code>reports</code><sup>Optional</sup>","text":"<pre><code>reports: typing.List[ArtifactsReport]\n</code></pre> <ul> <li>Type: typing.List[ArtifactsReport]</li> </ul>"},{"location":"api/root.python/#untrackedoptional_6","title":"<code>untracked</code><sup>Optional</sup>","text":"<pre><code>untracked: bool\n</code></pre> <ul> <li>Type: bool</li> </ul>"},{"location":"api/root.python/#whenoptional_9","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>when: WhenStatement\n</code></pre> <ul> <li>Type: WhenStatement</li> </ul>"},{"location":"api/root.python/#ibase","title":"IBase","text":"<ul> <li>Implemented By: gcix.aws.CdkBootstrap, gcix.aws.CdkDeploy, gcix.aws.CdkDiff, gcix.aws.CdkDiffDeploy, gcix.aws.CdkMirrorToCodecommit, gcix.container.BuildContainerCollection, gcix.container.CopyContainerCollection, gcix.container.CraneCopy, gcix.container.CranePull, gcix.container.CranePush, gcix.container.DiveScan, gcix.container.DockerBuild, gcix.container.DockerPush, gcix.container.KanikoExecute, gcix.container.TrivyIgnoreFileCheck, gcix.container.TrivyScanLocalImage, gcix.git.GitMirror, gcix.gitlab.PagesAsciiDoctor, gcix.gitlab.PagesPdoc3, gcix.gitlab.PagesSphinx, gcix.python.PythonBuildBdistWheel, gcix.python.PythonDeployTwineUpload, gcix.python.PythonFullStack, gcix.python.PythonLintFlake8, gcix.python.PythonLintIsort, gcix.python.PythonLintMyPy, gcix.python.PythonTestEvaluateGitTagPep440Conformity, gcix.python.PythonTestPytest, Artifacts, Cache, CacheKey, Image, Include, IncludeArtifact, IncludeFile, IncludeLocal, IncludeRemote, IncludeTemplate, Job, JobCollection, Need, PagesJob, Pipeline, Rule, Service, TriggerJob, IArtifacts, IBase, ICache, ICacheKey, IInclude, IIncludeArtifact, IIncludeFile, IIncludeLocal, IIncludeRemote, IIncludeTemplate, IJob, IJobBase, IJobCollection, IJobCollectionBase, INeed, IRule, IService</li> </ul>"},{"location":"api/root.python/#methods_20","title":"Methods","text":"Name Description <code>is_equal</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.python/#is_equal_18","title":"<code>is_equal</code>","text":"<pre><code>def is_equal(\ncomparable: IBase\n) -&gt; bool\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.python/#comparablerequired_18","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul> <p>An arbitrary object to compare to.</p>"},{"location":"api/root.python/#render_18","title":"<code>render</code>","text":"<pre><code>def render() -&gt; typing.Any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.python/#icache","title":"ICache","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: Cache, ICache</p> </li> </ul>"},{"location":"api/root.python/#icachekey","title":"ICacheKey","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: CacheKey, ICacheKey</p> </li> </ul>"},{"location":"api/root.python/#iimage","title":"IImage","text":"<ul> <li>Implemented By: Image, IImage</li> </ul>"},{"location":"api/root.python/#methods_21","title":"Methods","text":"Name Description <code>with_entrypoint</code> No description. <code>with_tag</code> No description."},{"location":"api/root.python/#with_entrypoint_1","title":"<code>with_entrypoint</code>","text":"<pre><code>def with_entrypoint(\nentrypoint: typing.List[str]\n) -&gt; Image\n</code></pre>"},{"location":"api/root.python/#entrypointrequired_1","title":"<code>entrypoint</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#with_tag_1","title":"<code>with_tag</code>","text":"<pre><code>def with_tag(\ntag: str\n) -&gt; Image\n</code></pre>"},{"location":"api/root.python/#tagrequired_1","title":"<code>tag</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#iinclude","title":"IInclude","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: Include, IncludeArtifact, IncludeFile, IncludeLocal, IncludeRemote, IncludeTemplate, IInclude, IIncludeArtifact, IIncludeFile, IIncludeLocal, IIncludeRemote, IIncludeTemplate</p> </li> </ul> <p>This module represents the Gitlab CI Include keyword.</p> <p>Use include to include external YAML files in your CI/CD configuration.</p> <p>include:local example:</p> <pre><code>pipeline.addInclude(new IncludeLocal({local: \"/templates/.gitlab-ci-template.yml\"}))\n</code></pre> <p>include:file example:</p> <pre><code>pipeline.addInclude(new IncludeFile({\n        project=\"my-group/my-project\",\n        ref=\"master\",\n        file=\"/templates/.gitlab-ci-template.yml\"\n    }))\n</code></pre> <p>include:remote example:</p> <pre><code>pipeline.addInclude(new IncludeRemote({\n         remote: \"https://gitlab.com/example-project/-/raw/master/.gitlab-ci.yml\"\n     }))\n</code></pre> <p>include:template example:</p> <pre><code>pipeline.addInclude(new IncludeTemplate({template: \"Auto-DevOps.gitlab-ci.yml\"}))\n</code></pre> <p>Special type of include: Use a <code>gcix.TriggerJob</code> with <code>IncludeArtifact</code> to run a child pipeline with a generated configuration file from a previous job:</p> <pre><code>new TriggerJob({includes=[IncludeArtifact(job=\"generate-config\", artifact=\"generated-config.yml\")]})\n</code></pre>"},{"location":"api/root.python/#iincludeartifact","title":"IIncludeArtifact","text":"<ul> <li> <p>Extends: IInclude</p> </li> <li> <p>Implemented By: IncludeArtifact, IIncludeArtifact</p> </li> </ul>"},{"location":"api/root.python/#iincludefile","title":"IIncludeFile","text":"<ul> <li> <p>Extends: IInclude</p> </li> <li> <p>Implemented By: IncludeFile, IIncludeFile</p> </li> </ul>"},{"location":"api/root.python/#iincludelocal","title":"IIncludeLocal","text":"<ul> <li> <p>Extends: IInclude</p> </li> <li> <p>Implemented By: IncludeLocal, IIncludeLocal</p> </li> </ul>"},{"location":"api/root.python/#iincluderemote","title":"IIncludeRemote","text":"<ul> <li> <p>Extends: IInclude</p> </li> <li> <p>Implemented By: IncludeRemote, IIncludeRemote</p> </li> </ul>"},{"location":"api/root.python/#iincludetemplate","title":"IIncludeTemplate","text":"<ul> <li> <p>Extends: IInclude</p> </li> <li> <p>Implemented By: IncludeTemplate, IIncludeTemplate</p> </li> </ul>"},{"location":"api/root.python/#ijob","title":"IJob","text":"<ul> <li> <p>Extends: IJobBase</p> </li> <li> <p>Implemented By: gcix.aws.CdkBootstrap, gcix.aws.CdkDeploy, gcix.aws.CdkDiff, gcix.aws.CdkMirrorToCodecommit, gcix.container.CraneCopy, gcix.container.CranePull, gcix.container.CranePush, gcix.container.DiveScan, gcix.container.DockerBuild, gcix.container.DockerPush, gcix.container.KanikoExecute, gcix.container.TrivyIgnoreFileCheck, gcix.container.TrivyScanLocalImage, gcix.git.GitMirror, gcix.gitlab.PagesAsciiDoctor, gcix.gitlab.PagesPdoc3, gcix.gitlab.PagesSphinx, gcix.python.PythonBuildBdistWheel, gcix.python.PythonDeployTwineUpload, gcix.python.PythonLintFlake8, gcix.python.PythonLintIsort, gcix.python.PythonLintMyPy, gcix.python.PythonTestEvaluateGitTagPep440Conformity, gcix.python.PythonTestPytest, Job, PagesJob, TriggerJob, IJob</p> </li> </ul>"},{"location":"api/root.python/#methods_22","title":"Methods","text":"Name Description <code>add_parent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>assign_allow_failure</code> No description. <code>assign_dependencies</code> No description. <code>assign_image</code> Sets the image of this job. <code>assign_needs</code> No description. <code>assign_tags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extend_name</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extend_stage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extend_stage_value</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage."},{"location":"api/root.python/#add_parent_5","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: typing.Union[Job, JobCollection]\n) -&gt; None\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/root.python/#parentrequired_5","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[Job, JobCollection]</li> </ul> <p>any type of Job or JobCollection.</p>"},{"location":"api/root.python/#assign_allow_failure_3","title":"<code>assign_allow_failure</code>","text":"<pre><code>def assign_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#allow_failurerequired_10","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#assign_dependencies_3","title":"<code>assign_dependencies</code>","text":"<pre><code>def assign_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#dependenciesrequired_12","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#assign_image_3","title":"<code>assign_image</code>","text":"<pre><code>def assign_image(\nimage: typing.Union[str, Image]\n) -&gt; Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/root.python/#imagerequired_7","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#assign_needs_3","title":"<code>assign_needs</code>","text":"<pre><code>def assign_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#needsrequired_12","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#assign_tags_3","title":"<code>assign_tags</code>","text":"<pre><code>def assign_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#tagsrequired_15","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#copy_3","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/root.python/#extend_name_3","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/root.python/#namerequired_15","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>to append to the current name.</p>"},{"location":"api/root.python/#extend_stage_3","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/root.python/#stagerequired_8","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>name to extend the stage and the name.</p>"},{"location":"api/root.python/#extend_stage_value_3","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nstage: str\n) -&gt; None\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/root.python/#stagerequired_9","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>name to extend the stage.</p>"},{"location":"api/root.python/#properties_45","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags. <code>original</code> <code>Job</code> No description."},{"location":"api/root.python/#tagsrequired_16","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/root.python/#originaloptional_3","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>original: Job\n</code></pre> <ul> <li>Type: Job</li> </ul>"},{"location":"api/root.python/#ijobbase","title":"IJobBase","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: gcix.aws.CdkBootstrap, gcix.aws.CdkDeploy, gcix.aws.CdkDiff, gcix.aws.CdkMirrorToCodecommit, gcix.container.CraneCopy, gcix.container.CranePull, gcix.container.CranePush, gcix.container.DiveScan, gcix.container.DockerBuild, gcix.container.DockerPush, gcix.container.KanikoExecute, gcix.container.TrivyIgnoreFileCheck, gcix.container.TrivyScanLocalImage, gcix.git.GitMirror, gcix.gitlab.PagesAsciiDoctor, gcix.gitlab.PagesPdoc3, gcix.gitlab.PagesSphinx, gcix.python.PythonBuildBdistWheel, gcix.python.PythonDeployTwineUpload, gcix.python.PythonLintFlake8, gcix.python.PythonLintIsort, gcix.python.PythonLintMyPy, gcix.python.PythonTestEvaluateGitTagPep440Conformity, gcix.python.PythonTestPytest, Job, PagesJob, TriggerJob, IJob, IJobBase</p> </li> </ul>"},{"location":"api/root.python/#methods_23","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>get_all_instance_names</code> Return all instance names from the given child. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description."},{"location":"api/root.python/#add_dependencies_5","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#dependenciesrequired_13","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_needs_5","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#needsrequired_13","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_tags_5","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#tagsrequired_17","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#add_variables_6","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#variablesrequired_11","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#append_rules_5","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#rulesrequired_14","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#append_scripts_5","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_15","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#assign_artifacts_5","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#artifactsrequired_7","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#assign_cache_5","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#cacherequired_7","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#get_all_instance_names_5","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/root.python/#childoptional_5","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[Job, JobCollection]</li> </ul>"},{"location":"api/root.python/#prepend_rules_5","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#rulesrequired_15","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#prepend_scripts_5","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; Job\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_16","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#properties_46","title":"Properties","text":"Name Type Description <code>tags</code> <code>typing.List[str]</code> Getter method to receive added tags."},{"location":"api/root.python/#tagsrequired_18","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>tags: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/root.python/#ijobcollection","title":"IJobCollection","text":"<ul> <li> <p>Extends: IJobCollectionBase</p> </li> <li> <p>Implemented By: gcix.aws.CdkDiffDeploy, gcix.container.BuildContainerCollection, gcix.container.CopyContainerCollection, gcix.python.PythonFullStack, JobCollection, Pipeline, IJobCollection</p> </li> </ul>"},{"location":"api/root.python/#methods_24","title":"Methods","text":"Name Description <code>add_children</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>add_parent</code> No description. <code>initialize_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initialize_artifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initialize_cache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initialize_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initialize_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initialize_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initialize_rules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initialize_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initialize_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>override_allow_failure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_dependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>override_image</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>override_needs</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>override_rules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>override_tags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>override_variables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs."},{"location":"api/root.python/#add_children_2","title":"<code>add_children</code>","text":"<pre><code>def add_children(\njobs_or_job_collections: typing.List[typing.Union[Job, JobCollection]],\nname: str = None,\nstage: str = None\n) -&gt; JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/root.python/#jobs_or_job_collectionsrequired_3","title":"<code>jobs_or_job_collections</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection]]</li> </ul>"},{"location":"api/root.python/#nameoptional_12","title":"<code>name</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#stageoptional_8","title":"<code>stage</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#add_parent_6","title":"<code>add_parent</code>","text":"<pre><code>def add_parent(\nparent: JobCollection\n) -&gt; None\n</code></pre>"},{"location":"api/root.python/#parentrequired_6","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: JobCollection</li> </ul>"},{"location":"api/root.python/#initialize_allow_failure_2","title":"<code>initialize_allow_failure</code>","text":"<pre><code>def initialize_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/root.python/#allow_failurerequired_11","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul> <p>???</p>"},{"location":"api/root.python/#initialize_artifacts_2","title":"<code>initialize_artifacts</code>","text":"<pre><code>def initialize_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/root.python/#artifactsrequired_8","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul> <p>???</p>"},{"location":"api/root.python/#initialize_cache_2","title":"<code>initialize_cache</code>","text":"<pre><code>def initialize_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/root.python/#cacherequired_8","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul> <p>???</p>"},{"location":"api/root.python/#initialize_dependencies_2","title":"<code>initialize_dependencies</code>","text":"<pre><code>def initialize_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/root.python/#dependenciesrequired_14","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul> <p>???</p>"},{"location":"api/root.python/#initialize_image_2","title":"<code>initialize_image</code>","text":"<pre><code>def initialize_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/root.python/#imagerequired_8","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Image]</li> </ul> <p>???</p>"},{"location":"api/root.python/#initialize_needs_2","title":"<code>initialize_needs</code>","text":"<pre><code>def initialize_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/root.python/#needsrequired_14","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul> <p>???</p>"},{"location":"api/root.python/#initialize_rules_2","title":"<code>initialize_rules</code>","text":"<pre><code>def initialize_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/root.python/#rulesrequired_16","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul> <p>???</p>"},{"location":"api/root.python/#initialize_tags_2","title":"<code>initialize_tags</code>","text":"<pre><code>def initialize_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/root.python/#tagsrequired_19","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul> <p>???</p>"},{"location":"api/root.python/#initialize_variables_2","title":"<code>initialize_variables</code>","text":"<pre><code>def initialize_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/root.python/#variablesrequired_12","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul> <p>???</p>"},{"location":"api/root.python/#override_allow_failure_2","title":"<code>override_allow_failure</code>","text":"<pre><code>def override_allow_failure(\nallow_failure: typing.Union[bool, typing.List[typing.Union[int, float]]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/root.python/#allow_failurerequired_12","title":"<code>allow_failure</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[bool, typing.List[typing.Union[int, float]]]</li> </ul> <p>???</p>"},{"location":"api/root.python/#override_dependencies_2","title":"<code>override_dependencies</code>","text":"<pre><code>def override_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/root.python/#dependenciesrequired_15","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul> <p>???</p>"},{"location":"api/root.python/#override_image_2","title":"<code>override_image</code>","text":"<pre><code>def override_image(\nimage: typing.Union[str, Image]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/root.python/#imagerequired_9","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Union[str, Image]</li> </ul> <p>???</p>"},{"location":"api/root.python/#override_needs_2","title":"<code>override_needs</code>","text":"<pre><code>def override_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/root.python/#needsrequired_15","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul> <p>???</p>"},{"location":"api/root.python/#override_rules_2","title":"<code>override_rules</code>","text":"<pre><code>def override_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/root.python/#rulesrequired_17","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul> <p>???</p>"},{"location":"api/root.python/#override_tags_2","title":"<code>override_tags</code>","text":"<pre><code>def override_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/root.python/#tagsrequired_20","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul> <p>???</p>"},{"location":"api/root.python/#override_variables_2","title":"<code>override_variables</code>","text":"<pre><code>def override_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/root.python/#variablesrequired_13","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul> <p>???</p>"},{"location":"api/root.python/#properties_47","title":"Properties","text":"Name Type Description <code>last_jobs_executed</code> <code>typing.List[Job]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nested_jobs</code> <code>typing.List[Job]</code> No description. <code>populated_jobs</code> <code>typing.List[Job]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>typing.List[ChildDict]</code> No description. <code>ordered_tags</code> <code>OrderedStringSet</code> No description. <code>ordered_tags_for_initialization</code> <code>OrderedStringSet</code> No description. <code>ordered_tags_for_replacement</code> <code>OrderedStringSet</code> No description. <code>parents</code> <code>typing.List[typing.Union[Job, JobCollection]]</code> No description. <code>allow_failure_for_initialization</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>allow_failure_for_replacement</code> <code>typing.Union[str, bool, typing.List[typing.Union[int, float]]]</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>artifacts_for_initialization</code> <code>Artifacts</code> No description. <code>artifacts_for_replacement</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>cache_for_initialization</code> <code>Cache</code> No description. <code>dependencies</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>dependencies_for_initialization</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>dependencies_for_replacement</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>image_for_initialization</code> <code>typing.Union[str, Image]</code> No description. <code>image_for_replacement</code> <code>typing.Union[str, Image]</code> No description. <code>needs</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>needs_for_initialization</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>needs_for_replacement</code> <code>typing.List[typing.Union[Job, JobCollection, Need]]</code> No description. <code>rules_for_initialization</code> <code>typing.List[Rule]</code> No description. <code>rules_for_replacement</code> <code>typing.List[Rule]</code> No description. <code>rules_to_append</code> <code>typing.List[Rule]</code> No description. <code>rules_to_prepend</code> <code>typing.List[Rule]</code> No description. <code>scripts_to_append</code> <code>typing.List[str]</code> No description. <code>scripts_to_prepend</code> <code>typing.List[str]</code> No description. <code>variables</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_initialization</code> <code>typing.Mapping[str]</code> No description. <code>variables_for_replacement</code> <code>typing.Mapping[str]</code> No description."},{"location":"api/root.python/#last_jobs_executedrequired_2","title":"<code>last_jobs_executed</code><sup>Required</sup>","text":"<pre><code>last_jobs_executed: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[Job]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/root.python/#nested_jobsrequired_2","title":"<code>nested_jobs</code><sup>Required</sup>","text":"<pre><code>nested_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[Job]</li> </ul>"},{"location":"api/root.python/#populated_jobsrequired_2","title":"<code>populated_jobs</code><sup>Required</sup>","text":"<pre><code>populated_jobs: typing.List[Job]\n</code></pre> <ul> <li>Type: typing.List[Job]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/root.python/#childrenrequired_2","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>children: typing.List[ChildDict]\n</code></pre> <ul> <li>Type: typing.List[ChildDict]</li> </ul>"},{"location":"api/root.python/#ordered_tagsrequired_5","title":"<code>ordered_tags</code><sup>Required</sup>","text":"<pre><code>ordered_tags: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#ordered_tags_for_initializationrequired_2","title":"<code>ordered_tags_for_initialization</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_initialization: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#ordered_tags_for_replacementrequired_2","title":"<code>ordered_tags_for_replacement</code><sup>Required</sup>","text":"<pre><code>ordered_tags_for_replacement: OrderedStringSet\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.python/#parentsrequired_5","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>parents: typing.List[typing.Union[Job, JobCollection]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection]]</li> </ul>"},{"location":"api/root.python/#allow_failure_for_initializationoptional_2","title":"<code>allow_failure_for_initialization</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_initialization: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#allow_failure_for_replacementoptional_2","title":"<code>allow_failure_for_replacement</code><sup>Optional</sup>","text":"<pre><code>allow_failure_for_replacement: typing.Union[str, bool, typing.List[typing.Union[int, float]]]\n</code></pre> <ul> <li>Type: typing.Union[str, bool, typing.List[typing.Union[int, float]]]</li> </ul>"},{"location":"api/root.python/#artifactsoptional_10","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>artifacts: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#artifacts_for_initializationoptional_2","title":"<code>artifacts_for_initialization</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_initialization: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#artifacts_for_replacementoptional_2","title":"<code>artifacts_for_replacement</code><sup>Optional</sup>","text":"<pre><code>artifacts_for_replacement: Artifacts\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#cacheoptional_7","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>cache: Cache\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#cache_for_initializationoptional_2","title":"<code>cache_for_initialization</code><sup>Optional</sup>","text":"<pre><code>cache_for_initialization: Cache\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#dependenciesoptional_7","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>dependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#dependencies_for_initializationoptional_2","title":"<code>dependencies_for_initialization</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#dependencies_for_replacementoptional_2","title":"<code>dependencies_for_replacement</code><sup>Optional</sup>","text":"<pre><code>dependencies_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#image_for_initializationoptional_2","title":"<code>image_for_initialization</code><sup>Optional</sup>","text":"<pre><code>image_for_initialization: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#image_for_replacementoptional_2","title":"<code>image_for_replacement</code><sup>Optional</sup>","text":"<pre><code>image_for_replacement: typing.Union[str, Image]\n</code></pre> <ul> <li>Type: typing.Union[str, Image]</li> </ul>"},{"location":"api/root.python/#needsoptional_7","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>needs: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#needs_for_initializationoptional_2","title":"<code>needs_for_initialization</code><sup>Optional</sup>","text":"<pre><code>needs_for_initialization: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#needs_for_replacementoptional_2","title":"<code>needs_for_replacement</code><sup>Optional</sup>","text":"<pre><code>needs_for_replacement: typing.List[typing.Union[Job, JobCollection, Need]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#rules_for_initializationoptional_2","title":"<code>rules_for_initialization</code><sup>Optional</sup>","text":"<pre><code>rules_for_initialization: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#rules_for_replacementoptional_2","title":"<code>rules_for_replacement</code><sup>Optional</sup>","text":"<pre><code>rules_for_replacement: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#rules_to_appendoptional_2","title":"<code>rules_to_append</code><sup>Optional</sup>","text":"<pre><code>rules_to_append: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#rules_to_prependoptional_2","title":"<code>rules_to_prepend</code><sup>Optional</sup>","text":"<pre><code>rules_to_prepend: typing.List[Rule]\n</code></pre> <ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#scripts_to_appendoptional_2","title":"<code>scripts_to_append</code><sup>Optional</sup>","text":"<pre><code>scripts_to_append: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#scripts_to_prependoptional_2","title":"<code>scripts_to_prepend</code><sup>Optional</sup>","text":"<pre><code>scripts_to_prepend: typing.List[str]\n</code></pre> <ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#variablesoptional_9","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>variables: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#variables_for_initializationoptional_2","title":"<code>variables_for_initialization</code><sup>Optional</sup>","text":"<pre><code>variables_for_initialization: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#variables_for_replacementoptional_2","title":"<code>variables_for_replacement</code><sup>Optional</sup>","text":"<pre><code>variables_for_replacement: typing.Mapping[str]\n</code></pre> <ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#ijobcollectionbase","title":"IJobCollectionBase","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: gcix.aws.CdkDiffDeploy, gcix.container.BuildContainerCollection, gcix.container.CopyContainerCollection, gcix.python.PythonFullStack, JobCollection, Pipeline, IJobCollection, IJobCollectionBase</p> </li> </ul>"},{"location":"api/root.python/#methods_25","title":"Methods","text":"Name Description <code>add_dependencies</code> No description. <code>add_needs</code> No description. <code>add_tags</code> No description. <code>add_variables</code> No description. <code>append_rules</code> No description. <code>append_scripts</code> No description. <code>assign_artifacts</code> No description. <code>assign_cache</code> No description. <code>get_all_instance_names</code> Return all instance names from the given child. <code>prepend_rules</code> No description. <code>prepend_scripts</code> No description."},{"location":"api/root.python/#add_dependencies_6","title":"<code>add_dependencies</code>","text":"<pre><code>def add_dependencies(\ndependencies: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#dependenciesrequired_16","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_needs_6","title":"<code>add_needs</code>","text":"<pre><code>def add_needs(\nneeds: typing.List[typing.Union[Job, JobCollection, Need]]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#needsrequired_16","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[typing.Union[Job, JobCollection, Need]]</li> </ul>"},{"location":"api/root.python/#add_tags_6","title":"<code>add_tags</code>","text":"<pre><code>def add_tags(\ntags: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#tagsrequired_21","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#add_variables_7","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#variablesrequired_14","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul>"},{"location":"api/root.python/#append_rules_6","title":"<code>append_rules</code>","text":"<pre><code>def append_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#rulesrequired_18","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#append_scripts_6","title":"<code>append_scripts</code>","text":"<pre><code>def append_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_17","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#assign_artifacts_6","title":"<code>assign_artifacts</code>","text":"<pre><code>def assign_artifacts(\nartifacts: Artifacts\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#artifactsrequired_9","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.python/#assign_cache_6","title":"<code>assign_cache</code>","text":"<pre><code>def assign_cache(\ncache: Cache\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#cacherequired_9","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.python/#get_all_instance_names_6","title":"<code>get_all_instance_names</code>","text":"<pre><code>def get_all_instance_names(\nchild: typing.Union[Job, JobCollection] = None\n) -&gt; OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/root.python/#childoptional_6","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: typing.Union[Job, JobCollection]</li> </ul>"},{"location":"api/root.python/#prepend_rules_6","title":"<code>prepend_rules</code>","text":"<pre><code>def prepend_rules(\nrules: typing.List[Rule]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#rulesrequired_19","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Rule]</li> </ul>"},{"location":"api/root.python/#prepend_scripts_6","title":"<code>prepend_scripts</code>","text":"<pre><code>def prepend_scripts(\nscripts: typing.List[str]\n) -&gt; JobCollection\n</code></pre>"},{"location":"api/root.python/#scriptsrequired_18","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[str]</li> </ul>"},{"location":"api/root.python/#ineed","title":"INeed","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: Need, INeed</p> </li> </ul>"},{"location":"api/root.python/#ipagesjob","title":"IPagesJob","text":"<ul> <li>Implemented By: PagesJob, IPagesJob</li> </ul>"},{"location":"api/root.python/#methods_26","title":"Methods","text":"Name Description <code>assign_stage</code> Set the name of this jobs stage to a value other than <code>pages</code>. <code>copy</code> There should be only one instance of this job, that is why this method does not return a copy of this job but the job itself. <code>extend_name</code> The jobs name <code>pages</code> is fixed and can't be altered. <code>extend_stage</code> The stage name can't be altered from parent sequences. <code>extend_stage_value</code> Extending the name of the stage is not allowed on this Job."},{"location":"api/root.python/#assign_stage_1","title":"<code>assign_stage</code>","text":"<pre><code>def assign_stage(\nstage: str\n) -&gt; PagesJob\n</code></pre> <p>Set the name of this jobs stage to a value other than <code>pages</code>.</p>"},{"location":"api/root.python/#stagerequired_10","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>A valid Gitlab CI Job stage name.</p>"},{"location":"api/root.python/#copy_4","title":"<code>copy</code>","text":"<pre><code>def copy() -&gt; Job\n</code></pre> <p>There should be only one instance of this job, that is why this method does not return a copy of this job but the job itself.</p>"},{"location":"api/root.python/#extend_name_4","title":"<code>extend_name</code>","text":"<pre><code>def extend_name(\nname: str\n) -&gt; None\n</code></pre> <p>The jobs name <code>pages</code> is fixed and can't be altered.</p>"},{"location":"api/root.python/#namerequired_16","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#extend_stage_4","title":"<code>extend_stage</code>","text":"<pre><code>def extend_stage(\nname: str\n) -&gt; None\n</code></pre> <p>The stage name can't be altered from parent sequences.</p>"},{"location":"api/root.python/#namerequired_17","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#extend_stage_value_4","title":"<code>extend_stage_value</code>","text":"<pre><code>def extend_stage_value(\nname: str\n) -&gt; None\n</code></pre> <p>Extending the name of the stage is not allowed on this Job.</p>"},{"location":"api/root.python/#namerequired_18","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#ipipeline","title":"IPipeline","text":"<ul> <li>Implemented By: Pipeline, IPipeline</li> </ul>"},{"location":"api/root.python/#methods_27","title":"Methods","text":"Name Description <code>add_include</code> Let you add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\". <code>add_services</code> Add one or more <code>gcix.Service</code>s to the pipeline. <code>write_yaml</code> Create the Gitlab CI YAML file from this pipeline object."},{"location":"api/root.python/#add_include_1","title":"<code>add_include</code>","text":"<pre><code>def add_include(\ninclude: Include\n) -&gt; Pipeline\n</code></pre> <p>Let you add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\".</p>"},{"location":"api/root.python/#includerequired_1","title":"<code>include</code><sup>Required</sup>","text":"<ul> <li>Type: Include</li> </ul>"},{"location":"api/root.python/#add_services_1","title":"<code>add_services</code>","text":"<pre><code>def add_services(\nservices: typing.List[Service]\n) -&gt; Pipeline\n</code></pre> <p>Add one or more <code>gcix.Service</code>s to the pipeline.</p> <p>Gitlab CI Documentation: \"The services keyword defines a Docker image that runs during a job linked to the Docker image that the image keyword defines.\"</p>"},{"location":"api/root.python/#servicesrequired_1","title":"<code>services</code><sup>Required</sup>","text":"<ul> <li>Type: typing.List[Service]</li> </ul> <p>simply use strings to name the services to link to the pipeline.</p> <p>Use objects of the <code>gcix.Service</code> class for more complex service configurations.</p>"},{"location":"api/root.python/#write_yaml_1","title":"<code>write_yaml</code>","text":"<pre><code>def write_yaml(\nfilename: str = None\n) -&gt; None\n</code></pre> <p>Create the Gitlab CI YAML file from this pipeline object.</p> <p>Use that YAML file to trigger a child pipeline.</p>"},{"location":"api/root.python/#filenameoptional_1","title":"<code>filename</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>the file name of the created yaml file.</p>"},{"location":"api/root.python/#properties_48","title":"Properties","text":"Name Type Description <code>includes</code> <code>typing.List[Include]</code> No description. <code>service</code> <code>typing.List[Service]</code> No description."},{"location":"api/root.python/#includesrequired_1","title":"<code>includes</code><sup>Required</sup>","text":"<pre><code>includes: typing.List[Include]\n</code></pre> <ul> <li>Type: typing.List[Include]</li> </ul>"},{"location":"api/root.python/#servicerequired_1","title":"<code>service</code><sup>Required</sup>","text":"<pre><code>service: typing.List[Service]\n</code></pre> <ul> <li>Type: typing.List[Service]</li> </ul>"},{"location":"api/root.python/#irule","title":"IRule","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: Rule, IRule</p> </li> </ul>"},{"location":"api/root.python/#methods_28","title":"Methods","text":"Name Description <code>add_variables</code> Adds one or more variables, each as keyword argument, to the rule. <code>never</code> This method is intended to be used for predefined rules."},{"location":"api/root.python/#add_variables_8","title":"<code>add_variables</code>","text":"<pre><code>def add_variables(\nvariables: typing.Mapping[str]\n) -&gt; Rule\n</code></pre> <p>Adds one or more variables, each as keyword argument, to the rule.</p> <pre><code>rule.addVariables({GREETING: \"hello\", LANGUAGE: \"typescript\"})\n</code></pre>"},{"location":"api/root.python/#variablesrequired_15","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: typing.Mapping[str]</li> </ul> <p>Each variable would be provided as keyword argument:.</p>"},{"location":"api/root.python/#never_1","title":"<code>never</code>","text":"<pre><code>def never() -&gt; Rule\n</code></pre> <p>This method is intended to be used for predefined rules.</p> <p>For instance you have defined an often used rule <code>on_master</code> whose if statement checks if the pipeline is executed on branch <code>master</code>. Then you can either run a job, if on master...</p> <pre><code>myJob.appendRules(onMaster)\n</code></pre> <p>... or do not run a job if on master...</p> <pre><code>myJob.appendRules(onMaster.never())\n</code></pre>"},{"location":"api/root.python/#iservice","title":"IService","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: Service, IService</p> </li> </ul>"},{"location":"api/root.python/#properties_49","title":"Properties","text":"Name Type Description <code>name</code> <code>str</code> No description."},{"location":"api/root.python/#namerequired_19","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>name: str\n</code></pre> <ul> <li>Type: str</li> </ul>"},{"location":"api/root.python/#itriggerjob","title":"ITriggerJob","text":"<ul> <li>Implemented By: TriggerJob, ITriggerJob</li> </ul>"},{"location":"api/root.python/#properties_50","title":"Properties","text":"Name Type Description <code>branch</code> <code>str</code> The branch of <code>project</code> the pipeline should be triggered of. <code>includes</code> <code>typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]]</code> Include a pipeline to trigger (Parent-child pipeline trigger) Mutually exclusiv with <code>project</code>. <code>project</code> <code>str</code> The full name of another Gitlab project to trigger (multi-project pipeline trigger). <code>strategy</code> <code>str</code> Determines if the result of this pipeline depends on the triggered downstream pipeline (use <code>TriggerStrategy.DEPEND</code>) or if just \"fire and forget\" the downstream pipeline (use <code>None</code>)."},{"location":"api/root.python/#branchoptional_3","title":"<code>branch</code><sup>Optional</sup>","text":"<pre><code>branch: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The branch of <code>project</code> the pipeline should be triggered of.</p>"},{"location":"api/root.python/#includesoptional_5","title":"<code>includes</code><sup>Optional</sup>","text":"<pre><code>includes: typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]]\n</code></pre> <ul> <li>Type: typing.List[typing.Union[IncludeLocal, IncludeFile, IncludeRemote, IncludeTemplate, IncludeArtifact]]</li> </ul> <p>Include a pipeline to trigger (Parent-child pipeline trigger) Mutually exclusiv with <code>project</code>.</p>"},{"location":"api/root.python/#projectoptional_6","title":"<code>project</code><sup>Optional</sup>","text":"<pre><code>project: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>The full name of another Gitlab project to trigger (multi-project pipeline trigger).</p> <p>Mutually exclusive with <code>includes</code>.</p>"},{"location":"api/root.python/#strategyoptional_3","title":"<code>strategy</code><sup>Optional</sup>","text":"<pre><code>strategy: str\n</code></pre> <ul> <li>Type: str</li> </ul> <p>Determines if the result of this pipeline depends on the triggered downstream pipeline (use <code>TriggerStrategy.DEPEND</code>) or if just \"fire and forget\" the downstream pipeline (use <code>None</code>).</p>"},{"location":"api/root.python/#enums","title":"Enums","text":""},{"location":"api/root.python/#cachepolicy","title":"CachePolicy","text":"<p>This enum represents the cache:policy keyword. The policy determines if a Job can modify the cache or read him only.</p>"},{"location":"api/root.python/#members","title":"Members","text":"Name Description <code>PULLPUSH</code> The default behavior of a caching job is to download the files at the start of execution and re-upload them at the end. <code>PULL</code> If you are certain that the job does not modify the cached files, you can specify this policy to skip the upload step."},{"location":"api/root.python/#pullpush","title":"<code>PULLPUSH</code>","text":"<p>The default behavior of a caching job is to download the files at the start of execution and re-upload them at the end.</p> <p>This behavior ensures that any changes made by the job are persisted for future runs.</p>"},{"location":"api/root.python/#pull","title":"<code>PULL</code>","text":"<p>If you are certain that the job does not modify the cached files, you can specify this policy to skip the upload step.</p> <p>By setting this policy, the job will only download the cached files at the start of execution without re-uploading them at the end.</p>"},{"location":"api/root.python/#whenstatement","title":"WhenStatement","text":"<p>This enum holds different when statements for <code>Rule</code>s.</p>"},{"location":"api/root.python/#members_1","title":"Members","text":"Name Description <code>ALWAYS</code> No description. <code>DELAYED</code> No description. <code>MANUAL</code> No description. <code>NEVER</code> No description. <code>ONFAILURE</code> No description. <code>ONSUCCESS</code> No description."},{"location":"api/root.python/#always","title":"<code>ALWAYS</code>","text":""},{"location":"api/root.python/#delayed","title":"<code>DELAYED</code>","text":""},{"location":"api/root.python/#manual","title":"<code>MANUAL</code>","text":""},{"location":"api/root.python/#never_2","title":"<code>NEVER</code>","text":""},{"location":"api/root.python/#onfailure","title":"<code>ONFAILURE</code>","text":""},{"location":"api/root.python/#onsuccess","title":"<code>ONSUCCESS</code>","text":""},{"location":"api/root.typescript/","title":"API Reference","text":""},{"location":"api/root.typescript/#structs","title":"Structs","text":""},{"location":"api/root.typescript/#addchildrenprops","title":"AddChildrenProps","text":""},{"location":"api/root.typescript/#initializer","title":"Initializer","text":"<pre><code>import { AddChildrenProps } from '@gcix/gcix'\nconst addChildrenProps: AddChildrenProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties","title":"Properties","text":"Name Type Description <code>jobsOrJobCollections</code> <code>Job | JobCollection[]</code> No description. <code>name</code> <code>string</code> No description. <code>stage</code> <code>string</code> No description."},{"location":"api/root.typescript/#jobsorjobcollectionsrequired","title":"<code>jobsOrJobCollections</code><sup>Required</sup>","text":"<pre><code>public readonly jobsOrJobCollections: Job | JobCollection[];\n</code></pre> <ul> <li>Type: Job | JobCollection[]</li> </ul>"},{"location":"api/root.typescript/#nameoptional","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#stageoptional","title":"<code>stage</code><sup>Optional</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#artifactsprops","title":"ArtifactsProps","text":""},{"location":"api/root.typescript/#initializer_1","title":"Initializer","text":"<pre><code>import { ArtifactsProps } from '@gcix/gcix'\nconst artifactsProps: ArtifactsProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_1","title":"Properties","text":"Name Type Description <code>excludes</code> <code>string[]</code> Paths that prevent files from being added to an artifacts archive. <code>expireIn</code> <code>string</code> How long the artifacts will be saved before it gets deleted. <code>exposeAs</code> <code>string</code> Used to expose artifacts in merge requests. <code>name</code> <code>string</code> Name of the artifacts archive. <code>paths</code> <code>string[]</code> Paths relative to project directory <code>$CI_PROJECT_DIR</code>, found files will be used to create the artifacts. <code>public</code> <code>boolean</code> True makes artifacts public. <code>reports</code> <code>ArtifactsReport[]</code> Reports must be a valid dictionary, the key represents a ArtifactsReport and the value must be a valid relativ file path to the reports file. <code>untracked</code> <code>boolean</code> If true adds all untracked file to artifacts archive. <code>when</code> <code>WhenStatement</code> When to upload artifacts, Only <code>on_success</code>, <code>on_failure</code> or <code>always</code> is allowed."},{"location":"api/root.typescript/#excludesoptional","title":"<code>excludes</code><sup>Optional</sup>","text":"<pre><code>public readonly excludes: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Paths that prevent files from being added to an artifacts archive.</p>"},{"location":"api/root.typescript/#expireinoptional","title":"<code>expireIn</code><sup>Optional</sup>","text":"<pre><code>public readonly expireIn: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>How long the artifacts will be saved before it gets deleted.</p>"},{"location":"api/root.typescript/#exposeasoptional","title":"<code>exposeAs</code><sup>Optional</sup>","text":"<pre><code>public readonly exposeAs: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Used to expose artifacts in merge requests.</p>"},{"location":"api/root.typescript/#nameoptional_1","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Name of the artifacts archive.</p> <p>Internally defaults to {PredefinedVariables.ciJobName}-{PredefinedVariables.ciCommitRefSlug}.</p>"},{"location":"api/root.typescript/#pathsoptional","title":"<code>paths</code><sup>Optional</sup>","text":"<pre><code>public readonly paths: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Paths relative to project directory <code>$CI_PROJECT_DIR</code>, found files will be used to create the artifacts.</p>"},{"location":"api/root.typescript/#publicoptional","title":"<code>public</code><sup>Optional</sup>","text":"<pre><code>public readonly public: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>True makes artifacts public.</p>"},{"location":"api/root.typescript/#reportsoptional","title":"<code>reports</code><sup>Optional</sup>","text":"<pre><code>public readonly reports: ArtifactsReport[];\n</code></pre> <ul> <li>Type: ArtifactsReport[]</li> </ul> <p>Reports must be a valid dictionary, the key represents a ArtifactsReport and the value must be a valid relativ file path to the reports file.</p>"},{"location":"api/root.typescript/#untrackedoptional","title":"<code>untracked</code><sup>Optional</sup>","text":"<pre><code>public readonly untracked: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>If true adds all untracked file to artifacts archive.</p>"},{"location":"api/root.typescript/#whenoptional","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>public readonly when: WhenStatement;\n</code></pre> <ul> <li>Type: WhenStatement</li> </ul> <p>When to upload artifacts, Only <code>on_success</code>, <code>on_failure</code> or <code>always</code> is allowed.</p>"},{"location":"api/root.typescript/#artifactsreport","title":"ArtifactsReport","text":""},{"location":"api/root.typescript/#initializer_2","title":"Initializer","text":"<pre><code>import { ArtifactsReport } from '@gcix/gcix'\nconst artifactsReport: ArtifactsReport = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_2","title":"Properties","text":"Name Type Description <code>file</code> <code>string</code> Relative path withing the project, where to find the generated report file. <code>reportType</code> <code>string</code> https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html ArtifactsReport type to use."},{"location":"api/root.typescript/#filerequired","title":"<code>file</code><sup>Required</sup>","text":"<pre><code>public readonly file: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Relative path withing the project, where to find the generated report file.</p>"},{"location":"api/root.typescript/#reporttyperequired","title":"<code>reportType</code><sup>Required</sup>","text":"<pre><code>public readonly reportType: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html ArtifactsReport type to use.</p>"},{"location":"api/root.typescript/#cachekeyprops","title":"CacheKeyProps","text":""},{"location":"api/root.typescript/#initializer_3","title":"Initializer","text":"<pre><code>import { CacheKeyProps } from '@gcix/gcix'\nconst cacheKeyProps: CacheKeyProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_3","title":"Properties","text":"Name Type Description <code>files</code> <code>string[]</code> No description. <code>key</code> <code>string</code> No description. <code>prefix</code> <code>string</code> No description."},{"location":"api/root.typescript/#filesoptional","title":"<code>files</code><sup>Optional</sup>","text":"<pre><code>public readonly files: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#keyoptional","title":"<code>key</code><sup>Optional</sup>","text":"<pre><code>public readonly key: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: gcix.PredefinedVariables.ciCommitRefSlug</li> </ul>"},{"location":"api/root.typescript/#prefixoptional","title":"<code>prefix</code><sup>Optional</sup>","text":"<pre><code>public readonly prefix: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#cacheprops","title":"CacheProps","text":""},{"location":"api/root.typescript/#initializer_4","title":"Initializer","text":"<pre><code>import { CacheProps } from '@gcix/gcix'\nconst cacheProps: CacheProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_4","title":"Properties","text":"Name Type Description <code>paths</code> <code>string[]</code> No description. <code>cacheKey</code> <code>CacheKey</code> No description. <code>policy</code> <code>CachePolicy</code> No description. <code>untracked</code> <code>boolean</code> Set the untracked keyword to <code>True</code> to cache all files that are untracked in your Git repository. <code>when</code> <code>WhenStatement</code> No description."},{"location":"api/root.typescript/#pathsrequired","title":"<code>paths</code><sup>Required</sup>","text":"<pre><code>public readonly paths: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#cachekeyoptional","title":"<code>cacheKey</code><sup>Optional</sup>","text":"<pre><code>public readonly cacheKey: CacheKey;\n</code></pre> <ul> <li>Type: CacheKey</li> <li>Default: to <code>CacheKey</code> with default arguments.</li> </ul>"},{"location":"api/root.typescript/#policyoptional","title":"<code>policy</code><sup>Optional</sup>","text":"<pre><code>public readonly policy: CachePolicy;\n</code></pre> <ul> <li>Type: CachePolicy</li> </ul>"},{"location":"api/root.typescript/#untrackedoptional_1","title":"<code>untracked</code><sup>Optional</sup>","text":"<pre><code>public readonly untracked: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul> <p>Set the untracked keyword to <code>True</code> to cache all files that are untracked in your Git repository.</p>"},{"location":"api/root.typescript/#whenoptional_1","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>public readonly when: WhenStatement;\n</code></pre> <ul> <li>Type: WhenStatement</li> </ul>"},{"location":"api/root.typescript/#childdict","title":"ChildDict","text":""},{"location":"api/root.typescript/#initializer_5","title":"Initializer","text":"<pre><code>import { ChildDict } from '@gcix/gcix'\nconst childDict: ChildDict = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_5","title":"Properties","text":"Name Type Description <code>child</code> <code>Job | JobCollection</code> No description. <code>name</code> <code>string</code> No description. <code>stage</code> <code>string</code> No description."},{"location":"api/root.typescript/#childrequired","title":"<code>child</code><sup>Required</sup>","text":"<pre><code>public readonly child: Job | JobCollection;\n</code></pre> <ul> <li>Type: Job | JobCollection</li> </ul>"},{"location":"api/root.typescript/#nameoptional_2","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#stageoptional_1","title":"<code>stage</code><sup>Optional</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#imageprops","title":"ImageProps","text":""},{"location":"api/root.typescript/#initializer_6","title":"Initializer","text":"<pre><code>import { ImageProps } from '@gcix/gcix'\nconst imageProps: ImageProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_6","title":"Properties","text":"Name Type Description <code>name</code> <code>string</code> No description. <code>entrypoint</code> <code>string[]</code> No description. <code>tag</code> <code>string</code> No description."},{"location":"api/root.typescript/#namerequired","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#entrypointoptional","title":"<code>entrypoint</code><sup>Optional</sup>","text":"<pre><code>public readonly entrypoint: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#tagoptional","title":"<code>tag</code><sup>Optional</sup>","text":"<pre><code>public readonly tag: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#includeartifactprops","title":"IncludeArtifactProps","text":""},{"location":"api/root.typescript/#initializer_7","title":"Initializer","text":"<pre><code>import { IncludeArtifactProps } from '@gcix/gcix'\nconst includeArtifactProps: IncludeArtifactProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_7","title":"Properties","text":"Name Type Description <code>artifact</code> <code>string</code> Relative path to the artifact which is produced by <code>job</code>. <code>job</code> <code>string</code> Job name to include the artifact from."},{"location":"api/root.typescript/#artifactrequired","title":"<code>artifact</code><sup>Required</sup>","text":"<pre><code>public readonly artifact: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Relative path to the artifact which is produced by <code>job</code>.</p>"},{"location":"api/root.typescript/#jobrequired","title":"<code>job</code><sup>Required</sup>","text":"<pre><code>public readonly job: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Job name to include the artifact from.</p>"},{"location":"api/root.typescript/#includefileprops","title":"IncludeFileProps","text":""},{"location":"api/root.typescript/#initializer_8","title":"Initializer","text":"<pre><code>import { IncludeFileProps } from '@gcix/gcix'\nconst includeFileProps: IncludeFileProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_8","title":"Properties","text":"Name Type Description <code>file</code> <code>string</code> Relative path to the file to include. <code>project</code> <code>string</code> Project to include the file from. <code>ref</code> <code>string</code> Project branch to include the file from."},{"location":"api/root.typescript/#filerequired_1","title":"<code>file</code><sup>Required</sup>","text":"<pre><code>public readonly file: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Relative path to the file to include.</p>"},{"location":"api/root.typescript/#projectrequired","title":"<code>project</code><sup>Required</sup>","text":"<pre><code>public readonly project: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Project to include the file from.</p>"},{"location":"api/root.typescript/#refoptional","title":"<code>ref</code><sup>Optional</sup>","text":"<pre><code>public readonly ref: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Project branch to include the file from.</p>"},{"location":"api/root.typescript/#includelocalprops","title":"IncludeLocalProps","text":""},{"location":"api/root.typescript/#initializer_9","title":"Initializer","text":"<pre><code>import { IncludeLocalProps } from '@gcix/gcix'\nconst includeLocalProps: IncludeLocalProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_9","title":"Properties","text":"Name Type Description <code>local</code> <code>string</code> Relative path to the file within this repository to include."},{"location":"api/root.typescript/#localrequired","title":"<code>local</code><sup>Required</sup>","text":"<pre><code>public readonly local: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Relative path to the file within this repository to include.</p>"},{"location":"api/root.typescript/#includeremoteprops","title":"IncludeRemoteProps","text":""},{"location":"api/root.typescript/#initializer_10","title":"Initializer","text":"<pre><code>import { IncludeRemoteProps } from '@gcix/gcix'\nconst includeRemoteProps: IncludeRemoteProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_10","title":"Properties","text":"Name Type Description <code>remote</code> <code>string</code> URL to include the file from."},{"location":"api/root.typescript/#remoterequired","title":"<code>remote</code><sup>Required</sup>","text":"<pre><code>public readonly remote: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>URL to include the file from.</p>"},{"location":"api/root.typescript/#includetemplateprops","title":"IncludeTemplateProps","text":""},{"location":"api/root.typescript/#initializer_11","title":"Initializer","text":"<pre><code>import { IncludeTemplateProps } from '@gcix/gcix'\nconst includeTemplateProps: IncludeTemplateProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_11","title":"Properties","text":"Name Type Description <code>template</code> <code>string</code> Gitlab template pipeline to include."},{"location":"api/root.typescript/#templaterequired","title":"<code>template</code><sup>Required</sup>","text":"<pre><code>public readonly template: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Gitlab template pipeline to include.</p>"},{"location":"api/root.typescript/#jobprops","title":"JobProps","text":""},{"location":"api/root.typescript/#initializer_12","title":"Initializer","text":"<pre><code>import { JobProps } from '@gcix/gcix'\nconst jobProps: JobProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_12","title":"Properties","text":"Name Type Description <code>scripts</code> <code>string[]</code> No description. <code>allowFailure</code> <code>boolean | number[]</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>dependencies</code> <code>Job | JobCollection[]</code> No description. <code>image</code> <code>string | Image</code> No description. <code>name</code> <code>string</code> No description. <code>needs</code> <code>Job | JobCollection | Need[]</code> No description. <code>rules</code> <code>Rule[]</code> No description. <code>stage</code> <code>string</code> No description. <code>tags</code> <code>string[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description."},{"location":"api/root.typescript/#scriptsrequired","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#allowfailureoptional","title":"<code>allowFailure</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailure: boolean | number[];\n</code></pre> <ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#artifactsoptional","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#cacheoptional","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#dependenciesoptional","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection[];\n</code></pre> <ul> <li>Type: Job | JobCollection[]</li> </ul>"},{"location":"api/root.typescript/#imageoptional","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: string | Image;\n</code></pre> <ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#nameoptional_3","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#needsoptional","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#rulesoptional","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#stageoptional_2","title":"<code>stage</code><sup>Optional</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#tagsoptional","title":"<code>tags</code><sup>Optional</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#variablesoptional","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#needprops","title":"NeedProps","text":""},{"location":"api/root.typescript/#initializer_13","title":"Initializer","text":"<pre><code>import { NeedProps } from '@gcix/gcix'\nconst needProps: NeedProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_13","title":"Properties","text":"Name Type Description <code>artifacts</code> <code>boolean</code> No description. <code>job</code> <code>string</code> No description. <code>pipeline</code> <code>string</code> No description. <code>project</code> <code>string</code> No description. <code>ref</code> <code>string</code> No description."},{"location":"api/root.typescript/#artifactsoptional_1","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: true</li> </ul>"},{"location":"api/root.typescript/#joboptional","title":"<code>job</code><sup>Optional</sup>","text":"<pre><code>public readonly job: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: undefined but requires <code>pipeline</code> to be set.</li> </ul>"},{"location":"api/root.typescript/#pipelineoptional","title":"<code>pipeline</code><sup>Optional</sup>","text":"<pre><code>public readonly pipeline: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: undefined which requires <code>job</code> to be set.</li> </ul>"},{"location":"api/root.typescript/#projectoptional","title":"<code>project</code><sup>Optional</sup>","text":"<pre><code>public readonly project: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: undefined</li> </ul>"},{"location":"api/root.typescript/#refoptional_1","title":"<code>ref</code><sup>Optional</sup>","text":"<pre><code>public readonly ref: string;\n</code></pre> <ul> <li>Type: string</li> <li>Default: undefined</li> </ul>"},{"location":"api/root.typescript/#pipelineprops","title":"PipelineProps","text":""},{"location":"api/root.typescript/#initializer_14","title":"Initializer","text":"<pre><code>import { PipelineProps } from '@gcix/gcix'\nconst pipelineProps: PipelineProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_14","title":"Properties","text":"Name Type Description <code>includes</code> <code>Include[]</code> You can add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\"."},{"location":"api/root.typescript/#includesoptional","title":"<code>includes</code><sup>Optional</sup>","text":"<pre><code>public readonly includes: Include[];\n</code></pre> <ul> <li>Type: Include[]</li> </ul> <p>You can add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\".</p>"},{"location":"api/root.typescript/#renderedimage","title":"RenderedImage","text":"<p>This module represents the Gitlab CI Image keyword. Use <code>Image</code> to specify a Docker image to use for the <code>gcix.Job</code>.</p> <p>Instances of this class are intended to be immutable. Image objects are typically defined in a central location and often reused throughout the codebase. Modifying an Image object at one place may result in unexpected changes at any other reference to that object. Therefore, this class does not provide any setter methods to modify its properties directly.</p> <p>However, you can create an altered copy of an Image object using the .withTag() and .withEntrypoint() methods. These methods return a new Image object with the specified modifications, allowing you to reuse the original Image object while making specific changes for a particular use case.</p> <p>By following this approach, you can maintain a central repository of Image objects and easily create customized versions as needed, without affecting the original object or introducing unintended side effects.</p>"},{"location":"api/root.typescript/#initializer_15","title":"Initializer","text":"<pre><code>import { RenderedImage } from '@gcix/gcix'\nconst renderedImage: RenderedImage = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_15","title":"Properties","text":"Name Type Description <code>name</code> <code>string</code> No description. <code>entrypoint</code> <code>string[]</code> No description."},{"location":"api/root.typescript/#namerequired_1","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#entrypointoptional_1","title":"<code>entrypoint</code><sup>Optional</sup>","text":"<pre><code>public readonly entrypoint: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#renderedincludeartifact","title":"RenderedIncludeArtifact","text":""},{"location":"api/root.typescript/#initializer_16","title":"Initializer","text":"<pre><code>import { RenderedIncludeArtifact } from '@gcix/gcix'\nconst renderedIncludeArtifact: RenderedIncludeArtifact = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_16","title":"Properties","text":"Name Type Description <code>artifact</code> <code>string</code> No description. <code>job</code> <code>string</code> No description."},{"location":"api/root.typescript/#artifactrequired_1","title":"<code>artifact</code><sup>Required</sup>","text":"<pre><code>public readonly artifact: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#jobrequired_1","title":"<code>job</code><sup>Required</sup>","text":"<pre><code>public readonly job: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#renderedincludefile","title":"RenderedIncludeFile","text":""},{"location":"api/root.typescript/#initializer_17","title":"Initializer","text":"<pre><code>import { RenderedIncludeFile } from '@gcix/gcix'\nconst renderedIncludeFile: RenderedIncludeFile = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_17","title":"Properties","text":"Name Type Description <code>file</code> <code>string</code> No description. <code>project</code> <code>string</code> No description. <code>ref</code> <code>string</code> No description."},{"location":"api/root.typescript/#filerequired_2","title":"<code>file</code><sup>Required</sup>","text":"<pre><code>public readonly file: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#projectrequired_1","title":"<code>project</code><sup>Required</sup>","text":"<pre><code>public readonly project: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#refoptional_2","title":"<code>ref</code><sup>Optional</sup>","text":"<pre><code>public readonly ref: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#renderedincludelocal","title":"RenderedIncludeLocal","text":""},{"location":"api/root.typescript/#initializer_18","title":"Initializer","text":"<pre><code>import { RenderedIncludeLocal } from '@gcix/gcix'\nconst renderedIncludeLocal: RenderedIncludeLocal = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_18","title":"Properties","text":"Name Type Description <code>local</code> <code>string</code> No description."},{"location":"api/root.typescript/#localrequired_1","title":"<code>local</code><sup>Required</sup>","text":"<pre><code>public readonly local: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#renderedincluderemote","title":"RenderedIncludeRemote","text":""},{"location":"api/root.typescript/#initializer_19","title":"Initializer","text":"<pre><code>import { RenderedIncludeRemote } from '@gcix/gcix'\nconst renderedIncludeRemote: RenderedIncludeRemote = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_19","title":"Properties","text":"Name Type Description <code>remote</code> <code>string</code> No description."},{"location":"api/root.typescript/#remoterequired_1","title":"<code>remote</code><sup>Required</sup>","text":"<pre><code>public readonly remote: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#renderedincludetemplate","title":"RenderedIncludeTemplate","text":""},{"location":"api/root.typescript/#initializer_20","title":"Initializer","text":"<pre><code>import { RenderedIncludeTemplate } from '@gcix/gcix'\nconst renderedIncludeTemplate: RenderedIncludeTemplate = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_20","title":"Properties","text":"Name Type Description <code>template</code> <code>string</code> No description."},{"location":"api/root.typescript/#templaterequired_1","title":"<code>template</code><sup>Required</sup>","text":"<pre><code>public readonly template: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#renderedjob","title":"RenderedJob","text":""},{"location":"api/root.typescript/#initializer_21","title":"Initializer","text":"<pre><code>import { RenderedJob } from '@gcix/gcix'\nconst renderedJob: RenderedJob = { ... }\n</code></pre>"},{"location":"api/root.typescript/#ruleprops","title":"RuleProps","text":""},{"location":"api/root.typescript/#initializer_22","title":"Initializer","text":"<pre><code>import { RuleProps } from '@gcix/gcix'\nconst ruleProps: RuleProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_21","title":"Properties","text":"Name Type Description <code>allowFailure</code> <code>boolean</code> No description. <code>changes</code> <code>string[]</code> No description. <code>exists</code> <code>string[]</code> No description. <code>ifStatement</code> <code>string</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>when</code> <code>WhenStatement</code> No description."},{"location":"api/root.typescript/#allowfailureoptional_1","title":"<code>allowFailure</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailure: boolean;\n</code></pre> <ul> <li>Type: boolean</li> <li>Default: false</li> </ul>"},{"location":"api/root.typescript/#changesoptional","title":"<code>changes</code><sup>Optional</sup>","text":"<pre><code>public readonly changes: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#existsoptional","title":"<code>exists</code><sup>Optional</sup>","text":"<pre><code>public readonly exists: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#ifstatementoptional","title":"<code>ifStatement</code><sup>Optional</sup>","text":"<pre><code>public readonly ifStatement: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#variablesoptional_1","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#whenoptional_2","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>public readonly when: WhenStatement;\n</code></pre> <ul> <li>Type: WhenStatement</li> <li>Default: WhenStatement.ON_SUCCESS.</li> </ul>"},{"location":"api/root.typescript/#serviceprops","title":"ServiceProps","text":""},{"location":"api/root.typescript/#initializer_23","title":"Initializer","text":"<pre><code>import { ServiceProps } from '@gcix/gcix'\nconst serviceProps: ServiceProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_22","title":"Properties","text":"Name Type Description <code>name</code> <code>string</code> No description."},{"location":"api/root.typescript/#namerequired_2","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#triggerjobprops","title":"TriggerJobProps","text":""},{"location":"api/root.typescript/#initializer_24","title":"Initializer","text":"<pre><code>import { TriggerJobProps } from '@gcix/gcix'\nconst triggerJobProps: TriggerJobProps = { ... }\n</code></pre>"},{"location":"api/root.typescript/#properties_23","title":"Properties","text":"Name Type Description <code>branch</code> <code>string</code> No description. <code>includes</code> <code>IncludeLocal | IncludeFile | IncludeRemote | IncludeTemplate | IncludeArtifact[]</code> No description. <code>name</code> <code>string</code> No description. <code>project</code> <code>string</code> No description. <code>stage</code> <code>string</code> No description. <code>strategy</code> <code>string</code> No description."},{"location":"api/root.typescript/#branchoptional","title":"<code>branch</code><sup>Optional</sup>","text":"<pre><code>public readonly branch: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#includesoptional_1","title":"<code>includes</code><sup>Optional</sup>","text":"<pre><code>public readonly includes: IncludeLocal | IncludeFile | IncludeRemote | IncludeTemplate | IncludeArtifact[];\n</code></pre> <ul> <li>Type: IncludeLocal | IncludeFile | IncludeRemote | IncludeTemplate | IncludeArtifact[]</li> </ul>"},{"location":"api/root.typescript/#nameoptional_4","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#projectoptional_1","title":"<code>project</code><sup>Optional</sup>","text":"<pre><code>public readonly project: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#stageoptional_3","title":"<code>stage</code><sup>Optional</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#strategyoptional","title":"<code>strategy</code><sup>Optional</sup>","text":"<pre><code>public readonly strategy: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#classes","title":"Classes","text":""},{"location":"api/root.typescript/#artifacts","title":"Artifacts","text":"<ul> <li>Implements: IArtifacts</li> </ul> <p>This class represents the artifacts keyword.</p> <p>Gitlab CI documentation: \"Use artifacts to specify a list of files and directories that are attached to the <code>gcix.Job</code> when it succeeds, fails, or always. [...] by default, <code>gcix.Job</code>s in later stages automatically download all the artifacts created by jobs in earlier stages. You can control artifact download behavior in Job's with dependencies.\"</p>"},{"location":"api/root.typescript/#initializers","title":"Initializers","text":"<pre><code>import { Artifacts } from '@gcix/gcix'\nnew Artifacts(props: ArtifactsProps)\n</code></pre> Name Type Description <code>props</code> <code>ArtifactsProps</code> No description."},{"location":"api/root.typescript/#propsrequired","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: ArtifactsProps</li> </ul>"},{"location":"api/root.typescript/#methods","title":"Methods","text":"Name Description <code>addExcludes</code> No description. <code>addPaths</code> No description. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#addexcludes","title":"<code>addExcludes</code>","text":"<pre><code>public addExcludes(excludes: string[]): void\n</code></pre>"},{"location":"api/root.typescript/#excludesrequired","title":"<code>excludes</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#addpaths","title":"<code>addPaths</code>","text":"<pre><code>public addPaths(paths: string[]): void\n</code></pre>"},{"location":"api/root.typescript/#pathsrequired_1","title":"<code>paths</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#isequal","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#render","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_24","title":"Properties","text":"Name Type Description <code>excludes</code> <code>string[]</code> No description. <code>paths</code> <code>string[]</code> No description. <code>expireIn</code> <code>string</code> No description. <code>exposeAs</code> <code>string</code> No description. <code>name</code> <code>string</code> No description. <code>public</code> <code>boolean</code> No description. <code>reports</code> <code>ArtifactsReport[]</code> No description. <code>untracked</code> <code>boolean</code> No description. <code>when</code> <code>WhenStatement</code> No description. <code>orderedExcludes</code> <code>OrderedStringSet</code> No description. <code>orderedPaths</code> <code>OrderedStringSet</code> No description."},{"location":"api/root.typescript/#excludesrequired_1","title":"<code>excludes</code><sup>Required</sup>","text":"<pre><code>public readonly excludes: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#pathsrequired_2","title":"<code>paths</code><sup>Required</sup>","text":"<pre><code>public readonly paths: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#expireinoptional_1","title":"<code>expireIn</code><sup>Optional</sup>","text":"<pre><code>public readonly expireIn: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#exposeasoptional_1","title":"<code>exposeAs</code><sup>Optional</sup>","text":"<pre><code>public readonly exposeAs: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#nameoptional_5","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#publicoptional_1","title":"<code>public</code><sup>Optional</sup>","text":"<pre><code>public readonly public: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul>"},{"location":"api/root.typescript/#reportsoptional_1","title":"<code>reports</code><sup>Optional</sup>","text":"<pre><code>public readonly reports: ArtifactsReport[];\n</code></pre> <ul> <li>Type: ArtifactsReport[]</li> </ul>"},{"location":"api/root.typescript/#untrackedoptional_2","title":"<code>untracked</code><sup>Optional</sup>","text":"<pre><code>public readonly untracked: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul>"},{"location":"api/root.typescript/#whenoptional_3","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>public readonly when: WhenStatement;\n</code></pre> <ul> <li>Type: WhenStatement</li> </ul>"},{"location":"api/root.typescript/#orderedexcludesrequired","title":"<code>orderedExcludes</code><sup>Required</sup>","text":"<pre><code>public readonly orderedExcludes: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#orderedpathsrequired","title":"<code>orderedPaths</code><sup>Required</sup>","text":"<pre><code>public readonly orderedPaths: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#cache","title":"Cache","text":"<ul> <li>Implements: ICache</li> </ul> <p>This class represents the cache keyword.</p> <p>Gitlab CI documentation:</p> <p>\"Use cache to specify a list of files and directories to cache between <code>gcix.Job</code>s. [...] Caching is shared between <code>gcix.Pipeline</code>s and <code>gcix.Job</code>s. Caches are restored before artifacts.\"</p>"},{"location":"api/root.typescript/#initializers_1","title":"Initializers","text":"<pre><code>import { Cache } from '@gcix/gcix'\nnew Cache(props: CacheProps)\n</code></pre> Name Type Description <code>props</code> <code>CacheProps</code> No description."},{"location":"api/root.typescript/#propsrequired_1","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: CacheProps</li> </ul>"},{"location":"api/root.typescript/#methods_1","title":"Methods","text":"Name Description <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#isequal_1","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_1","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#render_1","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_25","title":"Properties","text":"Name Type Description <code>cacheKey</code> <code>CacheKey</code> No description. <code>paths</code> <code>string[]</code> No description. <code>policy</code> <code>CachePolicy</code> No description. <code>untracked</code> <code>boolean</code> No description. <code>when</code> <code>WhenStatement</code> No description."},{"location":"api/root.typescript/#cachekeyrequired","title":"<code>cacheKey</code><sup>Required</sup>","text":"<pre><code>public readonly cacheKey: CacheKey;\n</code></pre> <ul> <li>Type: CacheKey</li> </ul>"},{"location":"api/root.typescript/#pathsrequired_3","title":"<code>paths</code><sup>Required</sup>","text":"<pre><code>public readonly paths: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#policyoptional_1","title":"<code>policy</code><sup>Optional</sup>","text":"<pre><code>public readonly policy: CachePolicy;\n</code></pre> <ul> <li>Type: CachePolicy</li> </ul>"},{"location":"api/root.typescript/#untrackedoptional_3","title":"<code>untracked</code><sup>Optional</sup>","text":"<pre><code>public readonly untracked: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul>"},{"location":"api/root.typescript/#whenoptional_4","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>public readonly when: WhenStatement;\n</code></pre> <ul> <li>Type: WhenStatement</li> </ul>"},{"location":"api/root.typescript/#cachekey","title":"CacheKey","text":"<ul> <li>Implements: ICacheKey</li> </ul> <p>This class represents the cache:key keyword.</p> <p>Gitlab CI documentation: \"The key keyword defines the affinity of caching between jobs. You can have a single cache for all jobs, cache per-job, cache per-branch, or any other way that fits your workflow.\"</p>"},{"location":"api/root.typescript/#initializers_2","title":"Initializers","text":"<pre><code>import { CacheKey } from '@gcix/gcix'\nnew CacheKey(props: CacheKeyProps)\n</code></pre> Name Type Description <code>props</code> <code>CacheKeyProps</code> No description."},{"location":"api/root.typescript/#propsrequired_2","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: CacheKeyProps</li> </ul>"},{"location":"api/root.typescript/#methods_2","title":"Methods","text":"Name Description <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#isequal_2","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_2","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#render_2","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_26","title":"Properties","text":"Name Type Description <code>files</code> <code>string[]</code> No description. <code>key</code> <code>string</code> No description. <code>prefix</code> <code>string</code> No description."},{"location":"api/root.typescript/#filesoptional_1","title":"<code>files</code><sup>Optional</sup>","text":"<pre><code>public readonly files: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#keyoptional_1","title":"<code>key</code><sup>Optional</sup>","text":"<pre><code>public readonly key: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#prefixoptional_1","title":"<code>prefix</code><sup>Optional</sup>","text":"<pre><code>public readonly prefix: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#image","title":"Image","text":"<ul> <li>Implements: IImage, IBase</li> </ul>"},{"location":"api/root.typescript/#initializers_3","title":"Initializers","text":"<pre><code>import { Image } from '@gcix/gcix'\nnew Image(props: ImageProps)\n</code></pre> Name Type Description <code>props</code> <code>ImageProps</code> No description."},{"location":"api/root.typescript/#propsrequired_3","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: ImageProps</li> </ul>"},{"location":"api/root.typescript/#methods_3","title":"Methods","text":"Name Description <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>. <code>withEntrypoint</code> No description. <code>withTag</code> No description."},{"location":"api/root.typescript/#isequal_3","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_3","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#render_3","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#withentrypoint","title":"<code>withEntrypoint</code>","text":"<pre><code>public withEntrypoint(entrypoint: string[]): Image\n</code></pre>"},{"location":"api/root.typescript/#entrypointrequired","title":"<code>entrypoint</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#withtag","title":"<code>withTag</code>","text":"<pre><code>public withTag(tag: string): Image\n</code></pre>"},{"location":"api/root.typescript/#tagrequired","title":"<code>tag</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#properties_27","title":"Properties","text":"Name Type Description <code>name</code> <code>string</code> No description. <code>entrypoint</code> <code>string[]</code> No description. <code>tag</code> <code>string</code> No description."},{"location":"api/root.typescript/#namerequired_3","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#entrypointoptional_2","title":"<code>entrypoint</code><sup>Optional</sup>","text":"<pre><code>public readonly entrypoint: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#tagoptional_1","title":"<code>tag</code><sup>Optional</sup>","text":"<pre><code>public readonly tag: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#include","title":"Include","text":"<ul> <li>Implements: IInclude</li> </ul> <p>This is just an abstract superclass.</p> <p>Please use one of the subclasses:</p> <ul> <li><code>IncludeLocal</code></li> <li><code>IncludeFile</code></li> <li><code>IncludeRemote</code></li> <li><code>IncludeTemplate</code></li> <li><code>IncludeArtifact</code></li> </ul>"},{"location":"api/root.typescript/#initializers_4","title":"Initializers","text":"<pre><code>import { Include } from '@gcix/gcix'\nnew Include()\n</code></pre> Name Type Description"},{"location":"api/root.typescript/#methods_4","title":"Methods","text":"Name Description <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#isequal_4","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_4","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#render_4","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_28","title":"Properties","text":"Name Type Description <code>rendered</code> <code>any</code> No description."},{"location":"api/root.typescript/#renderedrequired","title":"<code>rendered</code><sup>Required</sup>","text":"<pre><code>public readonly rendered: any;\n</code></pre> <ul> <li>Type: any</li> </ul>"},{"location":"api/root.typescript/#includeartifact","title":"IncludeArtifact","text":"<ul> <li>Implements: IIncludeArtifact</li> </ul>"},{"location":"api/root.typescript/#initializers_5","title":"Initializers","text":"<pre><code>import { IncludeArtifact } from '@gcix/gcix'\nnew IncludeArtifact(props: IncludeArtifactProps)\n</code></pre> Name Type Description <code>props</code> <code>IncludeArtifactProps</code> No description."},{"location":"api/root.typescript/#propsrequired_4","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: IncludeArtifactProps</li> </ul>"},{"location":"api/root.typescript/#methods_5","title":"Methods","text":"Name Description <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#isequal_5","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_5","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#render_5","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_29","title":"Properties","text":"Name Type Description <code>rendered</code> <code>any</code> No description."},{"location":"api/root.typescript/#renderedrequired_1","title":"<code>rendered</code><sup>Required</sup>","text":"<pre><code>public readonly rendered: any;\n</code></pre> <ul> <li>Type: any</li> </ul>"},{"location":"api/root.typescript/#includefile","title":"IncludeFile","text":"<ul> <li>Implements: IIncludeFile</li> </ul> <p>This module represents the Gitlab CI include:file keyword.</p>"},{"location":"api/root.typescript/#initializers_6","title":"Initializers","text":"<pre><code>import { IncludeFile } from '@gcix/gcix'\nnew IncludeFile(props: IncludeFileProps)\n</code></pre> Name Type Description <code>props</code> <code>IncludeFileProps</code> No description."},{"location":"api/root.typescript/#propsrequired_5","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: IncludeFileProps</li> </ul>"},{"location":"api/root.typescript/#methods_6","title":"Methods","text":"Name Description <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#isequal_6","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_6","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#render_6","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_30","title":"Properties","text":"Name Type Description <code>rendered</code> <code>any</code> No description."},{"location":"api/root.typescript/#renderedrequired_2","title":"<code>rendered</code><sup>Required</sup>","text":"<pre><code>public readonly rendered: any;\n</code></pre> <ul> <li>Type: any</li> </ul>"},{"location":"api/root.typescript/#includelocal","title":"IncludeLocal","text":"<ul> <li>Implements: IIncludeLocal</li> </ul> <p>This module represents the Gitlab CI include:local keyword.</p>"},{"location":"api/root.typescript/#initializers_7","title":"Initializers","text":"<pre><code>import { IncludeLocal } from '@gcix/gcix'\nnew IncludeLocal(props: IncludeLocalProps)\n</code></pre> Name Type Description <code>props</code> <code>IncludeLocalProps</code> No description."},{"location":"api/root.typescript/#propsrequired_6","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: IncludeLocalProps</li> </ul>"},{"location":"api/root.typescript/#methods_7","title":"Methods","text":"Name Description <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#isequal_7","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_7","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#render_7","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_31","title":"Properties","text":"Name Type Description <code>rendered</code> <code>any</code> No description."},{"location":"api/root.typescript/#renderedrequired_3","title":"<code>rendered</code><sup>Required</sup>","text":"<pre><code>public readonly rendered: any;\n</code></pre> <ul> <li>Type: any</li> </ul>"},{"location":"api/root.typescript/#includeremote","title":"IncludeRemote","text":"<ul> <li>Implements: IIncludeRemote</li> </ul>"},{"location":"api/root.typescript/#initializers_8","title":"Initializers","text":"<pre><code>import { IncludeRemote } from '@gcix/gcix'\nnew IncludeRemote(props: IncludeRemoteProps)\n</code></pre> Name Type Description <code>props</code> <code>IncludeRemoteProps</code> No description."},{"location":"api/root.typescript/#propsrequired_7","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: IncludeRemoteProps</li> </ul>"},{"location":"api/root.typescript/#methods_8","title":"Methods","text":"Name Description <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#isequal_8","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_8","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#render_8","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_32","title":"Properties","text":"Name Type Description <code>rendered</code> <code>any</code> No description."},{"location":"api/root.typescript/#renderedrequired_4","title":"<code>rendered</code><sup>Required</sup>","text":"<pre><code>public readonly rendered: any;\n</code></pre> <ul> <li>Type: any</li> </ul>"},{"location":"api/root.typescript/#includetemplate","title":"IncludeTemplate","text":"<ul> <li>Implements: IIncludeTemplate</li> </ul>"},{"location":"api/root.typescript/#initializers_9","title":"Initializers","text":"<pre><code>import { IncludeTemplate } from '@gcix/gcix'\nnew IncludeTemplate(props: IncludeTemplateProps)\n</code></pre> Name Type Description <code>props</code> <code>IncludeTemplateProps</code> No description."},{"location":"api/root.typescript/#propsrequired_8","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: IncludeTemplateProps</li> </ul>"},{"location":"api/root.typescript/#methods_9","title":"Methods","text":"Name Description <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#isequal_9","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_9","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#render_9","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_33","title":"Properties","text":"Name Type Description <code>rendered</code> <code>any</code> No description."},{"location":"api/root.typescript/#renderedrequired_5","title":"<code>rendered</code><sup>Required</sup>","text":"<pre><code>public readonly rendered: any;\n</code></pre> <ul> <li>Type: any</li> </ul>"},{"location":"api/root.typescript/#job","title":"Job","text":"<ul> <li>Implements: IJob</li> </ul> <p>This class represents the Gitlab CI Job.</p>"},{"location":"api/root.typescript/#initializers_10","title":"Initializers","text":"<pre><code>import { Job } from '@gcix/gcix'\nnew Job(props: JobProps)\n</code></pre> Name Type Description <code>props</code> <code>JobProps</code> No description."},{"location":"api/root.typescript/#propsrequired_9","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: JobProps</li> </ul>"},{"location":"api/root.typescript/#methods_10","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#adddependencies","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#dependenciesrequired","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addneeds","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#needsrequired","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addparent","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/root.typescript/#parentrequired","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection</li> </ul>"},{"location":"api/root.typescript/#addtags","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#tagsrequired","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#addvariables","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/root.typescript/#variablesrequired","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#appendrules","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#appendscripts","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_1","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#assignallowfailure","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/root.typescript/#allowfailurerequired","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#assignartifacts","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/root.typescript/#artifactsrequired","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#assigncache","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/root.typescript/#cacherequired","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#assigndependencies","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#dependenciesrequired_1","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#assignimage","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/root.typescript/#imagerequired","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#assignneeds","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#needsrequired_1","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#assigntags","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#tagsrequired_1","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#copy","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/root.typescript/#extendname","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/root.typescript/#namerequired_4","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#extendstage","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/root.typescript/#stagerequired","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#extendstagevalue","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/root.typescript/#stagerequired_1","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#getallinstancenames","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/root.typescript/#childoptional","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: Job | JobCollection</li> </ul>"},{"location":"api/root.typescript/#isequal_10","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_10","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#prependrules","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_1","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#prependscripts","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_2","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#render_10","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_34","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>OrderedStringSet</code> No description. <code>parents</code> <code>Job | JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>dependencies</code> <code>Job | JobCollection | Need[]</code> No description. <code>image</code> <code>Image</code> No description. <code>needs</code> <code>Job | JobCollection | Need[]</code> No description. <code>original</code> <code>Job</code> No description. <code>rules</code> <code>Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description."},{"location":"api/root.typescript/#tagsrequired_2","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/root.typescript/#allowfailurerequired_1","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#namerequired_5","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#orderedtagsrequired","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#parentsrequired","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: Job | JobCollection[]</li> </ul>"},{"location":"api/root.typescript/#scriptsrequired_3","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#stagerequired_2","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#artifactsoptional_2","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#cacheoptional_1","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#dependenciesoptional_1","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#imageoptional_1","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: Image</li> </ul>"},{"location":"api/root.typescript/#needsoptional_1","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#originaloptional","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: Job</li> </ul>"},{"location":"api/root.typescript/#rulesoptional_1","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#variablesoptional_2","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#jobcollection","title":"JobCollection","text":"<ul> <li>Implements: IJobCollection</li> </ul> <p>A JobCollection collects multiple <code>gcix.Job</code>s and/or other <code>gcix.JobCollection</code>s into a group.</p>"},{"location":"api/root.typescript/#initializers_11","title":"Initializers","text":"<pre><code>import { JobCollection } from '@gcix/gcix'\nnew JobCollection()\n</code></pre> Name Type Description"},{"location":"api/root.typescript/#methods_11","title":"Methods","text":"Name Description <code>addChildren</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> No description. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>initializeAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initializeArtifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initializeCache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initializeDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initializeImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initializeNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initializeRules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initializeTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initializeVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>overrideAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>overrideImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>overrideRules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>overrideTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>overrideVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#addchildren","title":"<code>addChildren</code>","text":"<pre><code>public addChildren(props: AddChildrenProps): JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/root.typescript/#propsrequired_10","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: AddChildrenProps</li> </ul>"},{"location":"api/root.typescript/#adddependencies_1","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#dependenciesrequired_2","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addneeds_1","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#needsrequired_2","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addparent_1","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: JobCollection): void\n</code></pre>"},{"location":"api/root.typescript/#parentrequired_1","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: JobCollection</li> </ul>"},{"location":"api/root.typescript/#addtags_1","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#tagsrequired_3","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#addvariables_1","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#variablesrequired_1","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#appendrules_1","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_2","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#appendscripts_1","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_4","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#assignartifacts_1","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#artifactsrequired_1","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#assigncache_1","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#cacherequired_1","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#getallinstancenames_1","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/root.typescript/#childoptional_1","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: Job | JobCollection</li> </ul>"},{"location":"api/root.typescript/#initializeallowfailure","title":"<code>initializeAllowFailure</code>","text":"<pre><code>public initializeAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/root.typescript/#allowfailurerequired_2","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#initializeartifacts","title":"<code>initializeArtifacts</code>","text":"<pre><code>public initializeArtifacts(artifacts: Artifacts): JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/root.typescript/#artifactsrequired_2","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#initializecache","title":"<code>initializeCache</code>","text":"<pre><code>public initializeCache(cache: Cache): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/root.typescript/#cacherequired_2","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#initializedependencies","title":"<code>initializeDependencies</code>","text":"<pre><code>public initializeDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/root.typescript/#dependenciesrequired_3","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#initializeimage","title":"<code>initializeImage</code>","text":"<pre><code>public initializeImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/root.typescript/#imagerequired_1","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#initializeneeds","title":"<code>initializeNeeds</code>","text":"<pre><code>public initializeNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/root.typescript/#needsrequired_3","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#initializerules","title":"<code>initializeRules</code>","text":"<pre><code>public initializeRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/root.typescript/#rulesrequired_3","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#initializetags","title":"<code>initializeTags</code>","text":"<pre><code>public initializeTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/root.typescript/#tagsrequired_4","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#initializevariables","title":"<code>initializeVariables</code>","text":"<pre><code>public initializeVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/root.typescript/#variablesrequired_2","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#isequal_11","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_11","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#overrideallowfailure","title":"<code>overrideAllowFailure</code>","text":"<pre><code>public overrideAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/root.typescript/#allowfailurerequired_3","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#overridedependencies","title":"<code>overrideDependencies</code>","text":"<pre><code>public overrideDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/root.typescript/#dependenciesrequired_4","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#overrideimage","title":"<code>overrideImage</code>","text":"<pre><code>public overrideImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/root.typescript/#imagerequired_2","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#overrideneeds","title":"<code>overrideNeeds</code>","text":"<pre><code>public overrideNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/root.typescript/#needsrequired_4","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#overriderules","title":"<code>overrideRules</code>","text":"<pre><code>public overrideRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/root.typescript/#rulesrequired_4","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#overridetags","title":"<code>overrideTags</code>","text":"<pre><code>public overrideTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/root.typescript/#tagsrequired_5","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#overridevariables","title":"<code>overrideVariables</code>","text":"<pre><code>public overrideVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/root.typescript/#variablesrequired_3","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#prependrules_1","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_5","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#prependscripts_1","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_5","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#render_11","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_35","title":"Properties","text":"Name Type Description <code>lastJobsExecuted</code> <code>Job[]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nestedJobs</code> <code>Job[]</code> No description. <code>populatedJobs</code> <code>Job[]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>ChildDict[]</code> No description. <code>orderedTags</code> <code>OrderedStringSet</code> No description. <code>orderedTagsForInitialization</code> <code>OrderedStringSet</code> No description. <code>orderedTagsForReplacement</code> <code>OrderedStringSet</code> No description. <code>parents</code> <code>Job | JobCollection[]</code> No description. <code>allowFailureForInitialization</code> <code>string | boolean | number[]</code> No description. <code>allowFailureForReplacement</code> <code>string | boolean | number[]</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>artifactsForInitialization</code> <code>Artifacts</code> No description. <code>artifactsForReplacement</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>cacheForInitialization</code> <code>Cache</code> No description. <code>dependencies</code> <code>Job | JobCollection | Need[]</code> No description. <code>dependenciesForInitialization</code> <code>Job | JobCollection | Need[]</code> No description. <code>dependenciesForReplacement</code> <code>Job | JobCollection | Need[]</code> No description. <code>imageForInitialization</code> <code>string | Image</code> No description. <code>imageForReplacement</code> <code>string | Image</code> No description. <code>needs</code> <code>Job | JobCollection | Need[]</code> No description. <code>needsForInitialization</code> <code>Job | JobCollection | Need[]</code> No description. <code>needsForReplacement</code> <code>Job | JobCollection | Need[]</code> No description. <code>rulesForInitialization</code> <code>Rule[]</code> No description. <code>rulesForReplacement</code> <code>Rule[]</code> No description. <code>rulesToAppend</code> <code>Rule[]</code> No description. <code>rulesToPrepend</code> <code>Rule[]</code> No description. <code>scriptsToAppend</code> <code>string[]</code> No description. <code>scriptsToPrepend</code> <code>string[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForInitialization</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForReplacement</code> <code>{[ key: string ]: string}</code> No description."},{"location":"api/root.typescript/#lastjobsexecutedrequired","title":"<code>lastJobsExecuted</code><sup>Required</sup>","text":"<pre><code>public readonly lastJobsExecuted: Job[];\n</code></pre> <ul> <li>Type: Job[]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/root.typescript/#nestedjobsrequired","title":"<code>nestedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly nestedJobs: Job[];\n</code></pre> <ul> <li>Type: Job[]</li> </ul>"},{"location":"api/root.typescript/#populatedjobsrequired","title":"<code>populatedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly populatedJobs: Job[];\n</code></pre> <ul> <li>Type: Job[]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/root.typescript/#childrenrequired","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>public readonly children: ChildDict[];\n</code></pre> <ul> <li>Type: ChildDict[]</li> </ul>"},{"location":"api/root.typescript/#orderedtagsrequired_1","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#orderedtagsforinitializationrequired","title":"<code>orderedTagsForInitialization</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForInitialization: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#orderedtagsforreplacementrequired","title":"<code>orderedTagsForReplacement</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForReplacement: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#parentsrequired_1","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: Job | JobCollection[]</li> </ul>"},{"location":"api/root.typescript/#allowfailureforinitializationoptional","title":"<code>allowFailureForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForInitialization: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#allowfailureforreplacementoptional","title":"<code>allowFailureForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForReplacement: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#artifactsoptional_3","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#artifactsforinitializationoptional","title":"<code>artifactsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForInitialization: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#artifactsforreplacementoptional","title":"<code>artifactsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForReplacement: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#cacheoptional_2","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#cacheforinitializationoptional","title":"<code>cacheForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly cacheForInitialization: Cache;\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#dependenciesoptional_2","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#dependenciesforinitializationoptional","title":"<code>dependenciesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#dependenciesforreplacementoptional","title":"<code>dependenciesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#imageforinitializationoptional","title":"<code>imageForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForInitialization: string | Image;\n</code></pre> <ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#imageforreplacementoptional","title":"<code>imageForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForReplacement: string | Image;\n</code></pre> <ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#needsoptional_2","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#needsforinitializationoptional","title":"<code>needsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#needsforreplacementoptional","title":"<code>needsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#rulesforinitializationoptional","title":"<code>rulesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForInitialization: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#rulesforreplacementoptional","title":"<code>rulesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForReplacement: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#rulestoappendoptional","title":"<code>rulesToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToAppend: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#rulestoprependoptional","title":"<code>rulesToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToPrepend: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#scriptstoappendoptional","title":"<code>scriptsToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToAppend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#scriptstoprependoptional","title":"<code>scriptsToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToPrepend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#variablesoptional_3","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#variablesforinitializationoptional","title":"<code>variablesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForInitialization: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#variablesforreplacementoptional","title":"<code>variablesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForReplacement: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#need","title":"Need","text":"<ul> <li>Implements: INeed</li> </ul> <p>This class represents the Gitlab CI needs keyword. The <code>needs</code> key-word adds a possibility to allow out-of-order Gitlab CI jobs. A job which needed another job runs directly after the other job as finished successfully.</p>"},{"location":"api/root.typescript/#initializers_12","title":"Initializers","text":"<pre><code>import { Need } from '@gcix/gcix'\nnew Need(props: NeedProps)\n</code></pre> Name Type Description <code>props</code> <code>NeedProps</code> No description."},{"location":"api/root.typescript/#propsrequired_11","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: NeedProps</li> </ul>"},{"location":"api/root.typescript/#methods_12","title":"Methods","text":"Name Description <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#isequal_12","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_12","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#render_12","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_36","title":"Properties","text":"Name Type Description <code>artifacts</code> <code>boolean</code> No description. <code>job</code> <code>string</code> No description. <code>pipeline</code> <code>string</code> No description. <code>project</code> <code>string</code> No description. <code>ref</code> <code>string</code> No description."},{"location":"api/root.typescript/#artifactsoptional_4","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul>"},{"location":"api/root.typescript/#joboptional_1","title":"<code>job</code><sup>Optional</sup>","text":"<pre><code>public readonly job: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#pipelineoptional_1","title":"<code>pipeline</code><sup>Optional</sup>","text":"<pre><code>public readonly pipeline: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#projectoptional_2","title":"<code>project</code><sup>Optional</sup>","text":"<pre><code>public readonly project: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#refoptional_3","title":"<code>ref</code><sup>Optional</sup>","text":"<pre><code>public readonly ref: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#orderedstringset","title":"OrderedStringSet","text":"<p>Represents an ordered set of strings.</p>"},{"location":"api/root.typescript/#initializers_13","title":"Initializers","text":"<pre><code>import { OrderedStringSet } from '@gcix/gcix'\nnew OrderedStringSet(values?: string[])\n</code></pre> Name Type Description <code>values</code> <code>string[]</code> An optional array of values to initialize the set."},{"location":"api/root.typescript/#valuesoptional","title":"<code>values</code><sup>Optional</sup>","text":"<ul> <li>Type: string[]</li> </ul> <p>An optional array of values to initialize the set.</p>"},{"location":"api/root.typescript/#methods_13","title":"Methods","text":"Name Description <code>add</code> Adds a value or an array of values to the set. <code>clear</code> Clears the set, removing all values. <code>delete</code> Deletes a value from the set. <code>has</code> Checks if the set contains a specific value."},{"location":"api/root.typescript/#add","title":"<code>add</code>","text":"<pre><code>public add(value: string | string[]): void\n</code></pre> <p>Adds a value or an array of values to the set.</p>"},{"location":"api/root.typescript/#valuerequired","title":"<code>value</code><sup>Required</sup>","text":"<ul> <li>Type: string | string[]</li> </ul> <p>The value(s) to add.</p>"},{"location":"api/root.typescript/#clear","title":"<code>clear</code>","text":"<pre><code>public clear(): void\n</code></pre> <p>Clears the set, removing all values.</p>"},{"location":"api/root.typescript/#delete","title":"<code>delete</code>","text":"<pre><code>public delete(value: string): void\n</code></pre> <p>Deletes a value from the set.</p>"},{"location":"api/root.typescript/#valuerequired_1","title":"<code>value</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>The value to delete.</p>"},{"location":"api/root.typescript/#has","title":"<code>has</code>","text":"<pre><code>public has(value: string): boolean\n</code></pre> <p>Checks if the set contains a specific value.</p>"},{"location":"api/root.typescript/#valuerequired_2","title":"<code>value</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>The value to check.</p>"},{"location":"api/root.typescript/#properties_37","title":"Properties","text":"Name Type Description <code>size</code> <code>number</code> Returns the number of values in the set. <code>values</code> <code>string[]</code> Returns an array of values in the set."},{"location":"api/root.typescript/#sizerequired","title":"<code>size</code><sup>Required</sup>","text":"<pre><code>public readonly size: number;\n</code></pre> <ul> <li>Type: number</li> </ul> <p>Returns the number of values in the set.</p>"},{"location":"api/root.typescript/#valuesrequired","title":"<code>values</code><sup>Required</sup>","text":"<pre><code>public readonly values: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Returns an array of values in the set.</p>"},{"location":"api/root.typescript/#pagesjob","title":"PagesJob","text":"<ul> <li>Implements: IPagesJob</li> </ul> <p>This is a special kind of jobs which deploys Gitlab Pages.</p> <p>This job has the static name <code>pages</code> and the static artifacts path <code>./public</code>. Both preconfigurations can't be altered and are required for deploying Gitlab Pages properly. All methods which would typically alter the name, stage and artifacts of a job are overwritten with an empty implementation.</p> <p>This job is only for deploying Gitlab Pages artifacts within the <code>./public</code> artifacts path. To create the artifacts you have to run jobs, that generate those artifacts within the same <code>./public</code> artifacts path, before this PagesJob in the pipeline.</p> <p>Because the name of the job can't be altered, this job may only exist once in the generated pipeline output. Typically you should add the PagesJob to the <code>gcix.Pipeline</code>.</p> <p>The PagesJob is also preconfigured with the stage <code>pages</code> and the image <code>alpine:latest</code>. To change the stage of this job, use the <code>assignStage()</code> method. Please mention to run this job in a stage after all jobs, that fill the <code>public</code> artifacts path with content.</p> <p>Here a simple example how to use the GitlabPages job:</p> <pre><code>const pipeline = new Pipeline()\npipeline.addChildren({\nnew Job({stage: \"deploy\", scripts: [\"./create-html.sh\"]).assingArtifacts(new Artifacts({paths: [\"public\"]})}),\nnew PagesJob(),\n})\n</code></pre>"},{"location":"api/root.typescript/#initializers_14","title":"Initializers","text":"<pre><code>import { PagesJob } from '@gcix/gcix'\nnew PagesJob()\n</code></pre> Name Type Description"},{"location":"api/root.typescript/#methods_14","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>. <code>assignStage</code> Set the name of this jobs stage to a value other than <code>pages</code>."},{"location":"api/root.typescript/#adddependencies_2","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#dependenciesrequired_5","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addneeds_2","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#needsrequired_5","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addparent_2","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/root.typescript/#parentrequired_2","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection</li> </ul>"},{"location":"api/root.typescript/#addtags_2","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#tagsrequired_6","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#addvariables_2","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/root.typescript/#variablesrequired_4","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#appendrules_2","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_6","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#appendscripts_2","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_6","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#assignallowfailure_1","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/root.typescript/#allowfailurerequired_4","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#assignartifacts_2","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/root.typescript/#artifactsrequired_3","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#assigncache_2","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/root.typescript/#cacherequired_3","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#assigndependencies_1","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#dependenciesrequired_6","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#assignimage_1","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/root.typescript/#imagerequired_3","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#assignneeds_1","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#needsrequired_6","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#assigntags_1","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#tagsrequired_7","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#copy_1","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/root.typescript/#extendname_1","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/root.typescript/#namerequired_6","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#extendstage_1","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/root.typescript/#namerequired_7","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#extendstagevalue_1","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/root.typescript/#namerequired_8","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#getallinstancenames_2","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/root.typescript/#childoptional_2","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: Job | JobCollection</li> </ul>"},{"location":"api/root.typescript/#isequal_13","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_13","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#prependrules_2","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_7","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#prependscripts_2","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_7","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#render_13","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#assignstage","title":"<code>assignStage</code>","text":"<pre><code>public assignStage(stage: string): PagesJob\n</code></pre> <p>Set the name of this jobs stage to a value other than <code>pages</code>.</p>"},{"location":"api/root.typescript/#stagerequired_3","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#properties_38","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>OrderedStringSet</code> No description. <code>parents</code> <code>Job | JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>dependencies</code> <code>Job | JobCollection | Need[]</code> No description. <code>image</code> <code>Image</code> No description. <code>needs</code> <code>Job | JobCollection | Need[]</code> No description. <code>original</code> <code>Job</code> No description. <code>rules</code> <code>Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description."},{"location":"api/root.typescript/#tagsrequired_8","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/root.typescript/#allowfailurerequired_5","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#namerequired_9","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#orderedtagsrequired_2","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#parentsrequired_2","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: Job | JobCollection[]</li> </ul>"},{"location":"api/root.typescript/#scriptsrequired_8","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#stagerequired_4","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#artifactsoptional_5","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#cacheoptional_3","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#dependenciesoptional_3","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#imageoptional_2","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: Image</li> </ul>"},{"location":"api/root.typescript/#needsoptional_3","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#originaloptional_1","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: Job</li> </ul>"},{"location":"api/root.typescript/#rulesoptional_2","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#variablesoptional_4","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#pipeline","title":"Pipeline","text":"<ul> <li>Implements: IPipeline</li> </ul>"},{"location":"api/root.typescript/#initializers_15","title":"Initializers","text":"<pre><code>import { Pipeline } from '@gcix/gcix'\nnew Pipeline(props?: PipelineProps)\n</code></pre> Name Type Description <code>props</code> <code>PipelineProps</code> No description."},{"location":"api/root.typescript/#propsoptional","title":"<code>props</code><sup>Optional</sup>","text":"<ul> <li>Type: PipelineProps</li> </ul>"},{"location":"api/root.typescript/#methods_15","title":"Methods","text":"Name Description <code>addChildren</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> No description. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>initializeAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initializeArtifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initializeCache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initializeDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initializeImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initializeNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initializeRules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initializeTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initializeVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>overrideAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>overrideImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>overrideRules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>overrideTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>overrideVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>. <code>addInclude</code> Let you add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\". <code>addServices</code> Add one or more <code>gcix.Service</code>s to the pipeline. <code>writeYaml</code> Create the Gitlab CI YAML file from this pipeline object."},{"location":"api/root.typescript/#addchildren_1","title":"<code>addChildren</code>","text":"<pre><code>public addChildren(props: AddChildrenProps): JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/root.typescript/#propsrequired_12","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: AddChildrenProps</li> </ul>"},{"location":"api/root.typescript/#adddependencies_3","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#dependenciesrequired_7","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addneeds_3","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#needsrequired_7","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addparent_3","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: JobCollection): void\n</code></pre>"},{"location":"api/root.typescript/#parentrequired_3","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: JobCollection</li> </ul>"},{"location":"api/root.typescript/#addtags_3","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#tagsrequired_9","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#addvariables_3","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#variablesrequired_5","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#appendrules_3","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_8","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#appendscripts_3","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_9","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#assignartifacts_3","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#artifactsrequired_4","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#assigncache_3","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#cacherequired_4","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#getallinstancenames_3","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/root.typescript/#childoptional_3","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: Job | JobCollection</li> </ul>"},{"location":"api/root.typescript/#initializeallowfailure_1","title":"<code>initializeAllowFailure</code>","text":"<pre><code>public initializeAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/root.typescript/#allowfailurerequired_6","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#initializeartifacts_1","title":"<code>initializeArtifacts</code>","text":"<pre><code>public initializeArtifacts(artifacts: Artifacts): JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/root.typescript/#artifactsrequired_5","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#initializecache_1","title":"<code>initializeCache</code>","text":"<pre><code>public initializeCache(cache: Cache): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/root.typescript/#cacherequired_5","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#initializedependencies_1","title":"<code>initializeDependencies</code>","text":"<pre><code>public initializeDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/root.typescript/#dependenciesrequired_8","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#initializeimage_1","title":"<code>initializeImage</code>","text":"<pre><code>public initializeImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/root.typescript/#imagerequired_4","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#initializeneeds_1","title":"<code>initializeNeeds</code>","text":"<pre><code>public initializeNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/root.typescript/#needsrequired_8","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#initializerules_1","title":"<code>initializeRules</code>","text":"<pre><code>public initializeRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/root.typescript/#rulesrequired_9","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#initializetags_1","title":"<code>initializeTags</code>","text":"<pre><code>public initializeTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/root.typescript/#tagsrequired_10","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#initializevariables_1","title":"<code>initializeVariables</code>","text":"<pre><code>public initializeVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/root.typescript/#variablesrequired_6","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#isequal_14","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_14","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#overrideallowfailure_1","title":"<code>overrideAllowFailure</code>","text":"<pre><code>public overrideAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/root.typescript/#allowfailurerequired_7","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#overridedependencies_1","title":"<code>overrideDependencies</code>","text":"<pre><code>public overrideDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/root.typescript/#dependenciesrequired_9","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#overrideimage_1","title":"<code>overrideImage</code>","text":"<pre><code>public overrideImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/root.typescript/#imagerequired_5","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#overrideneeds_1","title":"<code>overrideNeeds</code>","text":"<pre><code>public overrideNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/root.typescript/#needsrequired_9","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#overriderules_1","title":"<code>overrideRules</code>","text":"<pre><code>public overrideRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/root.typescript/#rulesrequired_10","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#overridetags_1","title":"<code>overrideTags</code>","text":"<pre><code>public overrideTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/root.typescript/#tagsrequired_11","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#overridevariables_1","title":"<code>overrideVariables</code>","text":"<pre><code>public overrideVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/root.typescript/#variablesrequired_7","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#prependrules_3","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_11","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#prependscripts_3","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_10","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#render_14","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#addinclude","title":"<code>addInclude</code>","text":"<pre><code>public addInclude(include: Include): Pipeline\n</code></pre> <p>Let you add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\".</p>"},{"location":"api/root.typescript/#includerequired","title":"<code>include</code><sup>Required</sup>","text":"<ul> <li>Type: Include</li> </ul>"},{"location":"api/root.typescript/#addservices","title":"<code>addServices</code>","text":"<pre><code>public addServices(services: Service[]): Pipeline\n</code></pre> <p>Add one or more <code>gcix.Service</code>s to the pipeline.</p> <p>Gitlab CI Documentation: \"The services keyword defines a Docker image that runs during a job linked to the Docker image that the image keyword defines.\"</p>"},{"location":"api/root.typescript/#servicesrequired","title":"<code>services</code><sup>Required</sup>","text":"<ul> <li>Type: Service[]</li> </ul>"},{"location":"api/root.typescript/#writeyaml","title":"<code>writeYaml</code>","text":"<pre><code>public writeYaml(filename?: string): void\n</code></pre> <p>Create the Gitlab CI YAML file from this pipeline object.</p> <p>Use that YAML file to trigger a child pipeline.</p>"},{"location":"api/root.typescript/#filenameoptional","title":"<code>filename</code><sup>Optional</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#properties_39","title":"Properties","text":"Name Type Description <code>lastJobsExecuted</code> <code>Job[]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nestedJobs</code> <code>Job[]</code> No description. <code>populatedJobs</code> <code>Job[]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>ChildDict[]</code> No description. <code>orderedTags</code> <code>OrderedStringSet</code> No description. <code>orderedTagsForInitialization</code> <code>OrderedStringSet</code> No description. <code>orderedTagsForReplacement</code> <code>OrderedStringSet</code> No description. <code>parents</code> <code>Job | JobCollection[]</code> No description. <code>allowFailureForInitialization</code> <code>string | boolean | number[]</code> No description. <code>allowFailureForReplacement</code> <code>string | boolean | number[]</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>artifactsForInitialization</code> <code>Artifacts</code> No description. <code>artifactsForReplacement</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>cacheForInitialization</code> <code>Cache</code> No description. <code>dependencies</code> <code>Job | JobCollection | Need[]</code> No description. <code>dependenciesForInitialization</code> <code>Job | JobCollection | Need[]</code> No description. <code>dependenciesForReplacement</code> <code>Job | JobCollection | Need[]</code> No description. <code>imageForInitialization</code> <code>string | Image</code> No description. <code>imageForReplacement</code> <code>string | Image</code> No description. <code>needs</code> <code>Job | JobCollection | Need[]</code> No description. <code>needsForInitialization</code> <code>Job | JobCollection | Need[]</code> No description. <code>needsForReplacement</code> <code>Job | JobCollection | Need[]</code> No description. <code>rulesForInitialization</code> <code>Rule[]</code> No description. <code>rulesForReplacement</code> <code>Rule[]</code> No description. <code>rulesToAppend</code> <code>Rule[]</code> No description. <code>rulesToPrepend</code> <code>Rule[]</code> No description. <code>scriptsToAppend</code> <code>string[]</code> No description. <code>scriptsToPrepend</code> <code>string[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForInitialization</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForReplacement</code> <code>{[ key: string ]: string}</code> No description. <code>includes</code> <code>Include[]</code> No description. <code>service</code> <code>Service[]</code> No description."},{"location":"api/root.typescript/#lastjobsexecutedrequired_1","title":"<code>lastJobsExecuted</code><sup>Required</sup>","text":"<pre><code>public readonly lastJobsExecuted: Job[];\n</code></pre> <ul> <li>Type: Job[]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/root.typescript/#nestedjobsrequired_1","title":"<code>nestedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly nestedJobs: Job[];\n</code></pre> <ul> <li>Type: Job[]</li> </ul>"},{"location":"api/root.typescript/#populatedjobsrequired_1","title":"<code>populatedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly populatedJobs: Job[];\n</code></pre> <ul> <li>Type: Job[]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/root.typescript/#childrenrequired_1","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>public readonly children: ChildDict[];\n</code></pre> <ul> <li>Type: ChildDict[]</li> </ul>"},{"location":"api/root.typescript/#orderedtagsrequired_3","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#orderedtagsforinitializationrequired_1","title":"<code>orderedTagsForInitialization</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForInitialization: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#orderedtagsforreplacementrequired_1","title":"<code>orderedTagsForReplacement</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForReplacement: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#parentsrequired_3","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: Job | JobCollection[]</li> </ul>"},{"location":"api/root.typescript/#allowfailureforinitializationoptional_1","title":"<code>allowFailureForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForInitialization: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#allowfailureforreplacementoptional_1","title":"<code>allowFailureForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForReplacement: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#artifactsoptional_6","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#artifactsforinitializationoptional_1","title":"<code>artifactsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForInitialization: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#artifactsforreplacementoptional_1","title":"<code>artifactsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForReplacement: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#cacheoptional_4","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#cacheforinitializationoptional_1","title":"<code>cacheForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly cacheForInitialization: Cache;\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#dependenciesoptional_4","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#dependenciesforinitializationoptional_1","title":"<code>dependenciesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#dependenciesforreplacementoptional_1","title":"<code>dependenciesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#imageforinitializationoptional_1","title":"<code>imageForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForInitialization: string | Image;\n</code></pre> <ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#imageforreplacementoptional_1","title":"<code>imageForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForReplacement: string | Image;\n</code></pre> <ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#needsoptional_4","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#needsforinitializationoptional_1","title":"<code>needsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#needsforreplacementoptional_1","title":"<code>needsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#rulesforinitializationoptional_1","title":"<code>rulesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForInitialization: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#rulesforreplacementoptional_1","title":"<code>rulesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForReplacement: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#rulestoappendoptional_1","title":"<code>rulesToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToAppend: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#rulestoprependoptional_1","title":"<code>rulesToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToPrepend: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#scriptstoappendoptional_1","title":"<code>scriptsToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToAppend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#scriptstoprependoptional_1","title":"<code>scriptsToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToPrepend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#variablesoptional_5","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#variablesforinitializationoptional_1","title":"<code>variablesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForInitialization: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#variablesforreplacementoptional_1","title":"<code>variablesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForReplacement: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#includesrequired","title":"<code>includes</code><sup>Required</sup>","text":"<pre><code>public readonly includes: Include[];\n</code></pre> <ul> <li>Type: Include[]</li> </ul>"},{"location":"api/root.typescript/#servicerequired","title":"<code>service</code><sup>Required</sup>","text":"<pre><code>public readonly service: Service[];\n</code></pre> <ul> <li>Type: Service[]</li> </ul>"},{"location":"api/root.typescript/#predefinedvariables","title":"PredefinedVariables","text":"<p>This class contains constants for Gitlab CI predefined variables.</p>"},{"location":"api/root.typescript/#initializers_16","title":"Initializers","text":"<pre><code>import { PredefinedVariables } from '@gcix/gcix'\nnew PredefinedVariables()\n</code></pre> Name Type Description"},{"location":"api/root.typescript/#properties_40","title":"Properties","text":"Name Type Description <code>chatChannel</code> <code>string</code> Source chat channel which triggered the ChatOps command. <code>chatInput</code> <code>string</code> Additional arguments passed in the ChatOps command. <code>ci</code> <code>string</code> Mark that job is executed in CI environment. <code>ciApiV4Url</code> <code>string</code> The GitLab API v4 root URL. <code>ciBuildsDir</code> <code>string</code> Top-level directory where builds are executed. <code>ciCommitBeforeSha</code> <code>string</code> The previous latest commit present on a branch. Is always 0000000000000000000000000000000000000000 in pipelines for merge requests. <code>ciCommitDescription</code> <code>string</code> The description of the commit the message without first line, if the title is shorter than 100 characters; <code>ciCommitMessage</code> <code>string</code> The full commit message. <code>ciCommitRefName</code> <code>string</code> The branch or tag name for which project is built. <code>ciCommitRefProtected</code> <code>string</code> true if the job is running on a protected reference, false if not. <code>ciCommitRefSlug</code> <code>string</code> $CI_COMMIT_REF_NAME in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. <code>ciCommitSha</code> <code>string</code> The commit revision for which project is built. <code>ciCommitShortSha</code> <code>string</code> The first eight characters of CI_COMMIT_SHA. <code>ciCommitTimestamp</code> <code>string</code> The timestamp of the commit in the ISO 8601 format. <code>ciCommitTitle</code> <code>string</code> The title of the commit - the full first line of the message. <code>ciConcurrentId</code> <code>string</code> Unique ID of build execution in a single executor. <code>ciConcurrentProjectId</code> <code>string</code> Unique ID of build execution in a single executor and project. <code>ciConfigPath</code> <code>string</code> The path to CI configuration file. Defaults to .gitlab-ci.yml. <code>ciDebugTrace</code> <code>string</code> Whether debug logging (tracing) is enabled. <code>ciDefaultBranch</code> <code>string</code> The name of the default branch for the project. <code>ciDependencyProxyGroupImagePrefix</code> <code>string</code> The image prefix for pulling images through the Dependency Proxy. <code>ciDependencyProxyPassword</code> <code>string</code> The password to use to pull images through the Dependency Proxy. <code>ciDependencyProxyServer</code> <code>string</code> The server for logging in to the Dependency Proxy. This is equivalent to $CI_SERVER_HOST:$CI_SERVER_PORT. <code>ciDependencyProxyUser</code> <code>string</code> The username to use to pull images through the Dependency Proxy. <code>ciDeployPassword</code> <code>string</code> Authentication password of the GitLab Deploy Token, only present if the Project has one related. <code>ciDeployUser</code> <code>string</code> Authentication username of the GitLab Deploy Token, only present if the Project has one related. <code>ciJobId</code> <code>string</code> The unique ID of the current job that GitLab CI/CD uses internally. <code>ciJobImage</code> <code>string</code> The name of the image running the CI job. <code>ciJobJwt</code> <code>string</code> RS256 JSON web token that can be used for authenticating with third party systems that support JWT authentication, for example HashiCorp\u2019s Vault. <code>ciJobManual</code> <code>string</code> The flag to indicate that job was manually started. <code>ciJobName</code> <code>string</code> The name of the job as defined in .gitlab-ci.yml. <code>ciJobStage</code> <code>string</code> The name of the stage as defined in .gitlab-ci.yml. <code>ciJobStatus</code> <code>string</code> The state of the job as each runner stage is executed. <code>ciJobToken</code> <code>string</code> Token used for authenticating with a few API endpoints and downloading dependent repositories. <code>ciJobUrl</code> <code>string</code> Job details URL. <code>ciMergeRequestTargetBranchName</code> <code>string</code> The target branch name of the merge request if the pipelines are for merge requests. <code>ciMergeRequestTargetBranchSha</code> <code>string</code> The HEAD SHA of the target branch of the merge request if the pipelines are for merge requests. <code>ciNodeTotal</code> <code>string</code> Total number of instances of this job running in parallel. <code>ciPagesDomain</code> <code>string</code> The configured domain that hosts GitLab Pages. <code>ciPagesUrl</code> <code>string</code> URL to GitLab Pages-built pages. Always belongs to a subdomain of CI_PAGES_DOMAIN. <code>ciPipelineId</code> <code>string</code> The instance-level ID of the current pipeline. This is a unique ID across all projects on GitLab. <code>ciPipelineIid</code> <code>string</code> The project-level IID (internal ID) of the current pipeline. This ID is unique for the current project. <code>ciPipelineSource</code> <code>string</code> Indicates how the pipeline was triggered. <code>ciPipelineTriggered</code> <code>string</code> The flag to indicate that job was triggered. <code>ciPipelineUrl</code> <code>string</code> Pipeline details URL. <code>ciProjectConfigPath</code> <code>string</code> The CI configuration path for the project. <code>ciProjectDir</code> <code>string</code> The full path where the repository is cloned and where the job is run. <code>ciProjectId</code> <code>string</code> The unique ID of the current project that GitLab CI/CD uses internally. <code>ciProjectName</code> <code>string</code> The name of the directory for the project that is being built. <code>ciProjectNamespace</code> <code>string</code> The project stage (username or group name) that is being built. <code>ciProjectPath</code> <code>string</code> The stage with project name. <code>ciProjectPathSlug</code> <code>string</code> $CI_PROJECT_PATH in lowercase and with everything except 0-9 and a-z replaced with -. Use in URLs and domain names. <code>ciProjectRepositoryLanguages</code> <code>string</code> Comma-separated, lowercase list of the languages used in the repository (for example ruby,javascript,html,css). <code>ciProjectRootNamespace</code> <code>string</code> The root project stage (username or group name) that is being built. <code>ciProjectTitle</code> <code>string</code> The human-readable project name as displayed in the GitLab web interface. <code>ciProjectUrl</code> <code>string</code> The HTTP(S) address to access project. <code>ciProjectVisibility</code> <code>string</code> The project visibility (internal, private, public). <code>ciRegistryPassword</code> <code>string</code> The password to use to push containers to the GitLab Container Registry, for the current project. <code>ciRepositoryUrl</code> <code>string</code> The URL to clone the Git repository. <code>ciRunnerDescription</code> <code>string</code> The description of the runner as saved in GitLab. <code>ciRunnerExecutableArch</code> <code>string</code> The OS/architecture of the GitLab Runner executable (note that this is not necessarily the same as the environment of the executor). <code>ciRunnerId</code> <code>string</code> The unique ID of runner being used. <code>ciRunnerRevision</code> <code>string</code> GitLab Runner revision that is executing the current job. <code>ciRunnerShortToken</code> <code>string</code> First eight characters of the runner\u2019s token used to authenticate new job requests. Used as the runner\u2019s unique ID. <code>ciRunnerTags</code> <code>string</code> The defined runner tags. <code>ciRunnerVersion</code> <code>string</code> GitLab Runner version that is executing the current job. <code>ciServer</code> <code>string</code> Mark that job is executed in CI environment. <code>ciServerHost</code> <code>string</code> Host component of the GitLab instance URL, without protocol and port (like gitlab.example.com). <code>ciServerName</code> <code>string</code> The name of CI server that is used to coordinate jobs. <code>ciServerPort</code> <code>string</code> Port component of the GitLab instance URL, without host and protocol (like 3000). <code>ciServerProtocol</code> <code>string</code> Protocol component of the GitLab instance URL, without host and port (like https). <code>ciServerRevision</code> <code>string</code> GitLab revision that is used to schedule jobs. <code>ciServerUrl</code> <code>string</code> The base URL of the GitLab instance, including protocol and port (like https://gitlab.example.com:8080). <code>ciServerVersion</code> <code>string</code> GitLab version that is used to schedule jobs. <code>ciServerVersionMajor</code> <code>string</code> GitLab version major component. <code>ciServerVersionMinor</code> <code>string</code> GitLab version minor component. <code>ciServerVersionPatch</code> <code>string</code> GitLab version patch component. <code>gitlabCi</code> <code>string</code> Mark that job is executed in GitLab CI/CD environment. <code>gitlabFeatures</code> <code>string</code> The comma separated list of licensed features available for your instance and plan. <code>gitlabUserEmail</code> <code>string</code> The email of the user who started the job. <code>gitlabUserId</code> <code>string</code> The ID of the user who started the job. <code>gitlabUserLogin</code> <code>string</code> The login username of the user who started the job. <code>gitlabUserName</code> <code>string</code> The real name of the user who started the job. <code>ciCommitBranch</code> <code>string</code> The commit branch name. <code>ciCommitTag</code> <code>string</code> The commit tag name. Present only when building tags. <code>ciDeployFreeze</code> <code>string</code> Included with the value true if the pipeline runs during a deploy freeze window. <code>ciDisposableEnvironment</code> <code>string</code> Marks that the job is executed in a disposable environment (something that is created only for this job and disposed of/destroyed after the execution - all executors except shell and ssh). <code>ciEnvironmentName</code> <code>string</code> The name of the environment for this job. Only present if environment:name is set. <code>ciEnvironmentSlug</code> <code>string</code> A simplified version of the environment name, suitable for inclusion in DNS, URLs, Kubernetes labels, and so on. <code>ciEnvironmentUrl</code> <code>string</code> The URL of the environment for this job. Only present if environment:url is set. <code>ciExternalPullRequestIid</code> <code>string</code> Pull Request ID from GitHub if the pipelines are for external pull requests. <code>ciExternalPullRequestSourceBranchName</code> <code>string</code> The source branch name of the pull request if the pipelines are for external pull requests. <code>ciExternalPullRequestSourceBranchSha</code> <code>string</code> The HEAD SHA of the source branch of the pull request if the pipelines are for external pull requests. <code>ciExternalPullRequestSourceRepository</code> <code>string</code> The source repository name of the pull request if the pipelines are for external pull requests. <code>ciExternalPullRequestTargetBranchName</code> <code>string</code> The target branch name of the pull request if the pipelines are for external pull requests. <code>ciExternalPullRequestTargetBranchSha</code> <code>string</code> The HEAD SHA of the target branch of the pull request if the pipelines are for external pull requests. <code>ciExternalPullRequestTargetRepository</code> <code>string</code> The target repository name of the pull request if the pipelines are for external pull requests. <code>ciHasOpenRequirements</code> <code>string</code> Included with the value true only if the pipeline\u2019s project has any open requirements. <code>ciKubernetesActive</code> <code>string</code> Included with the value true only if the pipeline has a Kubernetes cluster available for deployments. <code>ciMergeRequestAssignees</code> <code>string</code> Comma-separated list of username(s) of assignee(s) for the merge request if the pipelines are for merge requests. <code>ciMergeRequestDiffBaseSha</code> <code>string</code> The base SHA of the merge request diff, if the pipelines are for merge requests. <code>ciMergeRequestDiffId</code> <code>string</code> The version of the merge request diff, if the pipelines are for merge requests. <code>ciMergeRequestEventType</code> <code>string</code> The event type of the merge request, if the pipelines are for merge requests. Can be detached, merged_result or merge_train. <code>ciMergeRequestId</code> <code>string</code> The instance-level ID of the merge request. <code>ciMergeRequestIid</code> <code>string</code> The project-level IID (internal ID) of the merge request. <code>ciMergeRequestLabels</code> <code>string</code> Comma-separated label names of the merge request if the pipelines are for merge requests. <code>ciMergeRequestMilestone</code> <code>string</code> The milestone title of the merge request if the pipelines are for merge requests. <code>ciMergeRequestProjectId</code> <code>string</code> The ID of the project of the merge request if the pipelines are for merge requests. <code>ciMergeRequestProjectPath</code> <code>string</code> The path of the project of the merge request if the pipelines are for merge requests (for example stage/awesome-project). <code>ciMergeRequestProjectUrl</code> <code>string</code> The URL of the project of the merge request if the pipelines are for merge requests (for example http://192.168.10.15:3000/stage/awesome-project). Available only if only [merge_requests] or rules syntax is used and the merge request is created.   * Added in GitLab 11.6 Available in GitLab Runner all. <code>ciMergeRequestRefPath</code> <code>string</code> The ref path of the merge request if the pipelines are for merge requests. <code>ciMergeRequestSourceBranchName</code> <code>string</code> The source branch name of the merge request if the pipelines are for merge requests. <code>ciMergeRequestSourceBranchSha</code> <code>string</code> The HEAD SHA of the source branch of the merge request if the pipelines are for merge requests. <code>ciMergeRequestSourceProjectId</code> <code>string</code> The ID of the source project of the merge request if the pipelines are for merge requests. <code>ciMergeRequestSourceProjectPath</code> <code>string</code> The path of the source project of the merge request if the pipelines are for merge requests. <code>ciMergeRequestSourceProjectUrl</code> <code>string</code> The URL of the source project of the merge request if the pipelines are for merge requests. <code>ciMergeRequestTitle</code> <code>string</code> The title of the merge request if the pipelines are for merge requests. <code>ciNodeIndex</code> <code>string</code> Index of the job in the job set. If the job is not parallelized, this variable is not set. <code>ciOpenMergeRequests</code> <code>string</code> Available in branch and merge request pipelines. <code>ciRegistry</code> <code>string</code> GitLab Container Registry. This variable includes a :port value if one has been specified in the registry configuration. <code>ciRegistryImage</code> <code>string</code> the address of the registry tied to the specific project. <code>ciRegistryUser</code> <code>string</code> The username to use to push containers to the GitLab Container Registry, for the current project. <code>ciSharedEnvironment</code> <code>string</code> Marks that the job is executed in a shared environment (something that is persisted across CI invocations like shell or ssh executor). <code>triggerPayload</code> <code>string</code> This variable is available when a pipeline is triggered with a webhook."},{"location":"api/root.typescript/#chatchannelrequired","title":"<code>chatChannel</code><sup>Required</sup>","text":"<pre><code>public readonly chatChannel: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Source chat channel which triggered the ChatOps command.</p> <p>Added in GitLab 10.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#chatinputrequired","title":"<code>chatInput</code><sup>Required</sup>","text":"<pre><code>public readonly chatInput: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Additional arguments passed in the ChatOps command.</p> <p>Added in GitLab 10.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cirequired","title":"<code>ci</code><sup>Required</sup>","text":"<pre><code>public readonly ci: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Mark that job is executed in CI environment.</p> <p>Added in GitLab all Available in GitLab Runner 0.4</p>"},{"location":"api/root.typescript/#ciapiv4urlrequired","title":"<code>ciApiV4Url</code><sup>Required</sup>","text":"<pre><code>public readonly ciApiV4Url: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The GitLab API v4 root URL.</p> <p>Added in GitLab 11.7 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cibuildsdirrequired","title":"<code>ciBuildsDir</code><sup>Required</sup>","text":"<pre><code>public readonly ciBuildsDir: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Top-level directory where builds are executed.</p> <p>Added in GitLab all Available in GitLab Runner 11.10</p>"},{"location":"api/root.typescript/#cicommitbeforesharequired","title":"<code>ciCommitBeforeSha</code><sup>Required</sup>","text":"<pre><code>public readonly ciCommitBeforeSha: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The previous latest commit present on a branch. Is always 0000000000000000000000000000000000000000 in pipelines for merge requests.</p> <p>Added in GitLab 11.2 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cicommitdescriptionrequired","title":"<code>ciCommitDescription</code><sup>Required</sup>","text":"<pre><code>public readonly ciCommitDescription: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The description of the commit the message without first line, if the title is shorter than 100 characters;</p> <p>full message in other case.</p> <p>Added in GitLab 10.8 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cicommitmessagerequired","title":"<code>ciCommitMessage</code><sup>Required</sup>","text":"<pre><code>public readonly ciCommitMessage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The full commit message.</p> <p>Added in GitLab 10.8 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cicommitrefnamerequired","title":"<code>ciCommitRefName</code><sup>Required</sup>","text":"<pre><code>public readonly ciCommitRefName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The branch or tag name for which project is built.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cicommitrefprotectedrequired","title":"<code>ciCommitRefProtected</code><sup>Required</sup>","text":"<pre><code>public readonly ciCommitRefProtected: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>true if the job is running on a protected reference, false if not.</p> <p>Added in GitLab 11.11 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cicommitrefslugrequired","title":"<code>ciCommitRefSlug</code><sup>Required</sup>","text":"<pre><code>public readonly ciCommitRefSlug: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>$CI_COMMIT_REF_NAME in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -.</p> <p>No leading / trailing -. Use in URLs, host names and domain names.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cicommitsharequired","title":"<code>ciCommitSha</code><sup>Required</sup>","text":"<pre><code>public readonly ciCommitSha: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The commit revision for which project is built.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cicommitshortsharequired","title":"<code>ciCommitShortSha</code><sup>Required</sup>","text":"<pre><code>public readonly ciCommitShortSha: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The first eight characters of CI_COMMIT_SHA.</p> <p>Added in GitLab 11.7 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cicommittimestamprequired","title":"<code>ciCommitTimestamp</code><sup>Required</sup>","text":"<pre><code>public readonly ciCommitTimestamp: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The timestamp of the commit in the ISO 8601 format.</p> <p>Added in GitLab 13.4 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cicommittitlerequired","title":"<code>ciCommitTitle</code><sup>Required</sup>","text":"<pre><code>public readonly ciCommitTitle: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The title of the commit - the full first line of the message.</p> <p>Added in GitLab 10.8 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciconcurrentidrequired","title":"<code>ciConcurrentId</code><sup>Required</sup>","text":"<pre><code>public readonly ciConcurrentId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Unique ID of build execution in a single executor.</p> <p>Added in GitLab all Available in GitLab Runner 11.10</p>"},{"location":"api/root.typescript/#ciconcurrentprojectidrequired","title":"<code>ciConcurrentProjectId</code><sup>Required</sup>","text":"<pre><code>public readonly ciConcurrentProjectId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Unique ID of build execution in a single executor and project.</p> <p>Added in GitLab all Available in GitLab Runner 11.10</p>"},{"location":"api/root.typescript/#ciconfigpathrequired","title":"<code>ciConfigPath</code><sup>Required</sup>","text":"<pre><code>public readonly ciConfigPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The path to CI configuration file. Defaults to .gitlab-ci.yml.</p> <p>Added in GitLab 9.4 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#cidebugtracerequired","title":"<code>ciDebugTrace</code><sup>Required</sup>","text":"<pre><code>public readonly ciDebugTrace: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Whether debug logging (tracing) is enabled.</p> <p>Added in GitLab all Available in GitLab Runner 1.7</p>"},{"location":"api/root.typescript/#cidefaultbranchrequired","title":"<code>ciDefaultBranch</code><sup>Required</sup>","text":"<pre><code>public readonly ciDefaultBranch: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the default branch for the project.</p> <p>Added in GitLab 12.4 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cidependencyproxygroupimageprefixrequired","title":"<code>ciDependencyProxyGroupImagePrefix</code><sup>Required</sup>","text":"<pre><code>public readonly ciDependencyProxyGroupImagePrefix: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The image prefix for pulling images through the Dependency Proxy.</p> <p>Added in GitLab 13.7 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cidependencyproxypasswordrequired","title":"<code>ciDependencyProxyPassword</code><sup>Required</sup>","text":"<pre><code>public readonly ciDependencyProxyPassword: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The password to use to pull images through the Dependency Proxy.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab 13.7 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cidependencyproxyserverrequired","title":"<code>ciDependencyProxyServer</code><sup>Required</sup>","text":"<pre><code>public readonly ciDependencyProxyServer: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The server for logging in to the Dependency Proxy. This is equivalent to $CI_SERVER_HOST:$CI_SERVER_PORT.</p> <p>Added in GitLab 13.7 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cidependencyproxyuserrequired","title":"<code>ciDependencyProxyUser</code><sup>Required</sup>","text":"<pre><code>public readonly ciDependencyProxyUser: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The username to use to pull images through the Dependency Proxy.</p> <p>Added in GitLab 13.7 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cideploypasswordrequired","title":"<code>ciDeployPassword</code><sup>Required</sup>","text":"<pre><code>public readonly ciDeployPassword: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Authentication password of the GitLab Deploy Token, only present if the Project has one related.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab 10.8 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cideployuserrequired","title":"<code>ciDeployUser</code><sup>Required</sup>","text":"<pre><code>public readonly ciDeployUser: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Authentication username of the GitLab Deploy Token, only present if the Project has one related.</p> <p>Added in GitLab 10.8 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cijobidrequired","title":"<code>ciJobId</code><sup>Required</sup>","text":"<pre><code>public readonly ciJobId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The unique ID of the current job that GitLab CI/CD uses internally.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cijobimagerequired","title":"<code>ciJobImage</code><sup>Required</sup>","text":"<pre><code>public readonly ciJobImage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the image running the CI job.</p> <p>Added in GitLab 12.9 Available in GitLab Runner 12.9</p>"},{"location":"api/root.typescript/#cijobjwtrequired","title":"<code>ciJobJwt</code><sup>Required</sup>","text":"<pre><code>public readonly ciJobJwt: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>RS256 JSON web token that can be used for authenticating with third party systems that support JWT authentication, for example HashiCorp\u2019s Vault.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab 12.10 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cijobmanualrequired","title":"<code>ciJobManual</code><sup>Required</sup>","text":"<pre><code>public readonly ciJobManual: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The flag to indicate that job was manually started.</p> <p>Added in GitLab 8.12 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cijobnamerequired","title":"<code>ciJobName</code><sup>Required</sup>","text":"<pre><code>public readonly ciJobName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the job as defined in .gitlab-ci.yml.</p> <p>Added in GitLab 9.0 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#cijobstagerequired","title":"<code>ciJobStage</code><sup>Required</sup>","text":"<pre><code>public readonly ciJobStage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the stage as defined in .gitlab-ci.yml.</p> <p>Added in GitLab 9.0 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#cijobstatusrequired","title":"<code>ciJobStatus</code><sup>Required</sup>","text":"<pre><code>public readonly ciJobStatus: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The state of the job as each runner stage is executed.</p> <p>Use with after_script where CI_JOB_STATUS can be either success, failed or canceled.</p> <p>Added in GitLab all Available in GitLab Runner 13.5</p>"},{"location":"api/root.typescript/#cijobtokenrequired","title":"<code>ciJobToken</code><sup>Required</sup>","text":"<pre><code>public readonly ciJobToken: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Token used for authenticating with a few API endpoints and downloading dependent repositories.</p> <p>The token is valid as long as the job is running.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab 9.0 Available in GitLab Runner 1.2</p>"},{"location":"api/root.typescript/#cijoburlrequired","title":"<code>ciJobUrl</code><sup>Required</sup>","text":"<pre><code>public readonly ciJobUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Job details URL.</p> <p>Added in GitLab 11.1 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#cimergerequesttargetbranchnamerequired","title":"<code>ciMergeRequestTargetBranchName</code><sup>Required</sup>","text":"<pre><code>public readonly ciMergeRequestTargetBranchName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The target branch name of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequesttargetbranchsharequired","title":"<code>ciMergeRequestTargetBranchSha</code><sup>Required</sup>","text":"<pre><code>public readonly ciMergeRequestTargetBranchSha: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The HEAD SHA of the target branch of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used, the merge request is created, and the pipeline is a merged result pipeline.</p> <p>Added in GitLab 11.9 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cinodetotalrequired","title":"<code>ciNodeTotal</code><sup>Required</sup>","text":"<pre><code>public readonly ciNodeTotal: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Total number of instances of this job running in parallel.</p> <p>If the job is not parallelized, this variable is set to 1.</p> <p>Added in GitLab 11.5 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cipagesdomainrequired","title":"<code>ciPagesDomain</code><sup>Required</sup>","text":"<pre><code>public readonly ciPagesDomain: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The configured domain that hosts GitLab Pages.</p> <p>Added in GitLab 11.8 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cipagesurlrequired","title":"<code>ciPagesUrl</code><sup>Required</sup>","text":"<pre><code>public readonly ciPagesUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>URL to GitLab Pages-built pages. Always belongs to a subdomain of CI_PAGES_DOMAIN.</p> <p>Added in GitLab 11.8 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cipipelineidrequired","title":"<code>ciPipelineId</code><sup>Required</sup>","text":"<pre><code>public readonly ciPipelineId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The instance-level ID of the current pipeline. This is a unique ID across all projects on GitLab.</p> <p>Added in GitLab 8.10 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cipipelineiidrequired","title":"<code>ciPipelineIid</code><sup>Required</sup>","text":"<pre><code>public readonly ciPipelineIid: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The project-level IID (internal ID) of the current pipeline. This ID is unique for the current project.</p> <p>Added in GitLab 11.0 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cipipelinesourcerequired","title":"<code>ciPipelineSource</code><sup>Required</sup>","text":"<pre><code>public readonly ciPipelineSource: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Indicates how the pipeline was triggered.</p> <p>Possible options are push, web, schedule, api, external, chat, webide, merge_request_event, external_pull_request_event, parent_pipeline, trigger, or pipeline. For pipelines created before GitLab 9.5, this is displayed as unknown.</p> <p>Added in GitLab 10.0 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cipipelinetriggeredrequired","title":"<code>ciPipelineTriggered</code><sup>Required</sup>","text":"<pre><code>public readonly ciPipelineTriggered: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The flag to indicate that job was triggered.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cipipelineurlrequired","title":"<code>ciPipelineUrl</code><sup>Required</sup>","text":"<pre><code>public readonly ciPipelineUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Pipeline details URL.</p> <p>Added in GitLab 11.1 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#ciprojectconfigpathrequired","title":"<code>ciProjectConfigPath</code><sup>Required</sup>","text":"<pre><code>public readonly ciProjectConfigPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The CI configuration path for the project.</p> <p>Added in GitLab 13.8 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciprojectdirrequired","title":"<code>ciProjectDir</code><sup>Required</sup>","text":"<pre><code>public readonly ciProjectDir: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The full path where the repository is cloned and where the job is run.</p> <p>If the GitLab Runner builds_dir parameter is set, this variable is set relative to the value of builds_dir. For more information, see Advanced configuration for GitLab Runner.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciprojectidrequired","title":"<code>ciProjectId</code><sup>Required</sup>","text":"<pre><code>public readonly ciProjectId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The unique ID of the current project that GitLab CI/CD uses internally.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciprojectnamerequired","title":"<code>ciProjectName</code><sup>Required</sup>","text":"<pre><code>public readonly ciProjectName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the directory for the project that is being built.</p> <p>For example, if the project URL is gitlab.example.com/group-name/project-1, the CI_PROJECT_NAME would be project-1.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#ciprojectnamespacerequired","title":"<code>ciProjectNamespace</code><sup>Required</sup>","text":"<pre><code>public readonly ciProjectNamespace: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The project stage (username or group name) that is being built.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#ciprojectpathrequired","title":"<code>ciProjectPath</code><sup>Required</sup>","text":"<pre><code>public readonly ciProjectPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The stage with project name.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#ciprojectpathslugrequired","title":"<code>ciProjectPathSlug</code><sup>Required</sup>","text":"<pre><code>public readonly ciProjectPathSlug: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>$CI_PROJECT_PATH in lowercase and with everything except 0-9 and a-z replaced with -. Use in URLs and domain names.</p> <p>Added in GitLab 9.3 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciprojectrepositorylanguagesrequired","title":"<code>ciProjectRepositoryLanguages</code><sup>Required</sup>","text":"<pre><code>public readonly ciProjectRepositoryLanguages: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Comma-separated, lowercase list of the languages used in the repository (for example ruby,javascript,html,css).</p> <p>Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciprojectrootnamespacerequired","title":"<code>ciProjectRootNamespace</code><sup>Required</sup>","text":"<pre><code>public readonly ciProjectRootNamespace: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The root project stage (username or group name) that is being built.</p> <p>For example, if CI_PROJECT_NAMESPACE is root-group/child-group/grandchild-group, CI_PROJECT_ROOT_NAMESPACE would be root-group.</p> <p>Added in GitLab 13.2 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#ciprojecttitlerequired","title":"<code>ciProjectTitle</code><sup>Required</sup>","text":"<pre><code>public readonly ciProjectTitle: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The human-readable project name as displayed in the GitLab web interface.</p> <p>Added in GitLab 12.4 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciprojecturlrequired","title":"<code>ciProjectUrl</code><sup>Required</sup>","text":"<pre><code>public readonly ciProjectUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The HTTP(S) address to access project.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#ciprojectvisibilityrequired","title":"<code>ciProjectVisibility</code><sup>Required</sup>","text":"<pre><code>public readonly ciProjectVisibility: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The project visibility (internal, private, public).</p> <p>Added in GitLab 10.3 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciregistrypasswordrequired","title":"<code>ciRegistryPassword</code><sup>Required</sup>","text":"<pre><code>public readonly ciRegistryPassword: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The password to use to push containers to the GitLab Container Registry, for the current project.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cirepositoryurlrequired","title":"<code>ciRepositoryUrl</code><sup>Required</sup>","text":"<pre><code>public readonly ciRepositoryUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The URL to clone the Git repository.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cirunnerdescriptionrequired","title":"<code>ciRunnerDescription</code><sup>Required</sup>","text":"<pre><code>public readonly ciRunnerDescription: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The description of the runner as saved in GitLab.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#cirunnerexecutablearchrequired","title":"<code>ciRunnerExecutableArch</code><sup>Required</sup>","text":"<pre><code>public readonly ciRunnerExecutableArch: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The OS/architecture of the GitLab Runner executable (note that this is not necessarily the same as the environment of the executor).</p> <p>Added in GitLab all Available in GitLab Runner 10.6</p>"},{"location":"api/root.typescript/#cirunneridrequired","title":"<code>ciRunnerId</code><sup>Required</sup>","text":"<pre><code>public readonly ciRunnerId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The unique ID of runner being used.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#cirunnerrevisionrequired","title":"<code>ciRunnerRevision</code><sup>Required</sup>","text":"<pre><code>public readonly ciRunnerRevision: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>GitLab Runner revision that is executing the current job.</p> <p>Added in GitLab all Available in GitLab Runner 10.6</p>"},{"location":"api/root.typescript/#cirunnershorttokenrequired","title":"<code>ciRunnerShortToken</code><sup>Required</sup>","text":"<pre><code>public readonly ciRunnerShortToken: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>First eight characters of the runner\u2019s token used to authenticate new job requests. Used as the runner\u2019s unique ID.</p> <p>ATTENTION: Contrary to most other variables in this class, this variable is not resolved at rendering time. Instead the variable string is returned, which is then resolved during pipeline execution. This is because the value contains sensitive information.</p> <p>Added in GitLab all Available in GitLab Runner 12.3</p>"},{"location":"api/root.typescript/#cirunnertagsrequired","title":"<code>ciRunnerTags</code><sup>Required</sup>","text":"<pre><code>public readonly ciRunnerTags: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The defined runner tags.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#cirunnerversionrequired","title":"<code>ciRunnerVersion</code><sup>Required</sup>","text":"<pre><code>public readonly ciRunnerVersion: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>GitLab Runner version that is executing the current job.</p> <p>Added in GitLab all Available in GitLab Runner 10.6</p>"},{"location":"api/root.typescript/#ciserverrequired","title":"<code>ciServer</code><sup>Required</sup>","text":"<pre><code>public readonly ciServer: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Mark that job is executed in CI environment.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciserverhostrequired","title":"<code>ciServerHost</code><sup>Required</sup>","text":"<pre><code>public readonly ciServerHost: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Host component of the GitLab instance URL, without protocol and port (like gitlab.example.com).</p> <p>Added in GitLab 12.1 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciservernamerequired","title":"<code>ciServerName</code><sup>Required</sup>","text":"<pre><code>public readonly ciServerName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of CI server that is used to coordinate jobs.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciserverportrequired","title":"<code>ciServerPort</code><sup>Required</sup>","text":"<pre><code>public readonly ciServerPort: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Port component of the GitLab instance URL, without host and protocol (like 3000).</p> <p>Added in GitLab 12.8 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciserverprotocolrequired","title":"<code>ciServerProtocol</code><sup>Required</sup>","text":"<pre><code>public readonly ciServerProtocol: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Protocol component of the GitLab instance URL, without host and port (like https).</p> <p>Added in GitLab 12.8 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciserverrevisionrequired","title":"<code>ciServerRevision</code><sup>Required</sup>","text":"<pre><code>public readonly ciServerRevision: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>GitLab revision that is used to schedule jobs.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciserverurlrequired","title":"<code>ciServerUrl</code><sup>Required</sup>","text":"<pre><code>public readonly ciServerUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The base URL of the GitLab instance, including protocol and port (like https://gitlab.example.com:8080).</p> <p>Added in GitLab 12.7 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciserverversionrequired","title":"<code>ciServerVersion</code><sup>Required</sup>","text":"<pre><code>public readonly ciServerVersion: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>GitLab version that is used to schedule jobs.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciserverversionmajorrequired","title":"<code>ciServerVersionMajor</code><sup>Required</sup>","text":"<pre><code>public readonly ciServerVersionMajor: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>GitLab version major component.</p> <p>Added in GitLab 11.4 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciserverversionminorrequired","title":"<code>ciServerVersionMinor</code><sup>Required</sup>","text":"<pre><code>public readonly ciServerVersionMinor: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>GitLab version minor component.</p> <p>Added in GitLab 11.4 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciserverversionpatchrequired","title":"<code>ciServerVersionPatch</code><sup>Required</sup>","text":"<pre><code>public readonly ciServerVersionPatch: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>GitLab version patch component.</p> <p>Added in GitLab 11.4 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#gitlabcirequired","title":"<code>gitlabCi</code><sup>Required</sup>","text":"<pre><code>public readonly gitlabCi: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Mark that job is executed in GitLab CI/CD environment.</p> <p>Added in GitLab all Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#gitlabfeaturesrequired","title":"<code>gitlabFeatures</code><sup>Required</sup>","text":"<pre><code>public readonly gitlabFeatures: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The comma separated list of licensed features available for your instance and plan.</p> <p>Added in GitLab 10.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#gitlabuseremailrequired","title":"<code>gitlabUserEmail</code><sup>Required</sup>","text":"<pre><code>public readonly gitlabUserEmail: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The email of the user who started the job.</p> <p>Added in GitLab 8.12 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#gitlabuseridrequired","title":"<code>gitlabUserId</code><sup>Required</sup>","text":"<pre><code>public readonly gitlabUserId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The ID of the user who started the job.</p> <p>Added in GitLab 8.12 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#gitlabuserloginrequired","title":"<code>gitlabUserLogin</code><sup>Required</sup>","text":"<pre><code>public readonly gitlabUserLogin: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The login username of the user who started the job.</p> <p>Added in GitLab 10.0 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#gitlabusernamerequired","title":"<code>gitlabUserName</code><sup>Required</sup>","text":"<pre><code>public readonly gitlabUserName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The real name of the user who started the job.</p> <p>Added in GitLab 10.0 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cicommitbranchoptional","title":"<code>ciCommitBranch</code><sup>Optional</sup>","text":"<pre><code>public readonly ciCommitBranch: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The commit branch name.</p> <p>Present in branch pipelines, including pipelines for the default branch. Not present in merge request pipelines or tag pipelines.</p> <p>Added in GitLab 12.6 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#cicommittagoptional","title":"<code>ciCommitTag</code><sup>Optional</sup>","text":"<pre><code>public readonly ciCommitTag: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The commit tag name. Present only when building tags.</p> <p>Added in GitLab 9.0 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#cideployfreezeoptional","title":"<code>ciDeployFreeze</code><sup>Optional</sup>","text":"<pre><code>public readonly ciDeployFreeze: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Included with the value true if the pipeline runs during a deploy freeze window.</p> <p>Added in GitLab 13.2 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cidisposableenvironmentoptional","title":"<code>ciDisposableEnvironment</code><sup>Optional</sup>","text":"<pre><code>public readonly ciDisposableEnvironment: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Marks that the job is executed in a disposable environment (something that is created only for this job and disposed of/destroyed after the execution - all executors except shell and ssh).</p> <p>If the environment is disposable, it is set to true, otherwise it is not defined at all.</p> <p>Added in GitLab all Available in GitLab Runner 10.1</p>"},{"location":"api/root.typescript/#cienvironmentnameoptional","title":"<code>ciEnvironmentName</code><sup>Optional</sup>","text":"<pre><code>public readonly ciEnvironmentName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The name of the environment for this job. Only present if environment:name is set.</p> <p>Added in GitLab 8.15 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cienvironmentslugoptional","title":"<code>ciEnvironmentSlug</code><sup>Optional</sup>","text":"<pre><code>public readonly ciEnvironmentSlug: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>A simplified version of the environment name, suitable for inclusion in DNS, URLs, Kubernetes labels, and so on.</p> <p>Only present if environment:name is set.</p> <p>Added in GitLab 8.15 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cienvironmenturloptional","title":"<code>ciEnvironmentUrl</code><sup>Optional</sup>","text":"<pre><code>public readonly ciEnvironmentUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The URL of the environment for this job. Only present if environment:url is set.</p> <p>Added in GitLab 9.3 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciexternalpullrequestiidoptional","title":"<code>ciExternalPullRequestIid</code><sup>Optional</sup>","text":"<pre><code>public readonly ciExternalPullRequestIid: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Pull Request ID from GitHub if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.</p> <p>Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciexternalpullrequestsourcebranchnameoptional","title":"<code>ciExternalPullRequestSourceBranchName</code><sup>Optional</sup>","text":"<pre><code>public readonly ciExternalPullRequestSourceBranchName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The source branch name of the pull request if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.</p> <p>Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciexternalpullrequestsourcebranchshaoptional","title":"<code>ciExternalPullRequestSourceBranchSha</code><sup>Optional</sup>","text":"<pre><code>public readonly ciExternalPullRequestSourceBranchSha: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The HEAD SHA of the source branch of the pull request if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.</p> <p>Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciexternalpullrequestsourcerepositoryoptional","title":"<code>ciExternalPullRequestSourceRepository</code><sup>Optional</sup>","text":"<pre><code>public readonly ciExternalPullRequestSourceRepository: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The source repository name of the pull request if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.</p> <p>Added in GitLab 13.3 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciexternalpullrequesttargetbranchnameoptional","title":"<code>ciExternalPullRequestTargetBranchName</code><sup>Optional</sup>","text":"<pre><code>public readonly ciExternalPullRequestTargetBranchName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The target branch name of the pull request if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.   * Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciexternalpullrequesttargetbranchshaoptional","title":"<code>ciExternalPullRequestTargetBranchSha</code><sup>Optional</sup>","text":"<pre><code>public readonly ciExternalPullRequestTargetBranchSha: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The HEAD SHA of the target branch of the pull request if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.</p> <p>Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciexternalpullrequesttargetrepositoryoptional","title":"<code>ciExternalPullRequestTargetRepository</code><sup>Optional</sup>","text":"<pre><code>public readonly ciExternalPullRequestTargetRepository: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The target repository name of the pull request if the pipelines are for external pull requests.</p> <p>Available only if only [external_pull_requests] or rules syntax is used and the pull request is open.</p> <p>Added in GitLab 13.3 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cihasopenrequirementsoptional","title":"<code>ciHasOpenRequirements</code><sup>Optional</sup>","text":"<pre><code>public readonly ciHasOpenRequirements: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Included with the value true only if the pipeline\u2019s project has any open requirements.</p> <p>Not included if there are no open requirements for the pipeline\u2019s project.</p> <p>Added in GitLab 13.1 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cikubernetesactiveoptional","title":"<code>ciKubernetesActive</code><sup>Optional</sup>","text":"<pre><code>public readonly ciKubernetesActive: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Included with the value true only if the pipeline has a Kubernetes cluster available for deployments.</p> <p>Not included if no cluster is available. Can be used as an alternative to only:kubernetes/except:kubernetes with rules:if.</p> <p>Added in GitLab 13.0 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestassigneesoptional","title":"<code>ciMergeRequestAssignees</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestAssignees: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Comma-separated list of username(s) of assignee(s) for the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.9 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestdiffbaseshaoptional","title":"<code>ciMergeRequestDiffBaseSha</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestDiffBaseSha: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The base SHA of the merge request diff, if the pipelines are for merge requests.</p> <p>Added in GitLab 13.7 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestdiffidoptional","title":"<code>ciMergeRequestDiffId</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestDiffId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The version of the merge request diff, if the pipelines are for merge requests.</p> <p>Added in GitLab 13.7 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequesteventtypeoptional","title":"<code>ciMergeRequestEventType</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestEventType: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The event type of the merge request, if the pipelines are for merge requests. Can be detached, merged_result or merge_train.</p> <p>Added in GitLab 12.3 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestidoptional","title":"<code>ciMergeRequestId</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The instance-level ID of the merge request.</p> <p>Only available if the pipelines are for merge requests and the merge request is created. This is a unique ID across all projects on GitLab.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestiidoptional","title":"<code>ciMergeRequestIid</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestIid: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The project-level IID (internal ID) of the merge request.</p> <p>Only available If the pipelines are for merge requests and the merge request is created. This ID is unique for the current project.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestlabelsoptional","title":"<code>ciMergeRequestLabels</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestLabels: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Comma-separated label names of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.9 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestmilestoneoptional","title":"<code>ciMergeRequestMilestone</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestMilestone: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The milestone title of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.9 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestprojectidoptional","title":"<code>ciMergeRequestProjectId</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestProjectId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The ID of the project of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestprojectpathoptional","title":"<code>ciMergeRequestProjectPath</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestProjectPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The path of the project of the merge request if the pipelines are for merge requests (for example stage/awesome-project).</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestprojecturloptional","title":"<code>ciMergeRequestProjectUrl</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestProjectUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The URL of the project of the merge request if the pipelines are for merge requests (for example http://192.168.10.15:3000/stage/awesome-project). Available only if only [merge_requests] or rules syntax is used and the merge request is created.   * Added in GitLab 11.6 Available in GitLab Runner all.</p>"},{"location":"api/root.typescript/#cimergerequestrefpathoptional","title":"<code>ciMergeRequestRefPath</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestRefPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The ref path of the merge request if the pipelines are for merge requests.</p> <p>(for example refs/merge-requests/1/head). Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestsourcebranchnameoptional","title":"<code>ciMergeRequestSourceBranchName</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestSourceBranchName: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The source branch name of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestsourcebranchshaoptional","title":"<code>ciMergeRequestSourceBranchSha</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestSourceBranchSha: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The HEAD SHA of the source branch of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used, the merge request is created, and the pipeline is a merged result pipeline.</p> <p>Added in GitLab 11.9 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestsourceprojectidoptional","title":"<code>ciMergeRequestSourceProjectId</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestSourceProjectId: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The ID of the source project of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestsourceprojectpathoptional","title":"<code>ciMergeRequestSourceProjectPath</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestSourceProjectPath: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The path of the source project of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequestsourceprojecturloptional","title":"<code>ciMergeRequestSourceProjectUrl</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestSourceProjectUrl: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The URL of the source project of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.6 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cimergerequesttitleoptional","title":"<code>ciMergeRequestTitle</code><sup>Optional</sup>","text":"<pre><code>public readonly ciMergeRequestTitle: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The title of the merge request if the pipelines are for merge requests.</p> <p>Available only if only [merge_requests] or rules syntax is used and the merge request is created.</p> <p>Added in GitLab 11.9 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cinodeindexoptional","title":"<code>ciNodeIndex</code><sup>Optional</sup>","text":"<pre><code>public readonly ciNodeIndex: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Index of the job in the job set. If the job is not parallelized, this variable is not set.</p> <p>Added in GitLab 11.5 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciopenmergerequestsoptional","title":"<code>ciOpenMergeRequests</code><sup>Optional</sup>","text":"<pre><code>public readonly ciOpenMergeRequests: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Available in branch and merge request pipelines.</p> <p>Contains a comma-separated list of up to four merge requests that use the current branch and project as the merge request source. For example gitlab-org/gitlab!333,gitlab-org/gitlab-foss!11.</p> <p>Added in GitLab 13.8 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#ciregistryoptional","title":"<code>ciRegistry</code><sup>Optional</sup>","text":"<pre><code>public readonly ciRegistry: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>GitLab Container Registry. This variable includes a :port value if one has been specified in the registry configuration.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#ciregistryimageoptional","title":"<code>ciRegistryImage</code><sup>Optional</sup>","text":"<pre><code>public readonly ciRegistryImage: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>the address of the registry tied to the specific project.</p> <p>Added in GitLab 8.10 Available in GitLab Runner 0.5</p>"},{"location":"api/root.typescript/#ciregistryuseroptional","title":"<code>ciRegistryUser</code><sup>Optional</sup>","text":"<pre><code>public readonly ciRegistryUser: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The username to use to push containers to the GitLab Container Registry, for the current project.</p> <p>Added in GitLab 9.0 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#cisharedenvironmentoptional","title":"<code>ciSharedEnvironment</code><sup>Optional</sup>","text":"<pre><code>public readonly ciSharedEnvironment: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Marks that the job is executed in a shared environment (something that is persisted across CI invocations like shell or ssh executor).</p> <p>If the environment is shared, it is set to true, otherwise it is not defined at all.</p> <p>Added in GitLab all Available in GitLab Runner 10.1</p>"},{"location":"api/root.typescript/#triggerpayloadoptional","title":"<code>triggerPayload</code><sup>Optional</sup>","text":"<pre><code>public readonly triggerPayload: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>This variable is available when a pipeline is triggered with a webhook.</p> <p>Added in GitLab 13.9 Available in GitLab Runner all</p>"},{"location":"api/root.typescript/#rule","title":"Rule","text":"<ul> <li>Implements: IRule</li> </ul>"},{"location":"api/root.typescript/#initializers_17","title":"Initializers","text":"<pre><code>import { Rule } from '@gcix/gcix'\nnew Rule(props: RuleProps)\n</code></pre> Name Type Description <code>props</code> <code>RuleProps</code> No description."},{"location":"api/root.typescript/#propsrequired_13","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: RuleProps</li> </ul>"},{"location":"api/root.typescript/#methods_16","title":"Methods","text":"Name Description <code>addVariables</code> Adds one or more variables, each as keyword argument, to the rule. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>never</code> This method is intended to be used for predefined rules. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#addvariables_4","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Rule\n</code></pre> <p>Adds one or more variables, each as keyword argument, to the rule.</p> <pre><code>rule.addVariables({GREETING: \"hello\", LANGUAGE: \"typescript\"})\n</code></pre>"},{"location":"api/root.typescript/#variablesrequired_8","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#isequal_15","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_15","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#never","title":"<code>never</code>","text":"<pre><code>public never(): Rule\n</code></pre> <p>This method is intended to be used for predefined rules.</p> <p>For instance you have defined an often used rule <code>on_master</code> whose if statement checks if the pipeline is executed on branch <code>master</code>. Then you can either run a job, if on master...</p> <pre><code>myJob.appendRules(onMaster)\n</code></pre> <p>... or do not run a job if on master...</p> <pre><code>myJob.appendRules(onMaster.never())\n</code></pre>"},{"location":"api/root.typescript/#render_15","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_41","title":"Properties","text":"Name Type Description <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>allowFailure</code> <code>boolean</code> No description. <code>changes</code> <code>string[]</code> No description. <code>exists</code> <code>string[]</code> No description. <code>ifStatement</code> <code>string</code> No description. <code>when</code> <code>WhenStatement</code> No description."},{"location":"api/root.typescript/#variablesrequired_9","title":"<code>variables</code><sup>Required</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#allowfailureoptional_2","title":"<code>allowFailure</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailure: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul>"},{"location":"api/root.typescript/#changesoptional_1","title":"<code>changes</code><sup>Optional</sup>","text":"<pre><code>public readonly changes: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#existsoptional_1","title":"<code>exists</code><sup>Optional</sup>","text":"<pre><code>public readonly exists: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#ifstatementoptional_1","title":"<code>ifStatement</code><sup>Optional</sup>","text":"<pre><code>public readonly ifStatement: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#whenoptional_5","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>public readonly when: WhenStatement;\n</code></pre> <ul> <li>Type: WhenStatement</li> </ul>"},{"location":"api/root.typescript/#rulelib","title":"RuleLib","text":"<p>Represents a library of static methods to create rules for GitLab CI/CD pipeline conditions.</p>"},{"location":"api/root.typescript/#static-functions","title":"Static Functions","text":"Name Description <code>notOnBranch</code> Creates a rule that evaluates to true if the CI/CD pipeline is NOT running on the specified branch. <code>notOnMain</code> Creates a rule that evaluates to true if the CI/CD pipeline is NOT running on the \"main\" branch. <code>notOnMaster</code> Creates a rule that evaluates to true if the CI/CD pipeline is NOT running on the \"master\" branch. <code>onBranch</code> Creates a rule that evaluates to true if the CI/CD pipeline is running on the specified branch. <code>onMain</code> Creates a rule that evaluates to true if the CI/CD pipeline is running on the \"main\" branch. <code>onMaster</code> Creates a rule that evaluates to true if the CI/CD pipeline is running on the \"master\" branch. <code>onMergeRequestEvents</code> Creates a rule that evaluates to true for merge request events in the CI/CD pipeline. <code>onPipelineTrigger</code> Creates a rule that evaluates to true for pipelines triggered by API or the trigger keyword. <code>onSuccess</code> Creates a rule that always evaluates to true (success). <code>onTags</code> Creates a rule that evaluates to true for CI/CD pipelines triggered by tags."},{"location":"api/root.typescript/#notonbranch","title":"<code>notOnBranch</code>","text":"<pre><code>import { RuleLib } from '@gcix/gcix'\nRuleLib.notOnBranch(branchName: string)\n</code></pre> <p>Creates a rule that evaluates to true if the CI/CD pipeline is NOT running on the specified branch.</p>"},{"location":"api/root.typescript/#branchnamerequired","title":"<code>branchName</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>The name of the branch to check.</p>"},{"location":"api/root.typescript/#notonmain","title":"<code>notOnMain</code>","text":"<pre><code>import { RuleLib } from '@gcix/gcix'\nRuleLib.notOnMain()\n</code></pre> <p>Creates a rule that evaluates to true if the CI/CD pipeline is NOT running on the \"main\" branch.</p>"},{"location":"api/root.typescript/#notonmaster","title":"<code>notOnMaster</code>","text":"<pre><code>import { RuleLib } from '@gcix/gcix'\nRuleLib.notOnMaster()\n</code></pre> <p>Creates a rule that evaluates to true if the CI/CD pipeline is NOT running on the \"master\" branch.</p>"},{"location":"api/root.typescript/#onbranch","title":"<code>onBranch</code>","text":"<pre><code>import { RuleLib } from '@gcix/gcix'\nRuleLib.onBranch(branchName: string)\n</code></pre> <p>Creates a rule that evaluates to true if the CI/CD pipeline is running on the specified branch.</p>"},{"location":"api/root.typescript/#branchnamerequired_1","title":"<code>branchName</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>The name of the branch to check.</p>"},{"location":"api/root.typescript/#onmain","title":"<code>onMain</code>","text":"<pre><code>import { RuleLib } from '@gcix/gcix'\nRuleLib.onMain()\n</code></pre> <p>Creates a rule that evaluates to true if the CI/CD pipeline is running on the \"main\" branch.</p>"},{"location":"api/root.typescript/#onmaster","title":"<code>onMaster</code>","text":"<pre><code>import { RuleLib } from '@gcix/gcix'\nRuleLib.onMaster()\n</code></pre> <p>Creates a rule that evaluates to true if the CI/CD pipeline is running on the \"master\" branch.</p>"},{"location":"api/root.typescript/#onmergerequestevents","title":"<code>onMergeRequestEvents</code>","text":"<pre><code>import { RuleLib } from '@gcix/gcix'\nRuleLib.onMergeRequestEvents()\n</code></pre> <p>Creates a rule that evaluates to true for merge request events in the CI/CD pipeline.</p>"},{"location":"api/root.typescript/#onpipelinetrigger","title":"<code>onPipelineTrigger</code>","text":"<pre><code>import { RuleLib } from '@gcix/gcix'\nRuleLib.onPipelineTrigger()\n</code></pre> <p>Creates a rule that evaluates to true for pipelines triggered by API or the trigger keyword.</p>"},{"location":"api/root.typescript/#onsuccess","title":"<code>onSuccess</code>","text":"<pre><code>import { RuleLib } from '@gcix/gcix'\nRuleLib.onSuccess()\n</code></pre> <p>Creates a rule that always evaluates to true (success).</p>"},{"location":"api/root.typescript/#ontags","title":"<code>onTags</code>","text":"<pre><code>import { RuleLib } from '@gcix/gcix'\nRuleLib.onTags()\n</code></pre> <p>Creates a rule that evaluates to true for CI/CD pipelines triggered by tags.</p>"},{"location":"api/root.typescript/#service","title":"Service","text":"<ul> <li>Implements: IService</li> </ul>"},{"location":"api/root.typescript/#initializers_18","title":"Initializers","text":"<pre><code>import { Service } from '@gcix/gcix'\nnew Service(props: ServiceProps)\n</code></pre> Name Type Description <code>props</code> <code>ServiceProps</code> No description."},{"location":"api/root.typescript/#propsrequired_14","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: ServiceProps</li> </ul>"},{"location":"api/root.typescript/#methods_17","title":"Methods","text":"Name Description <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#isequal_16","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_16","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#render_16","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_42","title":"Properties","text":"Name Type Description <code>name</code> <code>string</code> No description."},{"location":"api/root.typescript/#namerequired_10","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#triggerjob","title":"TriggerJob","text":"<ul> <li>Implements: ITriggerJob</li> </ul> <p>This class represents the trigger job.</p> <p>Jobs with trigger can only use a limited set of keywords. For example, you can\u2019t run commands with <code>script</code>.</p> <p>Simple example:</p> <pre><code>const triggerJob = new TriggerJob({\nstage: \"trigger-other-job\",\nproject: \"myteam/other-project\",\nbranch: \"main\",\nstrategy: \"depend\",\n})\ntriggerJob.appendRules(rules.onTags().never(), rules.onMain())\n</code></pre>"},{"location":"api/root.typescript/#initializers_19","title":"Initializers","text":"<pre><code>import { TriggerJob } from '@gcix/gcix'\nnew TriggerJob(props: TriggerJobProps)\n</code></pre> Name Type Description <code>props</code> <code>TriggerJobProps</code> No description."},{"location":"api/root.typescript/#propsrequired_15","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: TriggerJobProps</li> </ul>"},{"location":"api/root.typescript/#methods_18","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignAllowFailure</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>prependRules</code> No description. <code>prependScripts</code> No description. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#adddependencies_4","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#dependenciesrequired_10","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addneeds_4","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#needsrequired_10","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addparent_4","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/root.typescript/#parentrequired_4","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection</li> </ul>"},{"location":"api/root.typescript/#addtags_4","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#tagsrequired_12","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#addvariables_5","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/root.typescript/#variablesrequired_10","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#appendrules_4","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_12","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#appendscripts_4","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_11","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#assignallowfailure_2","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/root.typescript/#allowfailurerequired_8","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#assignartifacts_4","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/root.typescript/#artifactsrequired_6","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#assigncache_4","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/root.typescript/#cacherequired_6","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#assigndependencies_2","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#dependenciesrequired_11","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#assignimage_2","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/root.typescript/#imagerequired_6","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#assignneeds_2","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#needsrequired_11","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#assigntags_2","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#tagsrequired_13","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#copy_2","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/root.typescript/#extendname_2","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/root.typescript/#namerequired_11","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#extendstage_2","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/root.typescript/#stagerequired_5","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#extendstagevalue_2","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/root.typescript/#stagerequired_6","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#getallinstancenames_4","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/root.typescript/#childoptional_4","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: Job | JobCollection</li> </ul>"},{"location":"api/root.typescript/#isequal_17","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_17","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul>"},{"location":"api/root.typescript/#prependrules_4","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_13","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#prependscripts_4","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_12","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#render_17","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#properties_43","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>allowFailure</code> <code>string | boolean | number[]</code> No description. <code>name</code> <code>string</code> No description. <code>orderedTags</code> <code>OrderedStringSet</code> No description. <code>parents</code> <code>Job | JobCollection[]</code> No description. <code>scripts</code> <code>string[]</code> No description. <code>stage</code> <code>string</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>dependencies</code> <code>Job | JobCollection | Need[]</code> No description. <code>image</code> <code>Image</code> No description. <code>needs</code> <code>Job | JobCollection | Need[]</code> No description. <code>original</code> <code>Job</code> No description. <code>rules</code> <code>Rule[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>branch</code> <code>string</code> The branch of <code>project</code> the pipeline should be triggered of. <code>includes</code> <code>IncludeLocal | IncludeFile | IncludeRemote | IncludeTemplate | IncludeArtifact[]</code> Include a pipeline to trigger (Parent-child pipeline trigger) Mutually exclusiv with <code>project</code>. <code>project</code> <code>string</code> The full name of another Gitlab project to trigger (multi-project pipeline trigger). <code>strategy</code> <code>string</code> Determines if the result of this pipeline depends on the triggered downstream pipeline (use <code>TriggerStrategy.DEPEND</code>) or if just \"fire and forget\" the downstream pipeline (use <code>None</code>)."},{"location":"api/root.typescript/#tagsrequired_14","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/root.typescript/#allowfailurerequired_9","title":"<code>allowFailure</code><sup>Required</sup>","text":"<pre><code>public readonly allowFailure: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#namerequired_12","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#orderedtagsrequired_4","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#parentsrequired_4","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: Job | JobCollection[]</li> </ul>"},{"location":"api/root.typescript/#scriptsrequired_13","title":"<code>scripts</code><sup>Required</sup>","text":"<pre><code>public readonly scripts: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#stagerequired_7","title":"<code>stage</code><sup>Required</sup>","text":"<pre><code>public readonly stage: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#artifactsoptional_7","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#cacheoptional_5","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#dependenciesoptional_5","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#imageoptional_3","title":"<code>image</code><sup>Optional</sup>","text":"<pre><code>public readonly image: Image;\n</code></pre> <ul> <li>Type: Image</li> </ul>"},{"location":"api/root.typescript/#needsoptional_5","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#originaloptional_2","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: Job</li> </ul>"},{"location":"api/root.typescript/#rulesoptional_3","title":"<code>rules</code><sup>Optional</sup>","text":"<pre><code>public readonly rules: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#variablesoptional_6","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#branchoptional_1","title":"<code>branch</code><sup>Optional</sup>","text":"<pre><code>public readonly branch: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The branch of <code>project</code> the pipeline should be triggered of.</p>"},{"location":"api/root.typescript/#includesoptional_2","title":"<code>includes</code><sup>Optional</sup>","text":"<pre><code>public readonly includes: IncludeLocal | IncludeFile | IncludeRemote | IncludeTemplate | IncludeArtifact[];\n</code></pre> <ul> <li>Type: IncludeLocal | IncludeFile | IncludeRemote | IncludeTemplate | IncludeArtifact[]</li> </ul> <p>Include a pipeline to trigger (Parent-child pipeline trigger) Mutually exclusiv with <code>project</code>.</p>"},{"location":"api/root.typescript/#projectoptional_3","title":"<code>project</code><sup>Optional</sup>","text":"<pre><code>public readonly project: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The full name of another Gitlab project to trigger (multi-project pipeline trigger).</p> <p>Mutually exclusive with <code>includes</code>.</p>"},{"location":"api/root.typescript/#strategyoptional_1","title":"<code>strategy</code><sup>Optional</sup>","text":"<pre><code>public readonly strategy: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Determines if the result of this pipeline depends on the triggered downstream pipeline (use <code>TriggerStrategy.DEPEND</code>) or if just \"fire and forget\" the downstream pipeline (use <code>None</code>).</p>"},{"location":"api/root.typescript/#protocols","title":"Protocols","text":""},{"location":"api/root.typescript/#iartifacts","title":"IArtifacts","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: Artifacts, IArtifacts</p> </li> </ul>"},{"location":"api/root.typescript/#methods_19","title":"Methods","text":"Name Description <code>addExcludes</code> No description. <code>addPaths</code> No description."},{"location":"api/root.typescript/#addexcludes_1","title":"<code>addExcludes</code>","text":"<pre><code>public addExcludes(excludes: string[]): void\n</code></pre>"},{"location":"api/root.typescript/#excludesrequired_2","title":"<code>excludes</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#addpaths_1","title":"<code>addPaths</code>","text":"<pre><code>public addPaths(paths: string[]): void\n</code></pre>"},{"location":"api/root.typescript/#pathsrequired_4","title":"<code>paths</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#properties_44","title":"Properties","text":"Name Type Description <code>excludes</code> <code>string[]</code> No description. <code>paths</code> <code>string[]</code> No description. <code>expireIn</code> <code>string</code> No description. <code>exposeAs</code> <code>string</code> No description. <code>name</code> <code>string</code> No description. <code>public</code> <code>boolean</code> No description. <code>reports</code> <code>ArtifactsReport[]</code> No description. <code>untracked</code> <code>boolean</code> No description. <code>when</code> <code>WhenStatement</code> No description."},{"location":"api/root.typescript/#excludesrequired_3","title":"<code>excludes</code><sup>Required</sup>","text":"<pre><code>public readonly excludes: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#pathsrequired_5","title":"<code>paths</code><sup>Required</sup>","text":"<pre><code>public readonly paths: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#expireinoptional_2","title":"<code>expireIn</code><sup>Optional</sup>","text":"<pre><code>public readonly expireIn: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#exposeasoptional_2","title":"<code>exposeAs</code><sup>Optional</sup>","text":"<pre><code>public readonly exposeAs: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#nameoptional_6","title":"<code>name</code><sup>Optional</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#publicoptional_2","title":"<code>public</code><sup>Optional</sup>","text":"<pre><code>public readonly public: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul>"},{"location":"api/root.typescript/#reportsoptional_2","title":"<code>reports</code><sup>Optional</sup>","text":"<pre><code>public readonly reports: ArtifactsReport[];\n</code></pre> <ul> <li>Type: ArtifactsReport[]</li> </ul>"},{"location":"api/root.typescript/#untrackedoptional_4","title":"<code>untracked</code><sup>Optional</sup>","text":"<pre><code>public readonly untracked: boolean;\n</code></pre> <ul> <li>Type: boolean</li> </ul>"},{"location":"api/root.typescript/#whenoptional_6","title":"<code>when</code><sup>Optional</sup>","text":"<pre><code>public readonly when: WhenStatement;\n</code></pre> <ul> <li>Type: WhenStatement</li> </ul>"},{"location":"api/root.typescript/#ibase","title":"IBase","text":"<ul> <li>Implemented By: @gcix/gcix.aws.CdkBootstrap, @gcix/gcix.aws.CdkDeploy, @gcix/gcix.aws.CdkDiff, @gcix/gcix.aws.CdkDiffDeploy, @gcix/gcix.aws.CdkMirrorToCodecommit, @gcix/gcix.container.BuildContainerCollection, @gcix/gcix.container.CopyContainerCollection, @gcix/gcix.container.CraneCopy, @gcix/gcix.container.CranePull, @gcix/gcix.container.CranePush, @gcix/gcix.container.DiveScan, @gcix/gcix.container.DockerBuild, @gcix/gcix.container.DockerPush, @gcix/gcix.container.KanikoExecute, @gcix/gcix.container.TrivyIgnoreFileCheck, @gcix/gcix.container.TrivyScanLocalImage, @gcix/gcix.git.GitMirror, @gcix/gcix.gitlab.PagesAsciiDoctor, @gcix/gcix.gitlab.PagesPdoc3, @gcix/gcix.gitlab.PagesSphinx, @gcix/gcix.python.PythonBuildBdistWheel, @gcix/gcix.python.PythonDeployTwineUpload, @gcix/gcix.python.PythonFullStack, @gcix/gcix.python.PythonLintFlake8, @gcix/gcix.python.PythonLintIsort, @gcix/gcix.python.PythonLintMyPy, @gcix/gcix.python.PythonTestEvaluateGitTagPep440Conformity, @gcix/gcix.python.PythonTestPytest, Artifacts, Cache, CacheKey, Image, Include, IncludeArtifact, IncludeFile, IncludeLocal, IncludeRemote, IncludeTemplate, Job, JobCollection, Need, PagesJob, Pipeline, Rule, Service, TriggerJob, IArtifacts, IBase, ICache, ICacheKey, IInclude, IIncludeArtifact, IIncludeFile, IIncludeLocal, IIncludeRemote, IIncludeTemplate, IJob, IJobBase, IJobCollection, IJobCollectionBase, INeed, IRule, IService</li> </ul>"},{"location":"api/root.typescript/#methods_20","title":"Methods","text":"Name Description <code>isEqual</code> <code>isEqual</code> checks if <code>this</code> object is equal to given object. <code>render</code> Returns a representation of any object which implements <code>IBase</code>."},{"location":"api/root.typescript/#isequal_18","title":"<code>isEqual</code>","text":"<pre><code>public isEqual(comparable: IBase): boolean\n</code></pre> <p><code>isEqual</code> checks if <code>this</code> object is equal to given object.</p>"},{"location":"api/root.typescript/#comparablerequired_18","title":"<code>comparable</code><sup>Required</sup>","text":"<ul> <li>Type: IBase</li> </ul> <p>An arbitrary object to compare to.</p>"},{"location":"api/root.typescript/#render_18","title":"<code>render</code>","text":"<pre><code>public render(): any\n</code></pre> <p>Returns a representation of any object which implements <code>IBase</code>.</p> <p>The rendered representation is used by the <code>gcix</code> to dump it in YAML format as part of the <code>.gitlab-ci.yml</code> pipeline.</p>"},{"location":"api/root.typescript/#icache","title":"ICache","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: Cache, ICache</p> </li> </ul>"},{"location":"api/root.typescript/#icachekey","title":"ICacheKey","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: CacheKey, ICacheKey</p> </li> </ul>"},{"location":"api/root.typescript/#iimage","title":"IImage","text":"<ul> <li>Implemented By: Image, IImage</li> </ul>"},{"location":"api/root.typescript/#methods_21","title":"Methods","text":"Name Description <code>withEntrypoint</code> No description. <code>withTag</code> No description."},{"location":"api/root.typescript/#withentrypoint_1","title":"<code>withEntrypoint</code>","text":"<pre><code>public withEntrypoint(entrypoint: string[]): Image\n</code></pre>"},{"location":"api/root.typescript/#entrypointrequired_1","title":"<code>entrypoint</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#withtag_1","title":"<code>withTag</code>","text":"<pre><code>public withTag(tag: string): Image\n</code></pre>"},{"location":"api/root.typescript/#tagrequired_1","title":"<code>tag</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#iinclude","title":"IInclude","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: Include, IncludeArtifact, IncludeFile, IncludeLocal, IncludeRemote, IncludeTemplate, IInclude, IIncludeArtifact, IIncludeFile, IIncludeLocal, IIncludeRemote, IIncludeTemplate</p> </li> </ul> <p>This module represents the Gitlab CI Include keyword.</p> <p>Use include to include external YAML files in your CI/CD configuration.</p> <p>include:local example:</p> <p><pre><code>pipeline.addInclude(new IncludeLocal({local: \"/templates/.gitlab-ci-template.yml\"}))\n</code></pre> include:file example: <pre><code>pipeline.addInclude(new IncludeFile({\n        project=\"my-group/my-project\",\n        ref=\"master\",\n        file=\"/templates/.gitlab-ci-template.yml\"\n    }))\n</code></pre></p> <p>include:remote example: <pre><code>pipeline.addInclude(new IncludeRemote({\n         remote: \"https://gitlab.com/example-project/-/raw/master/.gitlab-ci.yml\"\n     }))\n</code></pre></p> <p>include:template example: <pre><code>pipeline.addInclude(new IncludeTemplate({template: \"Auto-DevOps.gitlab-ci.yml\"}))\n</code></pre></p> <p>Special type of include: Use a <code>gcix.TriggerJob</code> with <code>IncludeArtifact</code> to run a child pipeline with a generated configuration file from a previous job: <pre><code>new TriggerJob({includes=[IncludeArtifact(job=\"generate-config\", artifact=\"generated-config.yml\")]})\n</code></pre></p>"},{"location":"api/root.typescript/#iincludeartifact","title":"IIncludeArtifact","text":"<ul> <li> <p>Extends: IInclude</p> </li> <li> <p>Implemented By: IncludeArtifact, IIncludeArtifact</p> </li> </ul>"},{"location":"api/root.typescript/#iincludefile","title":"IIncludeFile","text":"<ul> <li> <p>Extends: IInclude</p> </li> <li> <p>Implemented By: IncludeFile, IIncludeFile</p> </li> </ul>"},{"location":"api/root.typescript/#iincludelocal","title":"IIncludeLocal","text":"<ul> <li> <p>Extends: IInclude</p> </li> <li> <p>Implemented By: IncludeLocal, IIncludeLocal</p> </li> </ul>"},{"location":"api/root.typescript/#iincluderemote","title":"IIncludeRemote","text":"<ul> <li> <p>Extends: IInclude</p> </li> <li> <p>Implemented By: IncludeRemote, IIncludeRemote</p> </li> </ul>"},{"location":"api/root.typescript/#iincludetemplate","title":"IIncludeTemplate","text":"<ul> <li> <p>Extends: IInclude</p> </li> <li> <p>Implemented By: IncludeTemplate, IIncludeTemplate</p> </li> </ul>"},{"location":"api/root.typescript/#ijob","title":"IJob","text":"<ul> <li> <p>Extends: IJobBase</p> </li> <li> <p>Implemented By: @gcix/gcix.aws.CdkBootstrap, @gcix/gcix.aws.CdkDeploy, @gcix/gcix.aws.CdkDiff, @gcix/gcix.aws.CdkMirrorToCodecommit, @gcix/gcix.container.CraneCopy, @gcix/gcix.container.CranePull, @gcix/gcix.container.CranePush, @gcix/gcix.container.DiveScan, @gcix/gcix.container.DockerBuild, @gcix/gcix.container.DockerPush, @gcix/gcix.container.KanikoExecute, @gcix/gcix.container.TrivyIgnoreFileCheck, @gcix/gcix.container.TrivyScanLocalImage, @gcix/gcix.git.GitMirror, @gcix/gcix.gitlab.PagesAsciiDoctor, @gcix/gcix.gitlab.PagesPdoc3, @gcix/gcix.gitlab.PagesSphinx, @gcix/gcix.python.PythonBuildBdistWheel, @gcix/gcix.python.PythonDeployTwineUpload, @gcix/gcix.python.PythonLintFlake8, @gcix/gcix.python.PythonLintIsort, @gcix/gcix.python.PythonLintMyPy, @gcix/gcix.python.PythonTestEvaluateGitTagPep440Conformity, @gcix/gcix.python.PythonTestPytest, Job, PagesJob, TriggerJob, IJob</p> </li> </ul>"},{"location":"api/root.typescript/#methods_22","title":"Methods","text":"Name Description <code>addParent</code> This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection. <code>assignAllowFailure</code> No description. <code>assignDependencies</code> No description. <code>assignImage</code> Sets the image of this job. <code>assignNeeds</code> No description. <code>assignTags</code> No description. <code>copy</code> Returns an independent, deep copy object of this job. <code>extendName</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name. <code>extendStage</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage. <code>extendStageValue</code> This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage."},{"location":"api/root.typescript/#addparent_5","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: Job | JobCollection): void\n</code></pre> <p>This method is called by <code>gcix.JobCollection</code>s when the job is added to that JobCollection.</p> <p>The job needs to know its parents when <code>getAllInstanceNames()</code> is called.</p>"},{"location":"api/root.typescript/#parentrequired_5","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection</li> </ul> <p>any type of Job or JobCollection.</p>"},{"location":"api/root.typescript/#assignallowfailure_3","title":"<code>assignAllowFailure</code>","text":"<pre><code>public assignAllowFailure(allowFailure: boolean | number[]): Job\n</code></pre>"},{"location":"api/root.typescript/#allowfailurerequired_10","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#assigndependencies_3","title":"<code>assignDependencies</code>","text":"<pre><code>public assignDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#dependenciesrequired_12","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#assignimage_3","title":"<code>assignImage</code>","text":"<pre><code>public assignImage(image: string | Image): Job\n</code></pre> <p>Sets the image of this job.</p> <p>For a simple container image you can provide the origin of the image. If you want to set the entrypoint, you have to provide an Image object instead.</p> <p>!! Any previous values will be overwritten.</p>"},{"location":"api/root.typescript/#imagerequired_7","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#assignneeds_3","title":"<code>assignNeeds</code>","text":"<pre><code>public assignNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#needsrequired_12","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#assigntags_3","title":"<code>assignTags</code>","text":"<pre><code>public assignTags(tags: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#tagsrequired_15","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#copy_3","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>Returns an independent, deep copy object of this job.</p>"},{"location":"api/root.typescript/#extendname_3","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name.</p>"},{"location":"api/root.typescript/#namerequired_13","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>to append to the current name.</p>"},{"location":"api/root.typescript/#extendstage_3","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs name and stage.</p>"},{"location":"api/root.typescript/#stagerequired_8","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>name to extend the stage and the name.</p>"},{"location":"api/root.typescript/#extendstagevalue_3","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(stage: string): void\n</code></pre> <p>This method is used by <code>gcix.JobCollection</code>s to populate the jobs stage.</p>"},{"location":"api/root.typescript/#stagerequired_9","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>name to extend the stage.</p>"},{"location":"api/root.typescript/#properties_45","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags. <code>original</code> <code>Job</code> No description."},{"location":"api/root.typescript/#tagsrequired_16","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/root.typescript/#originaloptional_3","title":"<code>original</code><sup>Optional</sup>","text":"<pre><code>public readonly original: Job;\n</code></pre> <ul> <li>Type: Job</li> </ul>"},{"location":"api/root.typescript/#ijobbase","title":"IJobBase","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: @gcix/gcix.aws.CdkBootstrap, @gcix/gcix.aws.CdkDeploy, @gcix/gcix.aws.CdkDiff, @gcix/gcix.aws.CdkMirrorToCodecommit, @gcix/gcix.container.CraneCopy, @gcix/gcix.container.CranePull, @gcix/gcix.container.CranePush, @gcix/gcix.container.DiveScan, @gcix/gcix.container.DockerBuild, @gcix/gcix.container.DockerPush, @gcix/gcix.container.KanikoExecute, @gcix/gcix.container.TrivyIgnoreFileCheck, @gcix/gcix.container.TrivyScanLocalImage, @gcix/gcix.git.GitMirror, @gcix/gcix.gitlab.PagesAsciiDoctor, @gcix/gcix.gitlab.PagesPdoc3, @gcix/gcix.gitlab.PagesSphinx, @gcix/gcix.python.PythonBuildBdistWheel, @gcix/gcix.python.PythonDeployTwineUpload, @gcix/gcix.python.PythonLintFlake8, @gcix/gcix.python.PythonLintIsort, @gcix/gcix.python.PythonLintMyPy, @gcix/gcix.python.PythonTestEvaluateGitTagPep440Conformity, @gcix/gcix.python.PythonTestPytest, Job, PagesJob, TriggerJob, IJob, IJobBase</p> </li> </ul>"},{"location":"api/root.typescript/#methods_23","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>prependRules</code> No description. <code>prependScripts</code> No description."},{"location":"api/root.typescript/#adddependencies_5","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#dependenciesrequired_13","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addneeds_5","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): Job\n</code></pre>"},{"location":"api/root.typescript/#needsrequired_13","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addtags_5","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#tagsrequired_17","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#addvariables_6","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Job\n</code></pre>"},{"location":"api/root.typescript/#variablesrequired_11","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#appendrules_5","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_14","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#appendscripts_5","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_14","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#assignartifacts_5","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): Job\n</code></pre>"},{"location":"api/root.typescript/#artifactsrequired_7","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#assigncache_5","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): Job\n</code></pre>"},{"location":"api/root.typescript/#cacherequired_7","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#getallinstancenames_5","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this sequence and all parent sequences.</p>"},{"location":"api/root.typescript/#childoptional_5","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: Job | JobCollection</li> </ul>"},{"location":"api/root.typescript/#prependrules_5","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): Job\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_15","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#prependscripts_5","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): Job\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_15","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#properties_46","title":"Properties","text":"Name Type Description <code>tags</code> <code>string[]</code> Getter method to receive added tags."},{"location":"api/root.typescript/#tagsrequired_18","title":"<code>tags</code><sup>Required</sup>","text":"<pre><code>public readonly tags: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul> <p>Getter method to receive added tags.</p>"},{"location":"api/root.typescript/#ijobcollection","title":"IJobCollection","text":"<ul> <li> <p>Extends: IJobCollectionBase</p> </li> <li> <p>Implemented By: @gcix/gcix.aws.CdkDiffDeploy, @gcix/gcix.container.BuildContainerCollection, @gcix/gcix.container.CopyContainerCollection, @gcix/gcix.python.PythonFullStack, JobCollection, Pipeline, IJobCollection</p> </li> </ul>"},{"location":"api/root.typescript/#methods_24","title":"Methods","text":"Name Description <code>addChildren</code> Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection. <code>addParent</code> No description. <code>initializeAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before. <code>initializeArtifacts</code> Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before. <code>initializeCache</code> Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before. <code>initializeDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before. <code>initializeImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection. <code>initializeNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before. <code>initializeRules</code> Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before. <code>initializeTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before. <code>initializeVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before. <code>overrideAllowFailure</code> Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideDependencies</code> Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs. <code>overrideImage</code> Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value. <code>overrideNeeds</code> Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs. <code>overrideRules</code> Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs. <code>overrideTags</code> Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs. <code>overrideVariables</code> Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs."},{"location":"api/root.typescript/#addchildren_2","title":"<code>addChildren</code>","text":"<pre><code>public addChildren(props: AddChildrenProps): JobCollection\n</code></pre> <p>Add <code>gcix.Job</code>s or other <code>gcix.JobCollection</code>s to this JobCollection.</p> <p>Adding a child creates a copy of that child. You should provide a name or stage when adding children, to make them different from other places where they will be used.</p>"},{"location":"api/root.typescript/#propsrequired_16","title":"<code>props</code><sup>Required</sup>","text":"<ul> <li>Type: AddChildrenProps</li> </ul>"},{"location":"api/root.typescript/#addparent_6","title":"<code>addParent</code>","text":"<pre><code>public addParent(parent: JobCollection): void\n</code></pre>"},{"location":"api/root.typescript/#parentrequired_6","title":"<code>parent</code><sup>Required</sup>","text":"<ul> <li>Type: JobCollection</li> </ul>"},{"location":"api/root.typescript/#initializeallowfailure_2","title":"<code>initializeAllowFailure</code>","text":"<pre><code>public initializeAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection that haven't been set the allowFailure before.</p>"},{"location":"api/root.typescript/#allowfailurerequired_11","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#initializeartifacts_2","title":"<code>initializeArtifacts</code>","text":"<pre><code>public initializeArtifacts(artifacts: Artifacts): JobCollection\n</code></pre> <p>Sets <code>gcix.Job.artifacts</code> to all jobs within this JobCollection that haven't been set the artifacs before.</p>"},{"location":"api/root.typescript/#artifactsrequired_8","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#initializecache_2","title":"<code>initializeCache</code>","text":"<pre><code>public initializeCache(cache: Cache): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assigneCache()</code> to all jobs within this JobCollection that haven't been set the cache before.</p>"},{"location":"api/root.typescript/#cacherequired_8","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#initializedependencies_2","title":"<code>initializeDependencies</code>","text":"<pre><code>public initializeDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection that haven't been added dependencies before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts by default.</p>"},{"location":"api/root.typescript/#dependenciesrequired_14","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#initializeimage_2","title":"<code>initializeImage</code>","text":"<pre><code>public initializeImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection.</p>"},{"location":"api/root.typescript/#imagerequired_8","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | Image</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#initializeneeds_2","title":"<code>initializeNeeds</code>","text":"<pre><code>public initializeNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection that haven't been added needs before.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs by default.</p>"},{"location":"api/root.typescript/#needsrequired_14","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#initializerules_2","title":"<code>initializeRules</code>","text":"<pre><code>public initializeRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.append_rules()</code> to all jobs within this JobCollection that haven't been added rules before.</p>"},{"location":"api/root.typescript/#rulesrequired_16","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#initializetags_2","title":"<code>initializeTags</code>","text":"<pre><code>public initializeTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection that haven't been added tags before.</p>"},{"location":"api/root.typescript/#tagsrequired_19","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#initializevariables_2","title":"<code>initializeVariables</code>","text":"<pre><code>public initializeVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection that haven't been added variables before.</p>"},{"location":"api/root.typescript/#variablesrequired_12","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#overrideallowfailure_2","title":"<code>overrideAllowFailure</code>","text":"<pre><code>public overrideAllowFailure(allowFailure: boolean | number[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignAllowFailure()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/root.typescript/#allowfailurerequired_12","title":"<code>allowFailure</code><sup>Required</sup>","text":"<ul> <li>Type: boolean | number[]</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#overridedependencies_2","title":"<code>overrideDependencies</code>","text":"<pre><code>public overrideDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignDependencies()</code> to all jobs within the first stage of this JobCollection and overriding any previously added dependencies to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not download artifacts.</p>"},{"location":"api/root.typescript/#dependenciesrequired_15","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#overrideimage_2","title":"<code>overrideImage</code>","text":"<pre><code>public overrideImage(image: string | Image): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignImage()</code> to all jobs within this JobCollection overriding any previous set value.</p>"},{"location":"api/root.typescript/#imagerequired_9","title":"<code>image</code><sup>Required</sup>","text":"<ul> <li>Type: string | Image</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#overrideneeds_2","title":"<code>overrideNeeds</code>","text":"<pre><code>public overrideNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.assignNeeds()</code> to all jobs within the first stage of this JobCollection and overriding any previously added needs to that jobs.</p> <p>An empty parameter list means that jobs will get an empty dependency list and thus does not depend on other jobs.</p>"},{"location":"api/root.typescript/#needsrequired_15","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#overriderules_2","title":"<code>overrideRules</code>","text":"<pre><code>public overrideRules(rules: Rule[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.overrideRules()</code> to all jobs within this JobCollection and overriding any previously added rules to that jobs.</p>"},{"location":"api/root.typescript/#rulesrequired_17","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#overridetags_2","title":"<code>overrideTags</code>","text":"<pre><code>public overrideTags(tags: string[]): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addTags([...])</code> to all jobs within this JobCollection and overriding any previously added tags to that jobs.</p>"},{"location":"api/root.typescript/#tagsrequired_20","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#overridevariables_2","title":"<code>overrideVariables</code>","text":"<pre><code>public overrideVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre> <p>Calling <code>gcix.Job.addVariables({...})</code> to all jobs within this JobCollection and overriding any previously added variables to that jobs.</p>"},{"location":"api/root.typescript/#variablesrequired_13","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>???</p>"},{"location":"api/root.typescript/#properties_47","title":"Properties","text":"Name Type Description <code>lastJobsExecuted</code> <code>Job[]</code> This property returns all Jobs from the last stage of this JobCollection. <code>nestedJobs</code> <code>Job[]</code> No description. <code>populatedJobs</code> <code>Job[]</code> Returns a list with populated copies of all nested jobs of this JobCollection. <code>children</code> <code>ChildDict[]</code> No description. <code>orderedTags</code> <code>OrderedStringSet</code> No description. <code>orderedTagsForInitialization</code> <code>OrderedStringSet</code> No description. <code>orderedTagsForReplacement</code> <code>OrderedStringSet</code> No description. <code>parents</code> <code>Job | JobCollection[]</code> No description. <code>allowFailureForInitialization</code> <code>string | boolean | number[]</code> No description. <code>allowFailureForReplacement</code> <code>string | boolean | number[]</code> No description. <code>artifacts</code> <code>Artifacts</code> No description. <code>artifactsForInitialization</code> <code>Artifacts</code> No description. <code>artifactsForReplacement</code> <code>Artifacts</code> No description. <code>cache</code> <code>Cache</code> No description. <code>cacheForInitialization</code> <code>Cache</code> No description. <code>dependencies</code> <code>Job | JobCollection | Need[]</code> No description. <code>dependenciesForInitialization</code> <code>Job | JobCollection | Need[]</code> No description. <code>dependenciesForReplacement</code> <code>Job | JobCollection | Need[]</code> No description. <code>imageForInitialization</code> <code>string | Image</code> No description. <code>imageForReplacement</code> <code>string | Image</code> No description. <code>needs</code> <code>Job | JobCollection | Need[]</code> No description. <code>needsForInitialization</code> <code>Job | JobCollection | Need[]</code> No description. <code>needsForReplacement</code> <code>Job | JobCollection | Need[]</code> No description. <code>rulesForInitialization</code> <code>Rule[]</code> No description. <code>rulesForReplacement</code> <code>Rule[]</code> No description. <code>rulesToAppend</code> <code>Rule[]</code> No description. <code>rulesToPrepend</code> <code>Rule[]</code> No description. <code>scriptsToAppend</code> <code>string[]</code> No description. <code>scriptsToPrepend</code> <code>string[]</code> No description. <code>variables</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForInitialization</code> <code>{[ key: string ]: string}</code> No description. <code>variablesForReplacement</code> <code>{[ key: string ]: string}</code> No description."},{"location":"api/root.typescript/#lastjobsexecutedrequired_2","title":"<code>lastJobsExecuted</code><sup>Required</sup>","text":"<pre><code>public readonly lastJobsExecuted: Job[];\n</code></pre> <ul> <li>Type: Job[]</li> </ul> <p>This property returns all Jobs from the last stage of this JobCollection.</p> <p>This is typically be requested from a job which has setup this JobCollection as need, to determine all actual jobs of this JobCollection as need.</p>"},{"location":"api/root.typescript/#nestedjobsrequired_2","title":"<code>nestedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly nestedJobs: Job[];\n</code></pre> <ul> <li>Type: Job[]</li> </ul>"},{"location":"api/root.typescript/#populatedjobsrequired_2","title":"<code>populatedJobs</code><sup>Required</sup>","text":"<pre><code>public readonly populatedJobs: Job[];\n</code></pre> <ul> <li>Type: Job[]</li> </ul> <p>Returns a list with populated copies of all nested jobs of this JobCollection.</p> <p>Populated means, that all attributes of a Job which depends on its context are resolved to their final values. The context is primarily the JobCollection within the jobs resides but also dependencies to other jobs and JobCollection's. Thus this JobCollection will apply its own configuration, like variables to add, tags to set, etc., to all its jobs and JobCollection's.</p> <p>Copies means what it says, that the returned job are not the same job objects, originally added to this JobCollection, but copies of them.</p> <p>Nested means, that also jobs from JobCollection's within this JobCollection, are returned, as well as jobs from JobCollection's within JobCollection's within this JobCollection and so on.</p>"},{"location":"api/root.typescript/#childrenrequired_2","title":"<code>children</code><sup>Required</sup>","text":"<pre><code>public readonly children: ChildDict[];\n</code></pre> <ul> <li>Type: ChildDict[]</li> </ul>"},{"location":"api/root.typescript/#orderedtagsrequired_5","title":"<code>orderedTags</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTags: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#orderedtagsforinitializationrequired_2","title":"<code>orderedTagsForInitialization</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForInitialization: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#orderedtagsforreplacementrequired_2","title":"<code>orderedTagsForReplacement</code><sup>Required</sup>","text":"<pre><code>public readonly orderedTagsForReplacement: OrderedStringSet;\n</code></pre> <ul> <li>Type: OrderedStringSet</li> </ul>"},{"location":"api/root.typescript/#parentsrequired_5","title":"<code>parents</code><sup>Required</sup>","text":"<pre><code>public readonly parents: Job | JobCollection[];\n</code></pre> <ul> <li>Type: Job | JobCollection[]</li> </ul>"},{"location":"api/root.typescript/#allowfailureforinitializationoptional_2","title":"<code>allowFailureForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForInitialization: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#allowfailureforreplacementoptional_2","title":"<code>allowFailureForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly allowFailureForReplacement: string | boolean | number[];\n</code></pre> <ul> <li>Type: string | boolean | number[]</li> </ul>"},{"location":"api/root.typescript/#artifactsoptional_8","title":"<code>artifacts</code><sup>Optional</sup>","text":"<pre><code>public readonly artifacts: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#artifactsforinitializationoptional_2","title":"<code>artifactsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForInitialization: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#artifactsforreplacementoptional_2","title":"<code>artifactsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly artifactsForReplacement: Artifacts;\n</code></pre> <ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#cacheoptional_6","title":"<code>cache</code><sup>Optional</sup>","text":"<pre><code>public readonly cache: Cache;\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#cacheforinitializationoptional_2","title":"<code>cacheForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly cacheForInitialization: Cache;\n</code></pre> <ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#dependenciesoptional_6","title":"<code>dependencies</code><sup>Optional</sup>","text":"<pre><code>public readonly dependencies: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#dependenciesforinitializationoptional_2","title":"<code>dependenciesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#dependenciesforreplacementoptional_2","title":"<code>dependenciesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly dependenciesForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#imageforinitializationoptional_2","title":"<code>imageForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForInitialization: string | Image;\n</code></pre> <ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#imageforreplacementoptional_2","title":"<code>imageForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly imageForReplacement: string | Image;\n</code></pre> <ul> <li>Type: string | Image</li> </ul>"},{"location":"api/root.typescript/#needsoptional_6","title":"<code>needs</code><sup>Optional</sup>","text":"<pre><code>public readonly needs: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#needsforinitializationoptional_2","title":"<code>needsForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForInitialization: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#needsforreplacementoptional_2","title":"<code>needsForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly needsForReplacement: Job | JobCollection | Need[];\n</code></pre> <ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#rulesforinitializationoptional_2","title":"<code>rulesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForInitialization: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#rulesforreplacementoptional_2","title":"<code>rulesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesForReplacement: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#rulestoappendoptional_2","title":"<code>rulesToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToAppend: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#rulestoprependoptional_2","title":"<code>rulesToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly rulesToPrepend: Rule[];\n</code></pre> <ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#scriptstoappendoptional_2","title":"<code>scriptsToAppend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToAppend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#scriptstoprependoptional_2","title":"<code>scriptsToPrepend</code><sup>Optional</sup>","text":"<pre><code>public readonly scriptsToPrepend: string[];\n</code></pre> <ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#variablesoptional_7","title":"<code>variables</code><sup>Optional</sup>","text":"<pre><code>public readonly variables: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#variablesforinitializationoptional_2","title":"<code>variablesForInitialization</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForInitialization: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#variablesforreplacementoptional_2","title":"<code>variablesForReplacement</code><sup>Optional</sup>","text":"<pre><code>public readonly variablesForReplacement: {[ key: string ]: string};\n</code></pre> <ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#ijobcollectionbase","title":"IJobCollectionBase","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: @gcix/gcix.aws.CdkDiffDeploy, @gcix/gcix.container.BuildContainerCollection, @gcix/gcix.container.CopyContainerCollection, @gcix/gcix.python.PythonFullStack, JobCollection, Pipeline, IJobCollection, IJobCollectionBase</p> </li> </ul>"},{"location":"api/root.typescript/#methods_25","title":"Methods","text":"Name Description <code>addDependencies</code> No description. <code>addNeeds</code> No description. <code>addTags</code> No description. <code>addVariables</code> No description. <code>appendRules</code> No description. <code>appendScripts</code> No description. <code>assignArtifacts</code> No description. <code>assignCache</code> No description. <code>getAllInstanceNames</code> Return all instance names from the given child. <code>prependRules</code> No description. <code>prependScripts</code> No description."},{"location":"api/root.typescript/#adddependencies_6","title":"<code>addDependencies</code>","text":"<pre><code>public addDependencies(dependencies: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#dependenciesrequired_16","title":"<code>dependencies</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addneeds_6","title":"<code>addNeeds</code>","text":"<pre><code>public addNeeds(needs: Job | JobCollection | Need[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#needsrequired_16","title":"<code>needs</code><sup>Required</sup>","text":"<ul> <li>Type: Job | JobCollection | Need[]</li> </ul>"},{"location":"api/root.typescript/#addtags_6","title":"<code>addTags</code>","text":"<pre><code>public addTags(tags: string[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#tagsrequired_21","title":"<code>tags</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#addvariables_7","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#variablesrequired_14","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul>"},{"location":"api/root.typescript/#appendrules_6","title":"<code>appendRules</code>","text":"<pre><code>public appendRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_18","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#appendscripts_6","title":"<code>appendScripts</code>","text":"<pre><code>public appendScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_16","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#assignartifacts_6","title":"<code>assignArtifacts</code>","text":"<pre><code>public assignArtifacts(artifacts: Artifacts): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#artifactsrequired_9","title":"<code>artifacts</code><sup>Required</sup>","text":"<ul> <li>Type: Artifacts</li> </ul>"},{"location":"api/root.typescript/#assigncache_6","title":"<code>assignCache</code>","text":"<pre><code>public assignCache(cache: Cache): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#cacherequired_9","title":"<code>cache</code><sup>Required</sup>","text":"<ul> <li>Type: Cache</li> </ul>"},{"location":"api/root.typescript/#getallinstancenames_6","title":"<code>getAllInstanceNames</code>","text":"<pre><code>public getAllInstanceNames(child?: Job | JobCollection): OrderedStringSet\n</code></pre> <p>Return all instance names from the given child.</p> <p>That means all combinations of the childs name and stage within this JobCollection and all parent JobCollection's.</p>"},{"location":"api/root.typescript/#childoptional_6","title":"<code>child</code><sup>Optional</sup>","text":"<ul> <li>Type: Job | JobCollection</li> </ul>"},{"location":"api/root.typescript/#prependrules_6","title":"<code>prependRules</code>","text":"<pre><code>public prependRules(rules: Rule[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#rulesrequired_19","title":"<code>rules</code><sup>Required</sup>","text":"<ul> <li>Type: Rule[]</li> </ul>"},{"location":"api/root.typescript/#prependscripts_6","title":"<code>prependScripts</code>","text":"<pre><code>public prependScripts(scripts: string[]): JobCollection\n</code></pre>"},{"location":"api/root.typescript/#scriptsrequired_17","title":"<code>scripts</code><sup>Required</sup>","text":"<ul> <li>Type: string[]</li> </ul>"},{"location":"api/root.typescript/#ineed","title":"INeed","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: Need, INeed</p> </li> </ul>"},{"location":"api/root.typescript/#ipagesjob","title":"IPagesJob","text":"<ul> <li>Implemented By: PagesJob, IPagesJob</li> </ul>"},{"location":"api/root.typescript/#methods_26","title":"Methods","text":"Name Description <code>assignStage</code> Set the name of this jobs stage to a value other than <code>pages</code>. <code>copy</code> There should be only one instance of this job, that is why this method does not return a copy of this job but the job itself. <code>extendName</code> The jobs name <code>pages</code> is fixed and can't be altered. <code>extendStage</code> The stage name can't be altered from parent sequences. <code>extendStageValue</code> Extending the name of the stage is not allowed on this Job."},{"location":"api/root.typescript/#assignstage_1","title":"<code>assignStage</code>","text":"<pre><code>public assignStage(stage: string): PagesJob\n</code></pre> <p>Set the name of this jobs stage to a value other than <code>pages</code>.</p>"},{"location":"api/root.typescript/#stagerequired_10","title":"<code>stage</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>A valid Gitlab CI Job stage name.</p>"},{"location":"api/root.typescript/#copy_4","title":"<code>copy</code>","text":"<pre><code>public copy(): Job\n</code></pre> <p>There should be only one instance of this job, that is why this method does not return a copy of this job but the job itself.</p>"},{"location":"api/root.typescript/#extendname_4","title":"<code>extendName</code>","text":"<pre><code>public extendName(name: string): void\n</code></pre> <p>The jobs name <code>pages</code> is fixed and can't be altered.</p>"},{"location":"api/root.typescript/#namerequired_14","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#extendstage_4","title":"<code>extendStage</code>","text":"<pre><code>public extendStage(name: string): void\n</code></pre> <p>The stage name can't be altered from parent sequences.</p>"},{"location":"api/root.typescript/#namerequired_15","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#extendstagevalue_4","title":"<code>extendStageValue</code>","text":"<pre><code>public extendStageValue(name: string): void\n</code></pre> <p>Extending the name of the stage is not allowed on this Job.</p>"},{"location":"api/root.typescript/#namerequired_16","title":"<code>name</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#ipipeline","title":"IPipeline","text":"<ul> <li>Implemented By: Pipeline, IPipeline</li> </ul>"},{"location":"api/root.typescript/#methods_27","title":"Methods","text":"Name Description <code>addInclude</code> Let you add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\". <code>addServices</code> Add one or more <code>gcix.Service</code>s to the pipeline. <code>writeYaml</code> Create the Gitlab CI YAML file from this pipeline object."},{"location":"api/root.typescript/#addinclude_1","title":"<code>addInclude</code>","text":"<pre><code>public addInclude(include: Include): Pipeline\n</code></pre> <p>Let you add global <code>gcix.Include</code>s to the pipeline. Gitlab CI Documentation: \"Use include to include external YAML files in your CI/CD configuration.\".</p>"},{"location":"api/root.typescript/#includerequired_1","title":"<code>include</code><sup>Required</sup>","text":"<ul> <li>Type: Include</li> </ul>"},{"location":"api/root.typescript/#addservices_1","title":"<code>addServices</code>","text":"<pre><code>public addServices(services: Service[]): Pipeline\n</code></pre> <p>Add one or more <code>gcix.Service</code>s to the pipeline.</p> <p>Gitlab CI Documentation: \"The services keyword defines a Docker image that runs during a job linked to the Docker image that the image keyword defines.\"</p>"},{"location":"api/root.typescript/#servicesrequired_1","title":"<code>services</code><sup>Required</sup>","text":"<ul> <li>Type: Service[]</li> </ul> <p>simply use strings to name the services to link to the pipeline.</p> <p>Use objects of the <code>gcix.Service</code> class for more complex service configurations.</p>"},{"location":"api/root.typescript/#writeyaml_1","title":"<code>writeYaml</code>","text":"<pre><code>public writeYaml(filename?: string): void\n</code></pre> <p>Create the Gitlab CI YAML file from this pipeline object.</p> <p>Use that YAML file to trigger a child pipeline.</p>"},{"location":"api/root.typescript/#filenameoptional_1","title":"<code>filename</code><sup>Optional</sup>","text":"<ul> <li>Type: string</li> </ul> <p>the file name of the created yaml file.</p>"},{"location":"api/root.typescript/#properties_48","title":"Properties","text":"Name Type Description <code>includes</code> <code>Include[]</code> No description. <code>service</code> <code>Service[]</code> No description."},{"location":"api/root.typescript/#includesrequired_1","title":"<code>includes</code><sup>Required</sup>","text":"<pre><code>public readonly includes: Include[];\n</code></pre> <ul> <li>Type: Include[]</li> </ul>"},{"location":"api/root.typescript/#servicerequired_1","title":"<code>service</code><sup>Required</sup>","text":"<pre><code>public readonly service: Service[];\n</code></pre> <ul> <li>Type: Service[]</li> </ul>"},{"location":"api/root.typescript/#irule","title":"IRule","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: Rule, IRule</p> </li> </ul>"},{"location":"api/root.typescript/#methods_28","title":"Methods","text":"Name Description <code>addVariables</code> Adds one or more variables, each as keyword argument, to the rule. <code>never</code> This method is intended to be used for predefined rules."},{"location":"api/root.typescript/#addvariables_8","title":"<code>addVariables</code>","text":"<pre><code>public addVariables(variables: {[ key: string ]: string}): Rule\n</code></pre> <p>Adds one or more variables, each as keyword argument, to the rule.</p> <pre><code>rule.addVariables({GREETING: \"hello\", LANGUAGE: \"typescript\"})\n</code></pre>"},{"location":"api/root.typescript/#variablesrequired_15","title":"<code>variables</code><sup>Required</sup>","text":"<ul> <li>Type: {[ key: string ]: string}</li> </ul> <p>Each variable would be provided as keyword argument:.</p>"},{"location":"api/root.typescript/#never_1","title":"<code>never</code>","text":"<pre><code>public never(): Rule\n</code></pre> <p>This method is intended to be used for predefined rules.</p> <p>For instance you have defined an often used rule <code>on_master</code> whose if statement checks if the pipeline is executed on branch <code>master</code>. Then you can either run a job, if on master...</p> <pre><code>myJob.appendRules(onMaster)\n</code></pre> <p>... or do not run a job if on master...</p> <pre><code>myJob.appendRules(onMaster.never())\n</code></pre>"},{"location":"api/root.typescript/#iservice","title":"IService","text":"<ul> <li> <p>Extends: IBase</p> </li> <li> <p>Implemented By: Service, IService</p> </li> </ul>"},{"location":"api/root.typescript/#properties_49","title":"Properties","text":"Name Type Description <code>name</code> <code>string</code> No description."},{"location":"api/root.typescript/#namerequired_17","title":"<code>name</code><sup>Required</sup>","text":"<pre><code>public readonly name: string;\n</code></pre> <ul> <li>Type: string</li> </ul>"},{"location":"api/root.typescript/#itriggerjob","title":"ITriggerJob","text":"<ul> <li>Implemented By: TriggerJob, ITriggerJob</li> </ul>"},{"location":"api/root.typescript/#properties_50","title":"Properties","text":"Name Type Description <code>branch</code> <code>string</code> The branch of <code>project</code> the pipeline should be triggered of. <code>includes</code> <code>IncludeLocal | IncludeFile | IncludeRemote | IncludeTemplate | IncludeArtifact[]</code> Include a pipeline to trigger (Parent-child pipeline trigger) Mutually exclusiv with <code>project</code>. <code>project</code> <code>string</code> The full name of another Gitlab project to trigger (multi-project pipeline trigger). <code>strategy</code> <code>string</code> Determines if the result of this pipeline depends on the triggered downstream pipeline (use <code>TriggerStrategy.DEPEND</code>) or if just \"fire and forget\" the downstream pipeline (use <code>None</code>)."},{"location":"api/root.typescript/#branchoptional_2","title":"<code>branch</code><sup>Optional</sup>","text":"<pre><code>public readonly branch: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The branch of <code>project</code> the pipeline should be triggered of.</p>"},{"location":"api/root.typescript/#includesoptional_3","title":"<code>includes</code><sup>Optional</sup>","text":"<pre><code>public readonly includes: IncludeLocal | IncludeFile | IncludeRemote | IncludeTemplate | IncludeArtifact[];\n</code></pre> <ul> <li>Type: IncludeLocal | IncludeFile | IncludeRemote | IncludeTemplate | IncludeArtifact[]</li> </ul> <p>Include a pipeline to trigger (Parent-child pipeline trigger) Mutually exclusiv with <code>project</code>.</p>"},{"location":"api/root.typescript/#projectoptional_4","title":"<code>project</code><sup>Optional</sup>","text":"<pre><code>public readonly project: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>The full name of another Gitlab project to trigger (multi-project pipeline trigger).</p> <p>Mutually exclusive with <code>includes</code>.</p>"},{"location":"api/root.typescript/#strategyoptional_2","title":"<code>strategy</code><sup>Optional</sup>","text":"<pre><code>public readonly strategy: string;\n</code></pre> <ul> <li>Type: string</li> </ul> <p>Determines if the result of this pipeline depends on the triggered downstream pipeline (use <code>TriggerStrategy.DEPEND</code>) or if just \"fire and forget\" the downstream pipeline (use <code>None</code>).</p>"},{"location":"api/root.typescript/#enums","title":"Enums","text":""},{"location":"api/root.typescript/#cachepolicy","title":"CachePolicy","text":"<p>This enum represents the cache:policy keyword. The policy determines if a Job can modify the cache or read him only.</p>"},{"location":"api/root.typescript/#members","title":"Members","text":"Name Description <code>PULLPUSH</code> The default behavior of a caching job is to download the files at the start of execution and re-upload them at the end. <code>PULL</code> If you are certain that the job does not modify the cached files, you can specify this policy to skip the upload step."},{"location":"api/root.typescript/#pullpush","title":"<code>PULLPUSH</code>","text":"<p>The default behavior of a caching job is to download the files at the start of execution and re-upload them at the end.</p> <p>This behavior ensures that any changes made by the job are persisted for future runs.</p>"},{"location":"api/root.typescript/#pull","title":"<code>PULL</code>","text":"<p>If you are certain that the job does not modify the cached files, you can specify this policy to skip the upload step.</p> <p>By setting this policy, the job will only download the cached files at the start of execution without re-uploading them at the end.</p>"},{"location":"api/root.typescript/#whenstatement","title":"WhenStatement","text":"<p>This enum holds different when statements for <code>Rule</code>s.</p>"},{"location":"api/root.typescript/#members_1","title":"Members","text":"Name Description <code>ALWAYS</code> No description. <code>DELAYED</code> No description. <code>MANUAL</code> No description. <code>NEVER</code> No description. <code>ONFAILURE</code> No description. <code>ONSUCCESS</code> No description."},{"location":"api/root.typescript/#always","title":"<code>ALWAYS</code>","text":""},{"location":"api/root.typescript/#delayed","title":"<code>DELAYED</code>","text":""},{"location":"api/root.typescript/#manual","title":"<code>MANUAL</code>","text":""},{"location":"api/root.typescript/#never_2","title":"<code>NEVER</code>","text":""},{"location":"api/root.typescript/#onfailure","title":"<code>ONFAILURE</code>","text":""},{"location":"api/root.typescript/#onsuccess_1","title":"<code>ONSUCCESS</code>","text":""},{"location":"api/security.python/","title":"<code>security</code> Submodule","text":""},{"location":"api/security.python/#classes","title":"Classes","text":""},{"location":"api/security.python/#sops","title":"Sops","text":""},{"location":"api/security.python/#static-functions","title":"Static Functions","text":"Name Description <code>export_decrypted_values</code> Returns a helper string that can be embedded into jobs to allow exporting values that are decrypted using <code>sops</code>, for example: 'export $(sops -d sops/encrypted_file.env)'."},{"location":"api/security.python/#export_decrypted_values","title":"<code>export_decrypted_values</code>","text":"<pre><code>from gcix import security\nsecurity.Sops.export_decrypted_values(\npath: str,\ninstall_sops: bool = None,\ndownload_url: str = None\n)\n</code></pre> <p>Returns a helper string that can be embedded into jobs to allow exporting values that are decrypted using <code>sops</code>, for example: 'export $(sops -d sops/encrypted_file.env)'.</p> <p>This function is useful if you want to use environment variables to authenticate, for instance, with a container registry.</p> <p>The script has been successfully tested with SOPS version 3.7 and is intentionally NOT COMPATIBLE with SOPS version 3.6. This is due to a bug in the latter version, which wraps the values to be exported in quotes.</p>"},{"location":"api/security.python/#pathrequired","title":"<code>path</code><sup>Required</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Path to the <code>sops</code>-encrypted file.</p> <p>The path must be relative to the project directory.</p>"},{"location":"api/security.python/#install_sopsoptional","title":"<code>install_sops</code><sup>Optional</sup>","text":"<ul> <li>Type: bool</li> </ul> <p>Enable downloading <code>sops</code> from the provided <code>download_url</code>.ue.</p>"},{"location":"api/security.python/#download_urloptional","title":"<code>download_url</code><sup>Optional</sup>","text":"<ul> <li>Type: str</li> </ul> <p>Download URL to acquire <code>sops</code> from.</p> <p>Defaults to the GitHub Mozilla SOPS releases.</p>"},{"location":"api/security.typescript/","title":"<code>security</code> Submodule","text":""},{"location":"api/security.typescript/#classes","title":"Classes","text":""},{"location":"api/security.typescript/#sops","title":"Sops","text":""},{"location":"api/security.typescript/#static-functions","title":"Static Functions","text":"Name Description <code>exportDecryptedValues</code> Returns a helper string that can be embedded into jobs to allow exporting values that are decrypted using <code>sops</code>, for example: 'export $(sops -d sops/encrypted_file.env)'."},{"location":"api/security.typescript/#exportdecryptedvalues","title":"<code>exportDecryptedValues</code>","text":"<pre><code>import { security } from '@gcix/gcix'\nsecurity.Sops.exportDecryptedValues(path: string, installSops?: boolean, downloadUrl?: string)\n</code></pre> <p>Returns a helper string that can be embedded into jobs to allow exporting values that are decrypted using <code>sops</code>, for example: 'export $(sops -d sops/encrypted_file.env)'.</p> <p>This function is useful if you want to use environment variables to authenticate, for instance, with a container registry.</p> <p>The script has been successfully tested with SOPS version 3.7 and is intentionally NOT COMPATIBLE with SOPS version 3.6. This is due to a bug in the latter version, which wraps the values to be exported in quotes.</p>"},{"location":"api/security.typescript/#pathrequired","title":"<code>path</code><sup>Required</sup>","text":"<ul> <li>Type: string</li> </ul> <p>Path to the <code>sops</code>-encrypted file.</p> <p>The path must be relative to the project directory.</p>"},{"location":"api/security.typescript/#installsopsoptional","title":"<code>installSops</code><sup>Optional</sup>","text":"<ul> <li>Type: boolean</li> </ul> <p>Enable downloading <code>sops</code> from the provided <code>download_url</code>.ue.</p>"},{"location":"api/security.typescript/#downloadurloptional","title":"<code>downloadUrl</code><sup>Optional</sup>","text":"<ul> <li>Type: string</li> </ul> <p>Download URL to acquire <code>sops</code> from.</p> <p>Defaults to the GitHub Mozilla SOPS releases.</p>"},{"location":"dev/contribution/CODE_OF_CONDUCT/","title":"gcix Project Code of Conduct","text":"<p>We, the community behind the gcix project, are committed to providing a safe, respectful, and inclusive environment for all participants. This Code of Conduct outlines our expectations for behavior within our community, both online and offline, and applies to all contributors, maintainers, users, and participants.</p>"},{"location":"dev/contribution/CODE_OF_CONDUCT/#expected-behavior","title":"Expected Behavior","text":"<ul> <li>Treat all individuals with respect, kindness, and empathy.</li> <li>Be considerate of differing opinions, experiences, and backgrounds.</li> <li>Communicate openly, professionally, and constructively.</li> <li>Use welcoming and inclusive language in all interactions.</li> </ul>"},{"location":"dev/contribution/CODE_OF_CONDUCT/#unacceptable-behavior","title":"Unacceptable Behavior","text":"<p>The following behaviors are considered unacceptable and will not be tolerated within our community:</p> <ul> <li>Harassment, bullying, discrimination, or offensive comments related to race, gender, sexual orientation, religion, disability, or any other personal characteristic.</li> <li>Intimidation, threats, or unwelcome advances of any kind.</li> <li>Disruptive or disrespectful comments, trolling, or personal attacks.</li> <li>Sharing or promoting explicit or offensive content.</li> <li>Any behavior that creates an uncomfortable or unsafe environment for others.</li> </ul>"},{"location":"dev/contribution/CODE_OF_CONDUCT/#reporting-guidelines","title":"Reporting Guidelines","text":"<p>If you experience or witness behavior that violates this Code of Conduct, please follow these steps:</p> <ol> <li>Notify the individual that their behavior is inappropriate and ask them to stop.</li> <li>If the behavior continues or you are uncomfortable addressing it directly, report the incident to the project maintainers at gcix@gcix.dev.</li> <li>Provide details of the incident, including date, time, individuals involved, and a description of what occurred.</li> </ol>"},{"location":"dev/contribution/CODE_OF_CONDUCT/#consequences","title":"Consequences","text":"<p>Unacceptable behavior will not be tolerated within our community. Consequences for violating this Code of Conduct may include:</p> <ul> <li>Verbal or written warnings.</li> <li>Temporary or permanent bans from community interactions, events, or online platforms.</li> </ul>"},{"location":"dev/contribution/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>The project maintainers are responsible for enforcing this Code of Conduct. They will review and investigate all reported incidents promptly, treating all reports with discretion and confidentiality.</p>"},{"location":"dev/contribution/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies to all community spaces associated with the gcix project, including but not limited to:</p> <ul> <li>GitLab repositories, issues, and discussions.</li> <li>Online forums, chat rooms, and mailing lists.</li> <li>Project-related events and meetups.</li> </ul>"},{"location":"dev/contribution/CODE_OF_CONDUCT/#modifications-and-updates","title":"Modifications and Updates","text":"<p>This Code of Conduct may be updated or modified from time to time. Contributors and participants will be informed of any changes, and it is their responsibility to review and adhere to the most recent version.</p>"},{"location":"dev/contribution/CODE_OF_CONDUCT/#contact-information","title":"Contact Information","text":"<p>If you have any questions, concerns, or need to report an incident, please contact the project maintainers at [email address].</p>"},{"location":"dev/contribution/CODE_OF_CONDUCT/#license","title":"License","text":"<p>This Code of Conduct is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License.</p> <p>We value your participation and contribution to the gcix project. Let's work together to create a welcoming and inclusive community for everyone.</p>"},{"location":"dev/contribution/CONTRIBUTING/","title":"Contributing to the gcix","text":"<p>Thank you for considering contributing to the gcix! This document outlines the guidelines for contributing to our project. By participating, you agree to abide by these guidelines.</p>"},{"location":"dev/contribution/CONTRIBUTING/#how-can-i-contribute","title":"How Can I Contribute?","text":""},{"location":"dev/contribution/CONTRIBUTING/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you find a bug in the project, please create an issue on our issue tracker with a clear description of the bug. Include relevant details such as the steps to reproduce and the expected vs. actual behavior.</p>"},{"location":"dev/contribution/CONTRIBUTING/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>To suggest an enhancement, create an issue on our issue tracker with a clear description of your proposed improvement. We welcome new ideas and feedback!</p>"},{"location":"dev/contribution/CONTRIBUTING/#code-contributions","title":"Code Contributions","text":"<p>We welcome code contributions to improve the gcix. Please follow the Coding Guidelines below.</p>"},{"location":"dev/contribution/CONTRIBUTING/#documentation","title":"Documentation","text":"<p>Help improve our documentation by fixing typos, adding examples, or clarifying explanations. If you notice anything that needs improvement, submit a pull request.</p>"},{"location":"dev/contribution/CONTRIBUTING/#testing","title":"Testing","text":"<p>Help us improve the project's quality by writing and running tests. If you're adding new features or fixing bugs, consider adding relevant tests.</p>"},{"location":"dev/contribution/CONTRIBUTING/#getting-started","title":"Getting Started","text":"<p>To get started contributing to the gcix, follow these steps:</p>"},{"location":"dev/contribution/CONTRIBUTING/#fork-the-repository","title":"Fork the Repository","text":"<p>Fork the gcix to your GitLab account by clicking the \"Fork\" button.</p>"},{"location":"dev/contribution/CONTRIBUTING/#install-dependencies","title":"Install Dependencies","text":"<p>Navigate to the project directory and install dependencies:</p> <ul> <li>You need to have NodeJS already installed.</li> <li>Ensure you have <code>npx</code> installed.</li> </ul> <pre><code>cd your-forked-repo\n# This will install and execute projen\nnpx projen\n</code></pre>"},{"location":"dev/contribution/CONTRIBUTING/#make-changes","title":"Make Changes","text":"<p>Make your changes and improvements in your local repository.</p>"},{"location":"dev/contribution/CONTRIBUTING/#run-tests","title":"Run Tests","text":"<p>Run tests to ensure your changes haven't broken anything:</p> <pre><code>npx projen test:update # ensures that the comparison files are updated\n</code></pre>"},{"location":"dev/contribution/CONTRIBUTING/#coding-guidelines","title":"Coding Guidelines","text":"<ul> <li>Write clear, concise, and well-documented code.</li> <li>Write unit tests for your code.</li> </ul>"},{"location":"dev/contribution/CONTRIBUTING/#commit-guidelines","title":"Commit Guidelines","text":"<ul> <li>Commit messages should be descriptive and follow the conventional commit format. See Conventional Commits.</li> </ul>"},{"location":"dev/contribution/CONTRIBUTING/#merge-requests","title":"Merge Requests","text":"<p>When you're ready to submit your changes, follow these steps:</p> <ol> <li>Push your changes to your forked repository.</li> <li>Create a pull request against the main repository's <code>main</code> branch.</li> <li>Provide a clear title and description for your pull request, referencing any relevant issues.</li> <li>A project maintainer will review your pull request and provide feedback.</li> </ol>"},{"location":"dev/contribution/CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Please review and adhere to our Code of Conduct while participating in this project.</p>"},{"location":"dev/contribution/CONTRIBUTING/#license","title":"License","text":"<p>By contributing to the gcix, you agree that your contributions will be licensed under the Apache License 2.0.</p> <p>Thank you for contributing to the gcix!</p>"},{"location":"dev/contribution/LICENSE/","title":"Apache License 2.0","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>\u00a9 You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy] [name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"user/01-core/","title":"Core","text":"<p>The gcix is a Typescript library designed to facilitate the creation of dynamic pipelines for GitLab CI.</p> <p>Additionally, it provides examples in both Typescript and Python.</p> <p>Please select the language in which you want to see the examples.</p> TypescriptPython"},{"location":"user/01-core/#configuring-your-project-to-use-gcix","title":"Configuring your project to use gcix","text":"<p>Your GitLab project requires the following two files:</p> <pre><code>MyProject\n\u251c .gitlab-ci.(ts|py)\n\u2514 .gitlab-ci.yml\n</code></pre> <p>The .gitlab-ci.yml file is the one you are familiar with, responsible for rendering and triggering the child pipeline created with gcix. The latter is written into the .gitlab-ci.ts file.</p> <p>Now, let's examine how the .gitlab-ci.yml file should be structured for this project:</p> <pre><code>---\ngenerate-pipeline:\nstage: build\nimage: node:18\nscript:\n- npx projen install:ci\n- npx ts-node .gitlab-ci.ts\nartifacts:\npaths:\n- generated-config.yml\n# tags:\n#   - gcix\nrun-pipeline:\nstage: deploy\nneeds:\n- generate-pipeline\ntrigger:\ninclude:\n- artifact: generated-config.yml\njob: generate-pipeline\nstrategy: depend\n</code></pre> <p>The pipeline code for gcix is written in the file named .gitlab-ci.ts. The upcoming sections demonstrate how to create this pipeline code.</p> <p>Alternatively, instead of installing gcix in a Node container, you have the option to utilize the official Docker image that is released for each tag.</p> <p>In this case, the initial job would appear as follows:</p> <pre><code>generate-pipeline:\nstage: build\nimage: gcix/gcix:1.0.0\nscript: /usr/src/app/docker/gcip.sh\nartifacts:\npaths:\n- generated-config.yml\n</code></pre>"},{"location":"user/01-core/#hints-regarding-the-following-examples","title":"Hints regarding the following examples","text":"<p>All the code examples in the upcoming chapters are designed to be compatible with [Jest][1] or [pytest][2].</p> <p>As an example, a code snippet could be as follows:</p> TypescriptPython <pre><code>import gcix\nimport { check } from \"../../comparison\"\ntest(\"test\", () =&gt; {\nconst pipeline = new gcix.Pipeline()\npipeline.addChildren({\njob_or_job_collections: [\nnew gcix.Job({\nstage: \"print_date\",\nscript: \"date\"\n}\n)]\n});\ncheck(pipeline.render(), expect)\n});\n</code></pre> <p>To transform this Jest test into a valid <code>.gitlab-ci.ts</code> file, you need to:</p> <ul> <li>Remove the import statement: <code>import { check } from \"../../comparison\"</code>.</li> <li>Place your pipeline code directly in the <code>gitlab-ci.ts</code>, outside the <code>test(\"test\", () =&gt; {})</code> function.</li> <li>Instead of testing the rendered pipeline with <code>check(pipeline.render(), expect)</code>, you should write the <code>generated-pipeline.yml</code> with <code>pipeline.writeYaml()</code>.</li> </ul> <p>The resulting <code>.gitlab-ci.ts</code> code derived from the example would look like the following:</p> <pre><code>import gcip\nfrom tests import conftest\ndef test():\npipeline = gcip.Pipeline()\npipeline.add_children(jobs_or_job_collections: [gcip.Job(stage=\"print_date\", script=\"date\")])\nconftest.check(pipeline.render())\n</code></pre> <p>To transform this [Pytest][2] code into a valid <code>.gitlab-ci.oy</code> file, you need to:</p> <ul> <li>Remove the import statement: <code>from tests import conftest</code>..</li> <li>Place your pipeline code directly in the <code>gitlab-ci.py</code>, outside the <code>def test():</code> function.</li> <li>Instead of testing the rendered pipeline with <code>conftest.check(pipeline.render())</code>, you should write the <code>generated-pipeline.yml</code> with <code>pipeline.write_yaml()</code>.</li> </ul> <p>The resulting <code>.gitlab-ci.(ts|py)</code> file, derived from the example, would look like the following:</p> TypescriptPython <pre><code>import gcix\npipeline = new gcix.Pipeline()\npipeline.addChildren({\njobsOrJobCollections: [\nnew gcix.Job(stage=\"print_date\", script=\"date\")\n]\n});\npipeline.writeYaml()\n</code></pre> <pre><code>import gcix\npipeline = gcix.Pipeline()\npipeline.add_children(jobs_or_job_collection=[gcix.Job(stage=\"print_date\", script=\"date\")])\npipeline.write_yaml()\n</code></pre>"},{"location":"user/01-core/#create-a-pipeline-with-one-job","title":"Create a pipeline with one job","text":"<p>Input:</p> TypescriptPython <p><pre><code>import { Pipeline, Job } from \"../../../src\";\nimport { check } from \"../../comparison\";\ntest(\"test\", () =&gt; {\nconst pipeline = new Pipeline();\npipeline.addChildren({\njobsOrJobCollections: [new Job({ stage: \"print_date\", scripts: [\"date\"] })],\n});\ncheck(pipeline.render(), expect);\n});\n</code></pre> Keep in mind that, as mentioned in the Hints regarding the following examples, your pipeline code should conclude with <code>pipeline.writeYaml()</code>.</p> <p><pre><code>import gcip\nfrom tests import conftest\ndef test():\npipeline = gcip.Pipeline()\npipeline.add_children(gcip.Job(stage=\"print_date\", script=\"date\"))\nconftest.check(pipeline.render())\n</code></pre> Keep in mind that, as mentioned in the Hints regarding the following examples, your pipeline code should conclude with <code>pipeline.write_yaml()</code>.</p> <p>Output:</p> <pre><code>stages:\n- print_date\nprint-date:\nstage: print_date\nscript:\n- date\n</code></pre>"},{"location":"user/01-core/#configure-jobs","title":"Configure jobs","text":"<p>To configure jobs, you can utilize the following methods:</p> <p>Input:</p> TypescriptPython <pre><code>import * as gcix from \"../../../src\";\nimport { check } from \"../../comparison\";\ntest(\"test\", () =&gt; {\nconst pipeline = new gcix.Pipeline();\nconst job = new gcix.Job({ stage: \"print_date\", scripts: [\"date\"] });\njob.assignImage(\"docker/image:example\");\njob.prependScripts([\"./before-script.sh\"]);\njob.appendScripts([\"./after-script.sh\"]);\njob.addVariables({ USER: \"Max Power\", URL: \"https://example.com\" });\njob.addTags([\"test\", \"europe\"]);\njob.assignArtifacts(new gcix.Artifacts({ paths: [\"binaries/\", \".config\"] }));\njob.appendRules([new gcix.Rule({ ifStatement: \"$MY_VARIABLE_IS_PRESENT\" })]);\npipeline.addChildren({ jobsOrJobCollections: [job] });\ncheck(pipeline.render(), expect);\n});\n</code></pre> <pre><code>import gcip\nfrom tests import conftest\ndef test():\npipeline = gcip.Pipeline()\njob = gcip.Job(stage=\"print_date\", script=\"date\")\njob.set_image(\"docker/image:example\")\njob.prepend_scripts(\"./before-script.sh\")\njob.append_scripts(\"./after-script.sh\")\njob.add_variables(USER=\"Max Power\", URL=\"https://example.com\")\njob.add_tags(\"test\", \"europe\")\njob.artifacts.add_paths(\"binaries/\", \".config\")\njob.append_rules(gcip.Rule(if_statement=\"$MY_VARIABLE_IS_PRESENT\"))\npipeline.add_children(job)\nconftest.check(pipeline.render())\n</code></pre> <p>Output:</p> <pre><code>stages:\n- print_date\nprint-date:\nimage:\nname: docker/image:example\nstage: print_date\nscript:\n- ./before-script.sh\n- date\n- ./after-script.sh\nvariables:\nUSER: Max Power\nURL: https://example.com\nrules:\n- if: $MY_VARIABLE_IS_PRESENT\nwhen: on_success\nallow_failure: false\nartifacts:\nname: ci_job_name-my-awsome-feature-branch\npaths:\n- binaries/\n- .config\ntags:\n- test\n- europe\n</code></pre>"},{"location":"user/01-core/#bundling-jobs-as-collections","title":"Bundling jobs as collections","text":"<p>The class <code>JobCollection</code> allows you to group jobs together to apply a common configuration to all included jobs. This collection shares the same configuration methods as demonstrated in the previous example for individual jobs.</p> <p>Input:</p> TypescriptPython <p><pre><code>import * as gcix from \"../../../src\";\nimport { check } from \"../../comparison\";\ntest(\"test\", () =&gt; {\nconst collection = new gcix.JobCollection();\nconst job1 = new gcix.Job({ stage: \"job1\", scripts: [\"script1.sh\"] });\njob1.prependScripts([\"from-job-1.sh\"]);\ncollection.addChildren({\njobsOrJobCollections: [\njob1,\nnew gcix.Job({ stage: \"job2\", scripts: [\"script2.sh\"] }),\n],\n});\ncollection.prependScripts([\"from-sequence.sh\"]);\nconst pipeline = new gcix.Pipeline();\npipeline.addChildren({ jobsOrJobCollections: [collection] });\ncheck(pipeline.render(), expect);\n});\n</code></pre> As evident from the output, jobs can have their own configurations (indicated by <code>job1.prependScripts([...])</code>), and they can also inherit common configurations from their collection (indicated by <code>collection.prependScripts([...])</code>).</p> <pre><code>import gcip\nfrom tests import conftest\ndef test():\nsequence = gcip.Sequence()\njob1 = gcip.Job(stage=\"job1\", script=\"script1.sh\")\njob1.prepend_scripts(\"from-job-1.sh\")\nsequence.add_children(\njob1,\ngcip.Job(stage=\"job2\", script=\"script2.sh\"),\n)\nsequence.prepend_scripts(\"from-sequence.sh\")\npipeline = gcip.Pipeline()\npipeline.add_children(sequence)\nconftest.check(pipeline.render())\n</code></pre> <p>As evident from the output, jobs can have their own configurations (indicated by <code>job1.prepend_scripts([...])</code>), and they can also inherit common configurations from their collection (indicated by <code>collection.prepend_scripts([...])</code>).</p> <p>Output:</p> <pre><code>stages:\n- job1\n- job2\njob1:\nstage: job1\nscript:\n- from-sequence.sh\n- from-job-1.sh\n- script1.sh\njob2:\nstage: job2\nscript:\n- from-sequence.sh\n- script2.sh\n</code></pre>"},{"location":"user/01-core/#stacking-collections","title":"Stacking collections","text":"<p>Input:</p> TypescriptPython <pre><code>import { Pipeline, Job, JobCollection } from \"../../../src\";\nimport { check } from \"../../comparison\";\ntest(\"test\", () =&gt; {\nconst collectionA = new JobCollection();\ncollectionA.addChildren({\njobsOrJobCollections: [new Job({ stage: \"job1\", scripts: [\"script1.sh\"] })],\n});\ncollectionA.prependScripts([\"from-sequence-a.sh\"]);\nconst collectionB = new JobCollection();\ncollectionB.addChildren({ jobsOrJobCollections: [collectionA] });\ncollectionB.addChildren({\njobsOrJobCollections: [new Job({ stage: \"job2\", scripts: [\"script2.sh\"] })],\n});\ncollectionB.prependScripts([\"from-sequence-b.sh\"]);\nconst pipeline = new Pipeline();\npipeline.addChildren({ jobsOrJobCollections: [collectionB] });\ncheck(pipeline.render(), expect);\n});\n</code></pre> <pre><code>import gcip\nfrom tests import conftest\ndef test():\nsequence_a = gcip.Sequence()\nsequence_a.add_children(gcip.Job(stage=\"job1\", script=\"script1.sh\"))\nsequence_a.prepend_scripts(\"from-sequence-a.sh\")\nsequence_b = gcip.Sequence()\nsequence_b.add_children(sequence_a)\nsequence_b.add_children(gcip.Job(stage=\"job2\", script=\"script2.sh\"))\nsequence_b.prepend_scripts(\"from-sequence-b.sh\")\npipeline = gcip.Pipeline()\npipeline.add_children(sequence_b)\nconftest.check(pipeline.render())\n</code></pre> <p>Output:</p> <pre><code>stages:\n- job1\n- job2\njob1:\nstage: job1\nscript:\n- from-sequence-b.sh\n- from-sequence-a.sh\n- script1.sh\njob2:\nstage: job2\nscript:\n- from-sequence-b.sh\n- script2.sh\n</code></pre>"},{"location":"user/01-core/#pipelines-are-collections","title":"Pipelines are collections","text":"<p><code>Pipelines</code> are an expanded version of a <code>JobCollection</code> and include all of its capabilities (in addition to pipeline-specific abilities). This includes configuration options and the ability to stack other collections within them.</p> <p>Input:</p> TypescriptPython <pre><code>import { Pipeline, Job, JobCollection } from \"../../../src\";\nimport { check } from \"../../comparison\";\ntest(\"test\", () =&gt; {\nconst sequence_a = new JobCollection();\nsequence_a.addChildren({\njobsOrJobCollections: [new Job({ stage: \"job1\", scripts: [\"script1.sh\"] })],\n});\nsequence_a.prependScripts([\"from-sequence.sh\"]);\nconst pipeline = new Pipeline();\npipeline.addChildren({ jobsOrJobCollections: [sequence_a] });\npipeline.addChildren({\njobsOrJobCollections: [new Job({ stage: \"job2\", scripts: [\"script2.sh\"] })],\n});\npipeline.prependScripts([\"from-pipeline.sh\"]);\ncheck(pipeline.render(), expect);\n});\n</code></pre> <pre><code>import gcip\nfrom tests import conftest\ndef test():\nsequence_a = gcip.Sequence()\nsequence_a.add_children(gcip.Job(stage=\"job1\", script=\"script1.sh\"))\nsequence_a.prepend_scripts(\"from-sequence.sh\")\npipeline = gcip.Pipeline()\npipeline.add_children(sequence_a)\npipeline.add_children(gcip.Job(stage=\"job2\", script=\"script2.sh\"))\npipeline.prepend_scripts(\"from-pipeline.sh\")\nconftest.check(pipeline.render())\n</code></pre> <p>Output:</p> <pre><code>stages:\n- job1\n- job2\njob1:\nstage: job1\nscript:\n- from-pipeline.sh\n- from-sequence.sh\n- script1.sh\njob2:\nstage: job2\nscript:\n- from-pipeline.sh\n- script2.sh\n</code></pre>"},{"location":"user/01-core/#stages-allow-reuse-of-jobs-and-collections","title":"Stages allow reuse of jobs and collections","text":"<p>Suppose you intend to reuse a parameterized job. The following code illustrates an incorrect example:</p> TypescriptPython <pre><code>import { Job, Pipeline } from \"../../../src\";\nexport function jobFor(environment: string): Job {\nreturn new Job({\nstage: \"do_something\",\nscripts: [`./do-something-on.sh ${environment}`],\n});\n}\ntest(\"test\", () =&gt; {\nconst pipeline = new Pipeline();\nfor (const env of [\"development\", \"test\"]) {\npipeline.addChildren({ jobsOrJobCollections: [jobFor(env)] });\n}\nexpect(() =&gt; {\npipeline.render();\n}).toThrowError(/Two jobs have the same name/);\n});\n</code></pre> <pre><code>import pytest\nfrom gcip import Job, Pipeline, JobNameConflictError\ndef job_for(environment: str) -&gt; Job:\nreturn Job(stage=\"do_something\", script=f\"./do-something-on.sh {environment}\")\ndef test():\npipeline = Pipeline()\nfor env in [\"development\", \"test\"]:\npipeline.add_children(job_for(env))\nwith pytest.raises(JobNameConflictError):\npipeline.render()\n</code></pre> <p>When rendering this pipeline, it results in an error.</p> <pre><code>Error: Two jobs have the same name 'do-something' when rendering the pipeline\nPlease fix this by providing a different name and/or stage when adding those jobs to their collections/pipeline.\n</code></pre> <p>The error arises because both jobs were added with the same name to the pipeline, causing the second job to overwrite the first one.</p> <p>To avoid such conflicts, when adding jobs or collections to a collections, you should use the <code>.addChildren()</code> method, which accepts the <code>stage</code> property. You can utilize this property to modify the name of the jobs added. The value of <code>stage</code> will be appended to the jobs' <code>name</code> and <code>stage</code>. However, please note that this modification only applies to the jobs or collections added at that moment and not to the jobs and collections already present within the collection.</p>"},{"location":"user/01-core/#reuse-jobs","title":"Reuse jobs","text":"<p>Input:</p> TypescriptPython <pre><code>import { Pipeline, Job } from \"../../../src\";\nimport { check } from \"../../comparison\";\nexport function jobFor(environment: string): Job {\nreturn new Job({\nstage: \"do_something\",\nscripts: [`./do-something-on.sh ${environment}`],\n});\n}\ntest(\"test\", () =&gt; {\nconst pipeline = new Pipeline();\nfor (const env of [\"development\", \"test\"]) {\npipeline.addChildren({ jobsOrJobCollections: [jobFor(env)], stage: env });\n}\ncheck(pipeline.render(), expect);\n});\n</code></pre> <pre><code>import gcip\nfrom tests import conftest\ndef job_for(environment: str) -&gt; gcip.Job:\nreturn gcip.Job(stage=\"do_something\", script=f\"./do-something-on.sh {environment}\")\ndef test():\npipeline = gcip.Pipeline()\nfor env in [\"development\", \"test\"]:\npipeline.add_children(job_for(env), stage=env)\nconftest.check(pipeline.render())\n</code></pre> <p>The error occurred because we added both jobs to the collection with different stage values. By doing so, in the output, we correctly populate one job per environment, ensuring that each job is appropriately associated with its respective environment.</p> <p>Output:</p> <pre><code>stages:\n- do_something_development\n- do_something_test\ndevelopment-do-something:\nstage: do_something_development\nscript:\n- ./do-something-on.sh development\ntest-do-something:\nstage: do_something_test\nscript:\n- ./do-something-on.sh test\n</code></pre>"},{"location":"user/01-core/#reuse-collections","title":"Reuse collections","text":"<p>Namespacing significantly enhances the reusability of collections. You can encapsulate an entire GitLab CI pipeline within a collection and then reuse that collection for each environment. By repeating the collection within a loop for all environments, namespacing ensures that all jobs of the collection are populated uniquely for each environment, enabling efficient configuration management and deployment.</p> <p>Input:</p> TypescriptPython <pre><code>import { Pipeline, JobCollection, Job } from \"../../../src\";\nimport { check } from \"../../comparison\";\nexport function environmentPipeline(environment: string): JobCollection {\nconst collection = new JobCollection();\ncollection.addChildren({\njobsOrJobCollections: [\nnew Job({ stage: \"job1\", scripts: [`job-1-on-${environment}`] }),\nnew Job({ stage: \"job2\", scripts: [`job-2-on-${environment}`] }),\n],\n});\nreturn collection;\n}\ntest(\"test\", () =&gt; {\nconst pipeline = new Pipeline();\nfor (const env of [\"development\", \"test\"]) {\npipeline.addChildren({\njobsOrJobCollections: [environmentPipeline(env)],\nstage: env,\n});\n}\ncheck(pipeline.render(), expect);\n});\n</code></pre> <pre><code>import gcip\nfrom tests import conftest\ndef environment_pipeline(environment: str) -&gt; gcip.Sequence:\nsequence = gcip.Sequence()\nsequence.add_children(\ngcip.Job(stage=\"job1\", script=f\"job-1-on-{environment}\"),\ngcip.Job(stage=\"job2\", script=f\"job-2-on-{environment}\"),\n)\nreturn sequence\ndef test():\npipeline = gcip.Pipeline()\nfor env in [\"development\", \"test\"]:\npipeline.add_children(environment_pipeline(env), stage=env)\nconftest.check(pipeline.render())\n</code></pre> <p>Output:</p> <pre><code>stages:\n- job1_development\n- job2_development\n- job1_test\n- job2_test\ndevelopment-job1:\nstage: job1_development\nscript:\n- job-1-on-development\ndevelopment-job2:\nstage: job2_development\nscript:\n- job-2-on-development\ntest-job1:\nstage: job1_test\nscript:\n- job-1-on-test\ntest-job2:\nstage: job2_test\nscript:\n- job-2-on-test\n</code></pre>"},{"location":"user/01-core/#parallelization-name-stage","title":"Parallelization - name, stage","text":"<p>As evident from the previous examples, all jobs possess a distinct <code>stage</code>, causing them to run within collections. This behavior occurs because the <code>stage</code> property always extends the job's <code>name</code> and <code>stage</code>. This principle applies universally to all <code>stage</code> properties, be it for the constructor of a Job object or the <code>.add_*()</code> methods of a collection.</p> <p>When adding jobs to a collection, whether directly or within another collection, the objective is to merely extend the <code>name</code> of the jobs, leaving their <code>stage</code> unchanged. This approach ensures that jobs with equal stages can run in parallel.</p> <p>To achieve this, you can set identical values for the <code>stage</code> property while providing different values for the <code>name</code> property when creating jobs or adding them to collections. By doing so, the <code>name</code> property will extend only the name of a job without affecting its <code>stage</code>.</p>"},{"location":"user/01-core/#name-property-when-creating-jobs","title":"<code>name</code> property when creating jobs","text":"<p>Input:</p> TypescriptPython <pre><code>import { Job, Pipeline } from \"../../../src\";\nimport { check } from \"../../comparison\";\ntest(\"test\", () =&gt; {\nconst pipeline = new Pipeline();\npipeline.addChildren({\njobsOrJobCollections: [\nnew Job({ name: \"job1\", stage: \"single-stage\", scripts: [\"date\"] }),\nnew Job({ name: \"job2\", stage: \"single-stage\", scripts: [\"date\"] }),\n],\n});\ncheck(pipeline.render(), expect);\n});\n</code></pre> <pre><code>import gcip\nfrom tests import conftest\ndef test():\npipeline = gcip.Pipeline()\npipeline.add_children(\ngcip.Job(name=\"job1\", stage=\"single-stage\", script=\"date\"),\ngcip.Job(name=\"job2\", stage=\"single-stage\", script=\"date\"),\n)\nconftest.check(pipeline.render())\n</code></pre> <p>Output:</p> <pre><code>stages:\n- single_stage\njob1-single-stage:\nstage: single_stage\nscript:\n- date\njob2-single-stage:\nstage: single_stage\nscript:\n- date\n</code></pre> <p>In this scenario, we have chosen an equal value for the <code>stage</code> parameter, ensuring that both jobs have the same stage. To prevent their <code>name</code> values from being identical (and risking the second job overwriting the first one), we have also provided the <code>name</code> property. The <code>name</code> property's value will be appended to the existing <code>name</code> of the jobs. Consequently, both jobs will run in parallel within the same stage.</p> <p>You might wonder why there is no dedicated <code>stage</code> property. When considering collections, the <code>stage</code> property would extend both the <code>name</code> and <code>stage</code> of a job, while the <code>name</code> property would only extend the <code>name</code> of a job. Extending means appending values to the current <code>name</code> or <code>stage</code> values of a job. However, there's no practical reason to solely extend the <code>stage</code> of a job so that two jobs have distinct stages but unique names. In GitLab CI, a job must have a unique name, so extending just the <code>stage</code> wouldn't serve any purpose. Therefore, the consistent concept of using only the <code>name</code> and <code>stage</code> properties applies to both jobs and collections.</p> <p>As for not omitting the <code>stage</code> property when creating the jobs, it is because of the explanation in the previous paragraph. When creating jobs, we cannot directly set the <code>stage</code> value. Omitting the <code>stage</code> property means leaving it unset, which would default the GitLab CI jobs to the <code>test</code> stage. To define a stage other than <code>test</code>, we used the <code>stage</code> property. Yes, this implies that the job's <code>name</code> will include the value of the <code>stage</code>. However, this design decision clarifies the concept of <code>name</code> and <code>stage</code> more effectively than providing a <code>stage</code> property for jobs, especially when collections lack such a (superfluous) <code>stage</code> property.</p> <p>No worries! Here's a simple guide to keep in mind when creating Jobs:</p> <ol> <li>For distinct jobs that will run in separate stages within a collection, set different values only for the <code>stage</code> property.</li> <li>For distinct jobs that will run in parallel with equal stages, set different values only for the <code>name</code> property.</li> <li>For distinct jobs that will run in parallel with equal stages and a defined stage name, set different values for the <code>name</code> properties but equal values for the <code>stage</code> properties.</li> <li>Setting different values for both properties is not advisable and will result in the first scenario of distinct jobs running in separate stages within a collection.</li> </ol>"},{"location":"user/01-core/#name-parameter-when-adding-jobs-and-collections-to-collections","title":"<code>name</code> parameter when adding jobs (and collections) to collections","text":"<p>Let's consider the collection example from the chapter Stages allow reuse of jobs and collections. Instead of using the <code>stage</code> parameter when adding the collection multiple times to the pipeline, we will now utilize the <code>name</code> parameter.</p> <p>Input:</p> TypescriptPython <pre><code>import { Job, JobCollection, Pipeline } from \"../../../src\";\nimport { check } from \"../../comparison\";\nexport function environmentPipeline(environment: string) {\nconst collection = new JobCollection();\ncollection.addChildren({\njobsOrJobCollections: [\nnew Job({ stage: \"job1\", scripts: [`job-1-on-${environment}`] }),\nnew Job({ stage: \"job2\", scripts: [`job-2-on-${environment}`] }),\n],\n});\nreturn collection;\n}\ntest(\"test\", () =&gt; {\nconst pipeline = new Pipeline();\nfor (const env of [\"development\", \"test\"]) {\npipeline.addChildren({\njobsOrJobCollections: [environmentPipeline(env)],\nname: env,\n});\n}\ncheck(pipeline.render(), expect);\n});\n</code></pre> <pre><code>import gcip\nfrom tests import conftest\ndef environment_pipeline(environment: str) -&gt; gcip.Sequence:\nsequence = gcip.Sequence()\nsequence.add_children(\ngcip.Job(stage=\"job1\", script=f\"job-1-on-{environment}\"),\ngcip.Job(stage=\"job2\", script=f\"job-2-on-{environment}\"),\n)\nreturn sequence\ndef test():\npipeline = gcip.Pipeline()\nfor env in [\"development\", \"test\"]:\npipeline.add_children(environment_pipeline(env), name=env)\nconftest.check(pipeline.render())\n</code></pre> <p>Now the environments run in parallel, because just the job names are populated per environment but not the stage names.</p> <p>Output:</p> <pre><code>stages:\n- job1\n- job2\ndevelopment-job1:\nstage: job1\nscript:\n- job-1-on-development\ndevelopment-job2:\nstage: job2\nscript:\n- job-2-on-development\ntest-job1:\nstage: job1\nscript:\n- job-1-on-test\ntest-job2:\nstage: job2\nscript:\n- job-2-on-test\n</code></pre> <p>You can also combine the usage of <code>stage</code> and <code>name</code> when adding jobs. This approach is particularly useful when dealing with a large number of jobs, where some groups of jobs should run sequentially while jobs within each group should run in parallel. Here's an example to illustrate this scenario:</p> <p>Input:</p> TypescriptPython <pre><code>import { Job, Pipeline } from \"../../../src\";\nimport { check } from \"../../comparison\";\nexport function jobFor(service: string): Job {\nreturn new Job({\nstage: \"update_service\",\nscripts: [`./update-service.sh ${service}`],\n});\n}\ntest(\"test\", () =&gt; {\nconst pipeline = new Pipeline();\nfor (const env of [\"development\", \"test\"]) {\nfor (const service of [\"service1\", \"service2\"]) {\npipeline.addChildren({\njobsOrJobCollections: [jobFor(`${service}_${env}`)],\nstage: env,\nname: service,\n});\n}\n}\ncheck(pipeline.render(), expect);\n});\n</code></pre> <pre><code>import gcip\nfrom tests import conftest\ndef job_for(service: str) -&gt; gcip.Job:\nreturn gcip.Job(stage=\"update_service\", script=f\"./update-service.sh {service}\")\ndef test():\npipeline = gcip.Pipeline()\nfor env in [\"development\", \"test\"]:\nfor service in [\"service1\", \"service2\"]:\npipeline.add_children(job_for(f\"{service}_{env}\"), stage=env, name=service)\nconftest.check(pipeline.render())\n</code></pre> <p>The output shows that two services are being updated in parallel but within consecutive stages.</p> <p>Output:</p> <pre><code>stages:\n- update_service_development\n- update_service_test\nservice1-development-update-service:\nstage: update_service_development\nscript:\n- ./update-service.sh service1_development\nservice2-development-update-service:\nstage: update_service_development\nscript:\n- ./update-service.sh service2_development\nservice1-test-update-service:\nstage: update_service_test\nscript:\n- ./update-service.sh service1_test\nservice2-test-update-service:\nstage: update_service_test\nscript:\n- ./update-service.sh service2_test\n</code></pre>"}]}