{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "VERSIONRCOPTIONS": "{\"types\":[{\"type\":\"feat\",\"section\":\"Features\"},{\"type\":\"perf\",\"section\":\"Features\"},{\"type\":\"fix\",\"section\":\"Bug Fixes\"},{\"type\":\"chore\",\"section\":\"Chore\"},{\"type\":\"docs\",\"section\":\"Documentation\"},{\"type\":\"style\",\"section\":\"Chore\"},{\"type\":\"refactor\",\"section\":\"Chore\"},{\"type\":\"test\",\"section\":\"Tests\"}]}"
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "ci:compile": {
      "name": "ci:compile",
      "description": "Compiles the project.",
      "requiredEnv": [
        "CI"
      ],
      "steps": [
        {
          "spawn": "ci:install:deps"
        },
        {
          "spawn": "compile"
        }
      ]
    },
    "ci:install:deps": {
      "name": "ci:install:deps",
      "description": "Install dependencies inside the CI environment.",
      "requiredEnv": [
        "CI"
      ],
      "steps": [
        {
          "exec": "apt update && apt install -y python3-pip python3-venv jq rsync"
        },
        {
          "spawn": "install:ci"
        }
      ]
    },
    "ci:lint": {
      "name": "ci:lint",
      "description": "Executes eslint.",
      "requiredEnv": [
        "CI"
      ],
      "steps": [
        {
          "spawn": "ci:install:deps"
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "ci:package": {
      "name": "ci:package",
      "description": "packages the project.",
      "requiredEnv": [
        "CI"
      ],
      "steps": [
        {
          "spawn": "ci:install:deps"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "ci:package-all": {
      "name": "ci:package-all",
      "description": "Task which will install dependencies from lock, write the\n    CI_COMMIT_TAG in package.json, spawns pre-compile, compile and package",
      "requiredEnv": [
        "CI",
        "CI_COMMIT_TAG"
      ],
      "steps": [
        {
          "spawn": "ci:install:deps"
        },
        {
          "exec": "scripts/update_package_json_version.sh"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "package-all"
        }
      ]
    },
    "ci:publish:git": {
      "name": "ci:publish:git",
      "description": "Creates a new git tag and generates the CHANGELOG.md from\n  conventional commits",
      "env": {
        "RELEASE": "true"
      },
      "requiredEnv": [
        "CI"
      ],
      "steps": [
        {
          "spawn": "ci:setup:git"
        },
        {
          "spawn": "ci:install:deps"
        },
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "package-all"
        },
        {
          "spawn": "unbump"
        },
        {
          "spawn": "publish:git"
        }
      ]
    },
    "ci:publish:npm": {
      "name": "ci:publish:npm",
      "description": "Publish produced artifacts to NPMjs registry.",
      "requiredEnv": [
        "CI",
        "CI_COMMIT_TAG",
        "NPM_TOKEN"
      ],
      "steps": [
        {
          "spawn": "ci:install:deps"
        },
        {
          "exec": "npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}"
        },
        {
          "exec": "npm publish dist/js/*"
        }
      ]
    },
    "ci:publish:pypi": {
      "name": "ci:publish:pypi",
      "description": "Publish produced artifacts to PyPi repository.",
      "requiredEnv": [
        "CI",
        "CI_COMMIT_TAG",
        "TWINE_USERNAME",
        "TWINE_PASSWORD"
      ],
      "steps": [
        {
          "spawn": "ci:install:deps"
        },
        {
          "exec": "pip install --break-system-packages twine"
        },
        {
          "exec": "twine upload dist/python/*"
        }
      ]
    },
    "ci:setup:git": {
      "name": "ci:setup:git",
      "description": "Setup git clone for further building.",
      "requiredEnv": [
        "CI",
        "CI_COMMIT_REF_NAME",
        "CI_COMMIT_SHORT_SHA",
        "GCIX_PUSH_USER",
        "GCIX_PUSH_TOKEN",
        "CI_SERVER_HOST",
        "CI_PROJECT_PATH",
        "GITLAB_USER_NAME",
        "GITLAB_USER_EMAIL"
      ],
      "steps": [
        {
          "exec": "git clone --single-branch --branch \"${CI_COMMIT_REF_NAME}\" \"https://${GCIX_PUSH_USER}:${GCIX_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git\" \"${CI_COMMIT_SHORT_SHA}\""
        },
        {
          "exec": "cd ${CI_COMMIT_SHORT_SHA} && git checkout -B ${CI_COMMIT_REF_NAME} remotes/origin/${CI_COMMIT_REF_NAME} --"
        },
        {
          "exec": "cd ${CI_COMMIT_SHORT_SHA} && git config --local user.name \"${GITLAB_USER_NAME}\""
        },
        {
          "exec": "cd ${CI_COMMIT_SHORT_SHA} && git config --local user.email \"${GITLAB_USER_EMAIL}\""
        }
      ]
    },
    "ci:test": {
      "name": "ci:test",
      "description": "Executes Jest tests.",
      "requiredEnv": [
        "CI"
      ],
      "steps": [
        {
          "spawn": "ci:install:deps"
        },
        {
          "spawn": "test"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "docs:api": {
      "name": "docs:api",
      "description": "Generate api documentation with jsii-docgen",
      "steps": [
        {
          "spawn": "compile"
        },
        {
          "exec": "npx jsii-docgen --readme false -l typescript -l python --submodule root --output root"
        },
        {
          "exec": "npx jsii-docgen --readme false -l typescript -l python --split-by-submodule"
        },
        {
          "exec": "find . -maxdepth 1 -type f -name \"[a-z]*.*.md\" -exec mv {} docs/api/ \\;"
        }
      ]
    },
    "docs:dependencies": {
      "name": "docs:dependencies",
      "description": "Install all requirements to build the documentation.",
      "steps": [
        {
          "exec": "source .env/bin/activate && pip3 install -r requirements.txt"
        }
      ]
    },
    "docs:serve": {
      "name": "docs:serve",
      "description": "Start mkdocs in serve mode to allow writing local documentation.",
      "steps": [
        {
          "exec": "mkdocs serve"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools projenrc .projenrc.ts projenrc .projenrc.ts"
        }
      ]
    },
    "gcix:gen": {
      "name": "gcix:gen",
      "description": "Execute .gitlab-ci.ts and generate 'generated-config.yml'",
      "steps": [
        {
          "exec": "npx ts-node .gitlab-ci.ts"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "if [ ! -z ${CI} ]; then rsync -a . .repo --exclude .git --exclude node_modules && rm -rf dist && mv .repo dist; else npx projen package-all; fi"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        },
        {
          "spawn": "package:python"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target js"
        }
      ]
    },
    "package:python": {
      "name": "package:python",
      "description": "Create python language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target python"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "publish:git": {
      "name": "publish:git",
      "description": "Prepends the release changelog onto the project changelog, creates a release commit, and tags the release",
      "env": {
        "CHANGELOG": "dist/changelog.md",
        "RELEASE_TAG_FILE": "dist/releasetag.txt",
        "PROJECT_CHANGELOG_FILE": "CHANGELOG.md",
        "VERSION_FILE": "dist/version.txt"
      },
      "steps": [
        {
          "builtin": "release/update-changelog"
        },
        {
          "builtin": "release/tag-version"
        },
        {
          "exec": "git push --follow-tags origin main"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        },
        {
          "spawn": "publish:git"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --coverageProvider=v8 --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "env": {
        "UPDATE_TEST_OUTPUT": "true"
      },
      "steps": [
        {
          "exec": "npx projen test"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "VERSIONRCOPTIONS": "{\"types\":[{\"type\":\"feat\",\"section\":\"Features\"},{\"type\":\"perf\",\"section\":\"Features\"},{\"type\":\"fix\",\"section\":\"Bug Fixes\"},{\"type\":\"chore\",\"section\":\"Chore\"},{\"type\":\"docs\",\"section\":\"Documentation\"},{\"type\":\"style\",\"section\":\"Chore\"},{\"type\":\"refactor\",\"section\":\"Chore\"},{\"type\":\"test\",\"section\":\"Tests\"}]}"
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "yarn upgrade npm-check-updates"
        },
        {
          "exec": "npm-check-updates --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@types/jest,@types/js-yaml,@types/lodash,@types/node,@types/tmp,@types/yargs,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,aws-sdk-client-mock,aws-sdk-client-mock-jest,eslint-config-prettier,eslint-import-resolver-node,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,eslint,jest,jest-junit,jsii-diff,jsii-docgen,jsii-pacmak,npm-check-updates,prettier,projen,sanitize-filename,standard-version,tmp,ts-jest,ts-node,typescript,@aws-sdk/client-cloudformation,@aws-sdk/client-sts,js-yaml,lodash,yargs"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @types/jest @types/js-yaml @types/lodash @types/node @types/tmp @types/yargs @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-sdk-client-mock aws-sdk-client-mock-jest eslint-config-prettier eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint jest jest-junit jsii-diff jsii-docgen jsii-pacmak npm-check-updates prettier projen sanitize-filename standard-version tmp ts-jest ts-node typescript @aws-sdk/client-cloudformation @aws-sdk/client-sts js-yaml lodash yargs"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(echo $PWD/.env/bin:$PATH)",
    "VIRTUAL_ENV": "$(echo $PWD/.env)"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
